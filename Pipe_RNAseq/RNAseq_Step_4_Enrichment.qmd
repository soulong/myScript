---
title: "RNAseq Pathway Enrichment Analysis"
author: "Hao He"
date: "`r Sys.time()`"
format: html
editor_options:
  # output in console or inline
  chunk_output_type: console
params:
  # sample info file located in root_dir
  project_dir: "D:/Others/2023-12-04_RNAseq_ETERN_LJJ"
  save_Rdata: TRUE
  species: "hs" # hs or mm
  deg_padj: 0.05
  deg_fc: 1.5
  deg_mincount: 200
  deseq2_dir: "deseq2"
  enrichment_dir: "enrichment"
  wald_test_suffix: "_wald_test_result.xlsx" 
  counts_file_suffix: "_gene_expression.xlsx"
  quantification_dir: "quantification"
  sample_info_file: "sample_info.xlsx" 
--- 


# Setup
```{r setup}
# options("repos" = c(CRAN = "http://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
# options(BioC_mirror = "http://mirrors.tuna.tsinghua.edu.cn/bioconductor")

knitr::opts_chunk$set(echo = TRUE, results = "hold", cache = TRUE)

# rstudioapi::getActiveDocumentContext()$path |>
#   dirname() |>
#   setwd()
setwd(params$project_dir)
print(getwd())

library(tidyverse)
library(writexl)
library(readxl)
library(msigdbr)
library(progeny)
library(decoupleR)
library(clusterProfiler)
library(GseaVis)
library(ggrepel)
library(cowplot)
library(RColorBrewer)
library(pheatmap)
library(pathview)
library(aPEAR)
library(GseaVis) # devtools::install_github("junjunlab/GseaVis") 

library(furrr)
plan(multicore, workers=4)
# plan(sequential)

# load params
species <- params$species
deg_padj <- params$deg_padj
deg_fc <- params$deg_fc
deg_mincount <- params$deg_mincount
deseq2_dir <- params$deseq2_dir
wald_test_suffix <- params$wald_test_suffix
enrichment_dir <- params$enrichment_dir
counts_file_suffix <- params$counts_file_suffix
quantification_dir <- params$quantification_dir
sample_info_file <- params$sample_info_file
save_Rdata <- params$save_Rdata

if(!exists(enrichment_dir)) dir.create(enrichment_dir)

print(str_glue("species: {species}"))
print(str_glue("deg_padj: {deg_padj}"))
print(str_glue("deg_fc: {deg_fc}"))
print(str_glue("deg_mincount: {deg_mincount}"))

```



# Sample Based Analysis

## sample info
```{r}
# read sample info
group_cols <- normalizePath(sample_info_file) %>% 
  read_xlsx(sheet="contrast", range="A1:A100", col_types="text") %>% 
  pull(comparison) %>% 
  na.omit() %>% 
  as.character()

sample <- normalizePath(sample_info_file) %>% 
  read_xlsx(sheet="sample", col_types="text") %>% 
  filter(include=="yes") %>% 
  .[, c("sample_name", group_cols)] %>% 
  # column_to_rownames("sample_name") %>% 
  unite("group", !sample_name, sep = ".", remove = F) %>% 
  mutate(group=factor(group, unique(.[["group"]])))

sample
```


## expression TPM
```{r}
# read expression matrix
expression_file <- list.files(quantification_dir, 
                              counts_file_suffix, 
                              full.names = T) %>% 
  str_subset("^[^~]") %>% 
  last()

# convert to matrix
expr_mat <- read_xlsx(expression_file, "tpm") %>%
  filter(!is.na(symbol)) %>%
  distinct(symbol, .keep_all=T) %>%
  select(all_of(c("symbol", sample$sample_name))) %>%
  column_to_rownames('symbol') %>%
  as.matrix()

# filter rows
expr_mat_filtered <- unique(sample$group) %>% 
  map(\(x) filter(sample, group==x) %>% 
        pull(sample_name) %>% 
        expr_mat[, .] %>% 
        rowMeans() %>% 
        # at least one group has mean expr > X
        magrittr::is_greater_than(1) %>% 
        rownames(expr_mat)[.]) %>% #lengths()
  unlist() %>%
  unique() %>% 
  expr_mat[., ] %>% 
  round()

# check dims
dim(expr_mat)
dim(expr_mat_filtered)
expr_mat_filtered[1:5,1:2]
```


## ssGSEA with Hallmark
```{r}
# prepare hallmark set
geneset_hallmark <- msigdbr::msigdbr(
    species = if_else(params$species=="hs", 
                      "Homo sapiens", "Mus musculus"),
    category = "H") %>% 
  select(gs_name, gene_symbol) %>% 
  mutate(gs_name = 
           str_replace_all(gs_name, 'HALLMARK_','') %>%
           str_replace_all('_',' ') %>%
           str_to_title()) %>% 
  split(., .[["gs_name"]]) %>% 
  modify(\(x) pull(x, gene_symbol))

# run many algorithms
for(method in c("gsva", "zscore", "ssgsea", "plage")) {
  gsva_res <- GSVA::gsva(expr_mat_filtered, 
                         geneset_hallmark,
                         method = method)
  pheatmap(
    gsva_res, border_color=NA, scale='none', 
    cluster_cols = F,
    cluster_rows = T,
    fontsize_row = 6,
    fontsize_col = 4,
    filename=str_glue(
      "{enrichment_dir}/{Sys.Date()}_ssGSEA_heatmap_{method}.pdf"),
    width=6, height=7
  )
  while(dev.cur() != 1) dev.off()
}
```


## decouple network
```{r}
# pathway
pathway_progeny <-
  # decoupleR::get_progeny(organism, top = 500) %>%
  {if(params$species=="hs") {
    progeny::model_human_full 
  } else {
    progeny::model_mouse_full
  }} %>% 
  as_tibble() %>%
  arrange(pathway, p.value) %>%
  filter(p.value < 0.001) %>% 
  # dplyr::slice_head(n=500, by=pathway) %>%
  dplyr::select(source=pathway, 
                target=gene, 
                mor=weight, 
                p_value=p.value) %>%
  mutate(across(where(is.factor), as.character))
# pathway_progeny <- get_progeny(organism, top=500) %>%
#   rename(mor=weight)


# TF regulon
tf_collectri <- ifelse(params$species=='hs', 
                       'human', 'mouse') %>% 
  decoupleR::get_collectri(split_complexes=F)

```

## decouple analysis
```{r}
# run pathway
pathway_res <- decouple(expr_mat_filtered, pathway_progeny)
pathway_res$statistic %>% unique()

# run TF
tf_res <- decouple(expr_mat_filtered, tf_collectri)


# save data
write_xlsx(
  list(progeny = pathway_res, collectri = tf_res),
  str_glue("{enrichment_dir}/{Sys.Date()}_activity.xlsx"))

```

## decouple visualize
```{r}
pathway_res$statistic %>% unique()
method_use <- "consensus"

# pathway
# barplot
pathway_res %>%
  left_join(sample, by=join_by(condition==sample_name)) %>%
  # average sample score
  summarise(score=mean(score),
            .by=c(statistic, source, group)) %>%
  # filter(statistic=='consensus') %>%
  ggplot(aes(source, score, fill=group)) +
  # geom_jitter() +
  geom_col(width=0.7, color=NA, position=position_dodge2()) +
  facet_wrap(~ statistic, scales='free') +
  labs(x="") +
  theme_bw() +
  theme(axis.text.x=element_text(angle=45, hjust=1),
        legend.position='top',
        panel.grid = element_blank(),
        strip.background = element_rect(fill=NA))
ggsave2(str_glue(
  "{enrichment_dir}/{Sys.Date()}_activity_progeny_barplot.pdf"), 
  width=12, height=6)

# heatmap
pathway_res_mat <- pathway_res %>%
  filter(statistic == method_use) %>%
  pivot_wider(id_cols = 'condition', 
              names_from = 'source',
              values_from = 'score') %>%
  column_to_rownames('condition') %>%
  as.matrix() %>% 
  scale() %>% 
  t() %>% 
  # reorder
  .[, sample$sample_name]
# colnames(pathway_res_mat)
# pathway_res_mat[1:5,1:2]
pheatmap(pathway_res_mat, 
         border_color = NA, 
         color=colorRampPalette(c("#377eb8", "#f7f7f7", "#e41a1c"))(100),
         cluster_rows = T,
         cluster_cols = F,
         annotation_col = column_to_rownames(sample[, -2], "sample_name"),
         filename = str_glue(
           "{enrichment_dir}/{Sys.Date()}_activity_progeny_heatmap.pdf"),
         width = ceiling(nrow(pathway_res_mat)/2), 
         height = ceiling(nrow(pathway_res_mat)/3),
         main = str_glue("Heatmap of pathway activity")
         )
while(dev.cur() != 1) dev.off()




# # TF
# # barplot
# tf_res_5 <- tf_res %>%
#   left_join(sample, by=join_by(condition==sample_name)) %>%
#   reframe(score=mean(score), 
#           p_value=mean(p_value, na.rm=T), 
#           .by=c(statistic, source, group)) %>%
#   reframe(var=var(score), 
#           .by=c(statistic, source)) %>%
#   slice_max(order_by=abs(var), n=200, with_ties = F)
# 
# tf_res_25 <- tf_res %>%
#   arrange(source) %>% 
#   left_join(sample, by=join_by(condition==sample_name)) %>%
#   reframe(score=mean(score),
#           p_value=mean(p_value, na.rm=T),
#           .by=c(statistic, source, group)) %>%
#   reframe(var=var(score), .by=c(statistic, source)) %>%
#   slice_max(order_by=abs(var), n=5, by=c(statistic))
# tf_res %>% 
#   left_join(sample, by=join_by(condition==sample_name)) %>%
#   filter(source %in% tf_res_25$source) %>% 
#   reframe(score=mean(score), 
#           p_value=mean(p_value, na.rm=T), 
#           .by=c(statistic, source, group)) %>% 
#   ggplot(aes(source, score, fill=group)) +
#   geom_col(width=0.7, color=NA, position=position_dodge2()) +
#   facet_wrap(~ statistic, scales='free') +
#   labs(x="") +
#   theme_bw() +
#   theme(axis.text.x=element_text(size=6, angle=45, hjust=1),
#         legend.position='top',
#         panel.grid = element_blank(),
#         strip.background = element_rect(fill=NA))
# ggsave2(str_glue(
#   "{enrichment_dir}/{Sys.Date()}_activity_collectri_barplot.pdf"),
#   width=12, height=6)

# heatmap
tf_res_100 <- tf_res %>%
  filter(statistic == method_use) %>%
  left_join(sample, by=join_by(condition==sample_name)) %>%
  reframe(score=mean(score), 
          p_value=mean(p_value, na.rm=T), 
          .by=c(statistic, source, group)) %>%
  reframe(var=var(score), 
          .by=c(statistic, source)) %>%
  slice_max(order_by=abs(var), n=200, with_ties = F)
tf_res_mat <- tf_res %>%
  filter(statistic == method_use) %>%
  # filter(source %in% tf_res_100$source) %>%
  pivot_wider(id_cols = 'condition', 
              names_from = 'source',
              values_from = 'score') %>%
  column_to_rownames('condition') %>%
  as.matrix() %>% 
  scale() %>% 
  t() %>% 
  # reorder
  .[, sample$sample_name]
# dim(tf_res_mat)
# tf_res_mat[1:5,1:2]
pheatmap(tf_res_mat, 
         border_color = NA, 
         color=colorRampPalette(c("#377eb8", "#f7f7f7", "#e41a1c"))(100),
         cluster_rows = T,
         cluster_cols = F,
         show_rownames = F,
         fontsize_row = 3,
         annotation_col = column_to_rownames(sample[, -2], "sample_name"),
         filename = str_glue(
           "{enrichment_dir}/{Sys.Date()}_activity_collectri_heatmap.pdf"),
         width = ceiling(nrow(pathway_res_mat)/2), 
         height = ceiling(nrow(pathway_res_mat)/2),
         main = str_glue("Heatmap of TFs activity")
         )
while(dev.cur() != 1) dev.off()

```

## individual pathway
```{r}
# define pathway of interest
poi <- "MAPK"
label_genes <- c("EPHA2","SPRY4","DUSP6","CCND1")
# label_genes <- NULL

# read deg results
wald_test_file <- list.files(deseq2_dir, 
                             wald_test_suffix,
                             full.names = T) %>% 
  str_subset("^[^~]") %>% 
  last()
comparison <- excel_sheets(wald_test_file)
cat(str_glue("{str_c(comparison, collapse='\n')}"))
wald_test_deg_in_poi <- comparison %>% 
  set_names(comparison) %>% 
  map(\(x) read_xlsx(wald_test_file, x) %>% 
        # order by stats first
        arrange(desc(stat), pvalue) %>% 
        filter(baseMean > 500, 
               abs(log2FoldChange) > deg_fc,
               padj < deg_padj) %>% 
        inner_join(
          filter(pathway_progeny, source == poi, p_value < 0.001),
          by=join_by(symbol==target)) %>% 
        {if(is.null(label_genes)) {.} else{
            mutate(., label=if_else(symbol %in% label_genes, symbol, NA))
          } } %>%
        mutate(label=ifelse(mor>1 & abs(stat)>2, symbol, NA)) %>% 
        mutate(type=case_when(mor > 0 & stat > 0 ~ "1",
                              mor > 0 & stat < 0 ~ "2",
                              mor < 0 & stat > 0 ~ "2",
                              mor < 0 & stat < 0 ~ "1"))
      )

# plot each wald test group
wald_test_deg_in_poi %>%
  map(\(x) ggplot(x, aes(x = mor, y = stat, color = type)) + 
        geom_point(size=0.5, alpha=0.7) +
        # scale_colour_manual(values = c("red","royalblue3","grey")) +
        # geom_label_repel(aes(label = ID)) + 
        geom_text_repel(aes(label=label), size=2) +
        labs(x="Weight",y="Wald test statistics") +
        theme_minimal() +
        theme(legend.position = "none") +
        geom_vline(xintercept = 0, linetype = 'dotted') +
        geom_hline(yintercept = 0, linetype = 'dotted')) %>% 
  plot_grid(plotlist = ., labels = names(.), label_size = 8)

ggsave2(str_glue(
  "{enrichment_dir}/{Sys.Date()}_activity_{poi}.pdf"), 
  width=9, height=9)

```



# Comparison Based Analysis

## read wald test data
```{r}
# get wald test result file
print("read genelist from DESeq2 wald test data")
wald_test_file <- list.files(deseq2_dir, 
                             wald_test_suffix,
                             full.names = T) %>% 
  str_subset("^[^~]") %>%  # remove excel tmp files
  last()

# read multi-sheet data
comparison <- excel_sheets(wald_test_file)
cat(str_glue("{str_c(comparison, collapse='\n')}"))
wald_test <- comparison %>% 
  set_names(comparison) %>% 
  map(\(x) read_xlsx(wald_test_file, x) %>% 
        # order by stats first
        arrange(desc(stat), pvalue) )


# get ranked genelist, for GSEA
genelist_ranked <- wald_test %>% 
  map(\(x) distinct(x, symbol, .keep_all = T) %>% 
        select(symbol, stat) %>% 
        deframe())

# subset sig deg, for ORA
print("filter comparison by < 20 sig genes")
wald_test_sig <- wald_test %>% 
  map(\(x) filter(x, 
                  baseMean > deg_mincount,
                  abs(log2FoldChange) > log2(deg_fc),
                  padj < deg_padj) ) %>% 
  # remove comparison which has less sig genes
  .[map_int(., nrow) > 20] %>% 
  map(\(x) pull(x, symbol))
```


## msigdb geneset
```{r}
# msigdbr::msigdbr_show_species()
# msigdbr::msigdbr_collections()

if(!exists("genesets")) {
  print("prepare term2gene geneset from msigdbr")

  msigdb <- msigdbr::msigdbr(
    species = if_else(params$species=="hs", 
                      "Homo sapiens", "Mus musculus"))
  
  ## subset genesets
  genesets <- list(
    ## H
    Hallmark = filter(msigdb, gs_cat == "H"),
    ## GO
    GOBP = filter(msigdb, gs_subcat == "GO:BP"),
    # GOMF = filter(msigdb, gs_subcat == "GO:MF"),
    # GOCC = filter(msigdb, gs_subcat == "GO:CC"),
    ## cannonical pathway
    KEGG = filter(msigdb, gs_subcat == "CP:KEGG"),
    # PID = filter(msigdb, gs_subcat == "CP:PID"),
    # BIOCARTA = filter(msigdb, gs_subcat == "CP:BIOCARTA"),
    WikiPathway = filter(msigdb, gs_subcat == "CP:WIKIPATHWAYS"),
    Reactome = filter(msigdb, gs_subcat == "CP:REACTOME")
    ## TF
  ) %>% 
    # get gs_name to tidy format
    map(\(x) dplyr::select(x, gs_id=gs_exact_source, gs_name, gene_symbol) %>% 
          mutate(gs_id=ifelse(gs_id=="", gs_name, gs_id)))
    
  
  ## self defined geneset
  if(T) {
    yap_targets <- c(
      "CTGF","ANKRD1","CYR61","TOP2A","KIF14","CCNA2",
      "CDCA8","CENPF","KIF23","KIF20B","KNTC1","RRM2",
      "MCM3","SGOL1.AS1","TUBB","MYBL1","RAD18",
      "ZWILCH","SGOL1","TIMELESS","GINS1","SMC3","TK1",
      "MRE11A","MCM7","SUV39H2","GADD45B","FOSL1","CENPV",
      "RUVBL2","MYC","GLI2","AXL","ABCB1","CAT","GPATCH4",
      "LMNB2","TXN","WSB2","AREG","FOXF2","IGFBP3","RASSF2",
      "AMOTL2","NPPB","CCND1") %>%
      str_trim() %>%
      unique() %>%
      str_to_upper()
    yap_targets <- crossing(
      gs_id="HALLMARK_YAP_TARGETS",
      gs_name = "HALLMARK_YAP_TARGETS", 
      gene_symbol = yap_targets)
    # add to Hallmark
    genesets$Hallmark <- genesets$Hallmark %>% 
      bind_rows(yap_targets)
  }
  
  # to list
  genesets <- genesets %>% 
    map(\(x) list(term2gene=x[, c("gs_id", "gene_symbol")],
                  term2name=x[, c("gs_id", "gs_name")]))
}

```


## ORA func

```{r}

#' @name plot_enrich_ora
#' @title plot_enrich_ora
#' @description dotplot for enrich result from enrich_ORA
#'
#' @param enrichment data.frame, from ORA enrichment,
#'        result can be merged from multi enrichment, grouping info can be viewed by facet
#' @param show_category integer, show enriched category number
#' @param plot_type character, one of dot, bar
#' @param axis_x character, plot axis x by  which column,
#'        one of GeneRatio, -log10(p.adjust), enrichFactor, Count
#' @param order_by character, filter show_category by which column,
#'        one of GeneRatio, -log10(p.adjust), enrichFactor, Count
#' @param color_by character, map point color, one of GeneRatio, -log10(p.adjust), enrichFactor, Count
#' @param color_range two element character vector, mapping color range, from low to high
#' @param size_by character, map point size, one of GeneRatio, -log10(p.adjust), enrichFactor, Count
#'        only works if plot_type is dot
#' @param size_range two element numeric vector, mapping point size, from low to high
#'        only works if plot_type is dot
#' @param text_len_limit integer, wrap y-axis text length
#' @param facet_by character, facet plot by which column in enrichment
#' @param facet_scales character, facet scales, one of free_y, free_x, free, fixed,
#'        only works if facet_by is not NULL
#'
#' @import ggplot2
#' @importFrom dplyr arrange mutate slice vars group_by
#' @importFrom stringr str_wrap
#' @importFrom rlang sym !!
#'
#' @return ggplot2 object
#'
#' @export
#'
plot_enrich_ora <- function(enrichment,
                            show_category=10,
                            plot_type="dot", # bar
                            axis_x="GeneRatio",
                            order_by="-log10(p.adjust)",
                            color_by="-log10(p.adjust)",
                            color_range=c("#377eb8", "#e41a1c"),
                            size_by="Count",
                            size_range=c(2, 6),
                            text_len_limit=40,
                            facet_by=NULL,
                            facet_scales="free"
) {
  
  if(!(class(enrichment) == "data.frame"))
    stop("enrichment must be a data.frame (result slot from clusterProfiler)")

  if(!(plot_type %in% c("dot", "bar")))
    stop("plot_type must be one of dor, bar")

  if(!(axis_x %in% c("GeneRatio", "-log10(p.adjust)", "enrichFactor", "Count")))
    stop("axis_x must be one of GeneRatio, -log10(p.adjust), enrichFactor, Count")

  if(!(order_by %in% c("GeneRatio", "-log10(p.adjust)", "enrichFactor", "Count")))
    stop("order_by must be one of GeneRatio, -log10(p.adjust), enrichFactor, Count")

  if(!(size_by %in% c("GeneRatio", "-log10(p.adjust)", "enrichFactor", "Count")))
    stop("size_by must be one of GeneRatio, -log10(p.adjust), enrichFactor, Count")

  if(!(color_by %in% c("GeneRatio", "-log10(p.adjust)", "enrichFactor", "Count")))
    stop("color_by must be one of GeneRatio, -log10(p.adjust), enrichFactor, Count")

  if(!is.null(facet_by)) {
    if(!(facet_scales %in% c("free", "free_x", "free_y", "fixed")))
      stop("facet_scales must be one of free, free_x, free_y, fixed")
  }

  # pharse fraction to decimal
  enrichment$GeneRatio <- sapply(enrichment$GeneRatio, function(x) eval(parse(text=x)))

  # group facet
  if(!is.null(facet_by)) {
    data <- group_by(enrichment, !!sym(facet_by)) %>%
      mutate(`-log10(p.adjust)`=-log10(p.adjust)) %>%
      arrange(desc(!!sym(order_by))) %>%
      dplyr::slice(seq_len(show_category)) %>%
      arrange(!!sym(axis_x)) %>%
      mutate(Description=factor(Description, levels=unique(.$Description)))
  } else {
    data <- mutate(enrichment, `-log10(p.adjust)`=-log10(p.adjust)) %>%
      arrange(desc(!!sym(order_by))) %>%
      dplyr::slice(seq_len(show_category)) %>%
      arrange(!!sym(axis_x)) %>%
      mutate(Description=factor(Description, levels=unique(.$Description)))
  }

  if(plot_type=="dot") {
    plot <- ggplot(data, aes(!!sym(axis_x), Description)) +
      geom_segment(aes(yend=Description), xend=0, size=0.7, color="grey50", alpha=0.7) +
      geom_point(aes(size=!!sym(size_by), color=!!sym(color_by))) +
      scale_size_continuous(range=size_range) +
      scale_color_gradient(low=color_range[1], high=color_range[2]) +
      scale_y_discrete(labels=function(x) str_wrap(x, width=text_len_limit)) +
      theme_classic() +
      ylab("")
  } else {
    plot <- ggplot(data, aes(!!sym(axis_x), Description)) +
      geom_bar(aes(fill=!!sym(color_by)), stat="identity", color=NA, width=0.75) +
      scale_size_continuous(range=size_range) +
      scale_fill_gradient(low=color_range[1], high=color_range[2]) +
      scale_y_discrete(labels=function(x) str_wrap(x, width=text_len_limit)) +
      theme_classic() +
      ylab("")
  }

  # facet plot
  if(!is.null(facet_by)) {
    plot <- plot + facet_wrap(vars(!!sym(facet_by)), 
                              scales=facet_scales, ncol=1)
  }

  # return
  return(plot)
}
```

## ORA enrichment

```{r}
enrich_result_ora <- list()
for(i in seq_along(wald_test_sig)) {
  print(str_glue(
    ">>>>>>>> ORA enrichment on: {names(wald_test_sig)[i]}"))
  genes <- wald_test_sig[[i]]
  
  if(length(genes) < 20) next
    
  ora_list <- future_map(
    genesets, 
    \(x) enricher(gene = genes, 
                  pvalueCutoff = 1, qvalueCutoff = 1, 
                  minGSSize = 10, maxGSSize = 500,
                  TERM2GENE = x$term2gene,
                  TERM2NAME = x$term2name),
    .options = furrr_options(seed = T)
  )
  
  # merge different genesets 
  ora_merge <- ora_list[[1]]
  ora_merge@organism <- species
  ora_merge@result <- ora_list %>% 
    map(\(x) slot(x, "result")) %>%
    purrr::reduce(.f = bind_rows)
  ora_merge@geneSets <- ora_list %>% 
    map(\(x) slot(x, "geneSets")) %>%
    purrr::reduce(.f = c)
  
  # split each database
  ora_merge@result <- ora_merge@result %>% 
    mutate(Category = map_chr(
      Description, \(x) str_split(x, "[_]", n=2, simplify=T) %>% .[1]),
      Description = map_chr(
        Description, \(x) str_split(x, "[_]", n=2, simplify=T) %>% .[2]) %>%
        map_chr(\(x) str_replace_all(x, "_", " ")) %>%
        map_chr(str_to_sentence) ) #%>%
    # mutate(Category = factor(Category, levels=unique(.$Category)))
  
  enrich_result_ora[[names(wald_test_sig)[i]]] <- ora_merge
}


# save data
write_xlsx(map(enrich_result_ora, \(x) as_tibble(x@result)), 
           str_glue("{enrichment_dir}/{Sys.Date()}_enrichment_ora.xlsx"))

# save plot
n_col <- length(enrich_result_ora) #if_else( > 1, 2, 1)
map(enrich_result_ora, 
    \(x) plot_enrich_ora(x@result, facet_by="Category")) %>%
  plot_grid(plotlist = ., 
            labels = names(enrich_result_ora), 
            ncol = n_col, 
            axis = "tblr", align = "hv", 
            label_size = 8, scale = 0.9) %>% 
  ggsave2(str_glue("{enrichment_dir}/{Sys.Date()}_enrichment_ora.pdf"),
          .,
          width=n_col*6, 
          height=length(genesets)*4, 
          limitsize = F)

```

## ORA visNetwork
```{r}
pvalue_cutoff <- 1e-3
min_cluster_size <- 3
plist <- list()

for(x in names(enrich_result_ora)) {
  print(str_glue("visNetwork >>> {x}"))
  plist[[x]] <- enrich_result_ora[[x]]@result %>% 
    filter(pvalue < pvalue_cutoff) %>% 
    aPEAR::enrichmentNetwork(
      simMethod = "jaccard", # c('jaccard', 'cosine', 'cor'),
      clustMethod = "markov", # c('markov', 'hier', 'spectral'),
      clustNameMethod = "pagerank", # c('pagerank', 'hits', 'none'),
      minClusterSize = min_cluster_size, # min number of nodes in a single cluster
      colorBy = "pvalue", # pvalue, NES
      colorType = "pval", # use log transform on the colorBy column and adjust color range
      nodeSize = "Count",
      innerCutoff = 0.1, # similarity cutoff for in-cluster nodes
      outerCutoff = 0.5, # similarity cutoff for between-cluster nodes
      pCutoff = -5, # adjust p-value colouring cutoff when using pval
      drawEllipses = F,
      fontSize = 4,
      repelLabels = T,
      plotOnly = T,
      verbose = F)
}

# save plot
plot_grid(plotlist = plist, 
          labels = names(enrich_result_ora), 
          ncol = 1, 
          axis = "tblr", align = "hv", 
          label_size = 8, scale = 0.9) %>% 
  ggsave2(str_glue(
    "{enrichment_dir}/{Sys.Date()}_enrichment_ora_visNetwork.pdf"),
    .,
    width=10, 
    height=length(enrich_result_ora)*10, 
    limitsize = F)
```

## DEG cluster anlysis
```{r}
  # list deg pattern files
deg_cluster_file <- list.files(deseq2_dir, 
                               "_deg_clusters.xlsx", 
                               full.names = TRUE) %>% 
  str_subset("^[^~]")  #remove excel tmp files

if(length(deg_cluster_file) >= 1) {
  deg_cluster_file <- last(deg_cluster_file)
  print("found deg pattern file, run deg pattern cluster ORA enrichment")
  
  # read deg clusters
  deg_clusters <- read_xlsx(deg_cluster_file[1])
  
  cluster_genes <- map(
    unique(deg_clusters$cluster), 
    ~ filter(deg_clusters, cluster == .x) %>% 
      pull(symbol)) %>%
    set_names(str_c("cluster_", unique(deg_clusters$cluster))) 
  
  # filter out low number clusters
  min_genes_per_cluster <- 20
  cluster_genes <- map_lgl(
    cluster_genes, ~ length(.x) >= min_genes_per_cluster) %>% 
    cluster_genes[.]
  
  # enrichment
  deg_clusters_enrich <- list()
  for(i in seq_along(cluster_genes)) {
    print(str_glue(
      ">>>>>>>> deg pattern enrichment on: {names(cluster_genes)[i]}"))
    genes <- cluster_genes[[i]]
    
    enrich_result_list <- future_map(
      genesets, ~ enricher(genes, 
                           pvalueCutoff = 0.5, 
                           qvalueCutoff = 0.9, 
                           minGSSize = 5, 
                           TERM2GENE = x$term2gene,
                           TERM2NAME = x$term2name),
      .options = furrr_options(seed = T))
    
    # merge different genesets 
    enrich_result <- enrich_result_list[[1]]
    enrich_result@organism <- species
    enrich_result@result <- enrich_result_list %>% 
      map(~ slot(.x, "result")) %>%
      purrr::reduce(.f = bind_rows)
    enrich_result@geneSets <- enrich_result_list %>% 
      map(~ slot(.x, "geneSets")) %>%
      purrr::reduce(.f = c)
      # list_flatten(name_spec="{inner}")
    
    # split each database
    enrich_result@result <- enrich_result@result %>%
      mutate(Category = map_chr(
        Description, ~ str_split_fixed(.x, fixed("_"), n=2)[1]),
        Description = map_chr(
          Description, 
          ~ str_split_fixed(.x, fixed("_"), n=2)[2]) %>%
          map_chr(~ str_replace_all(.x, "_", " ")) %>%
          map_chr(~ str_to_sentence(.x)) )# %>%
      # mutate(Category = factor(Category))
    # to list
    deg_clusters_enrich[[names(cluster_genes)[i]]] <- enrich_result
  }
  
  # plot
  deg_clusters_plot <- map(
    deg_clusters_enrich, 
    ~ plot_enrich_ora(.x@result, 
                      facet_by="Category", 
                      order_by="GeneRatio")) %>% 
    plot_grid(plotlist = ., 
              labels = names(deg_clusters_enrich), 
              ncol = 1, 
              axis = "tblr", align = "hv", 
              label_size = 8, scale = 0.9)
  
  # save data
  write_xlsx(
    map(deg_clusters_enrich, ~ .x@result), 
    str_glue(
      "{enrichment_dir}/{Sys.Date()}_enrichment_deg_clusters.xlsx"))
  # save plot
  save_plot(
    str_glue(
      "{enrichment_dir}/{Sys.Date()}_enrichment_deg_clusters.pdf"),
    plot = deg_clusters_plot, 
    base_width = 7, 
    base_height = 1.5*ceiling(length(deg_clusters_plot)*length(genesets)), 
    limitsize = F)
}

```


## GSEA func

```{r plot gsea function}

#' @name plot_enrich_gsea
#' @title plot_enrich_gsea
#' @description dotplot for enrich result from enrich_GSEA
#'
#' @param enrichment data.frame, from GSEA enrichment,
#'        result can be merged from multi enrichment, grouping info can be viewed by facet
#' @param show_category integer, show enriched category number
#' @param plot_type character, one of dot, bar
#' @param filter_by character, filter show_category by which column,
#'        one of -log10(p.adjust), NES, Count
#' @param color_by character, map point color, one of -log10(p.adjust), NES, Count
#' @param color_range two element character vector, mapping color range, from low to high,
#'        for gsea plot, the value of NSE = 0 will be white color
#' @param size_by character, map point size, currently, only Count avaible for gseaResult
#' @param size_range two element numeric vector, mapping point size, from low to high
#'        only works if plot_type is dot
#' @param text_len_limit integer, wrap y-axis text length
#' @param facet_by character, facet plot by which column in enrichment,
#'        default avaible value is direction, user use add aditional column in enrichment
#' @param facet_scales character, facet scales, one of free_y, free_x, "free, fixed,
#'        only works if facet_by is not NULL
#'
#' @import ggplot2
#' @importFrom dplyr arrange mutate slice vars group_by
#' @importFrom stringr str_wrap str_split
#' @importFrom rlang sym !!
#'
#' @return ggplot2 object
#'
#' @export
#
plot_enrich_gsea <- function(enrichment,
                             show_category=10,
                             plot_type="dot",
                             filter_by="-log10(p.adjust)",
                             color_by="-log10(p.adjust)",
                             color_range=c("#377eb8", "#e41a1c"),
                             size_by="Core_Count", # not changable by now
                             size_range=c(2, 6),
                             text_len_limit=40,
                             facet_by=NULL, # direction
                             facet_scales="free"
) {

  if(!(class(enrichment) == "data.frame"))
    stop("enrichment must be a data.frame (result slot from clusterProfiler)")

  if(!(plot_type %in% c("dot", "bar")))
    stop("plot_type must be one of dor, bar")

  if(!(filter_by %in% c("-log10(p.adjust)", "NES", "Count")))
    stop("filter_by must be one of -log10(p.adjust), NES, Count")

  if(!(color_by %in% c("-log10(p.adjust)", "NES", "Count")))
    stop("color_by must be one of -log10(p.adjust), NES, Count")

  if(!is.null(facet_by)) {
    if(!(facet_scales %in% c("free", "free_x", "free_y", "fixed")))
      stop("facet_scales must be one of free, free_x, free_y, fixed")
  }

  # count core enrichment genes
  enrichment$Core_Count <- map_int(enrichment$core_enrichment, ~ length(str_split(.x, fixed("/"), simplify = T)))

  # group facet
  if(!is.null(facet_by)) {
    data <- mutate(enrichment,
                   `-log10(p.adjust)`=-log10(p.adjust),
                   direction=if_else(NES>=0, "Up-regulated", "Down-regulated")) %>%
      group_by(direction, !!sym(facet_by)) %>%
      arrange(desc(abs(!!sym(filter_by)))) %>%
      dplyr::slice(seq_len(show_category)) %>%
      arrange(NES) %>%
      mutate(Description=factor(Description, levels=unique(.$Description)))
  } else {
    data <- mutate(enrichment, `-log10(p.adjust)`=-log10(p.adjust),
                   direction=if_else(NES>=0, "Up-regulated", "Down-regulated")) %>%
      group_by(direction) %>%
      arrange(desc(abs(!!sym(filter_by)))) %>%
      dplyr::slice(seq_len(show_category)) %>%
      arrange(NES) %>%
      mutate(Description=factor(Description, levels=unique(.$Description)))
  }
  
  # glimpse(data)

  if(plot_type=="dot") {
    plot <- ggplot(data, aes(NES, Description)) +
      geom_segment(aes(yend=Description), xend=0, size=0.7, color="grey50", alpha=0.7) +
      geom_point(aes(size=Core_Count, fill=!!sym(color_by)), shape=21, color="transparent") +
      scale_size_continuous(range=size_range) +
      scale_fill_gradient2(low=color_range[1], mid="white", high=color_range[2], midpoint=0) +
      scale_y_discrete(labels=function(x) str_wrap(x, width=text_len_limit)) +
      theme_classic() +
      ylab("")
  } else {
    plot <- ggplot(data, aes(NES, Description)) +
      geom_bar(aes(fill=!!sym(color_by)), stat="identity", color=NA, width=0.75) +
      scale_fill_gradient2(low=color_range[1], mid="white", high=color_range[2], midpoint=0) +
      scale_y_discrete(labels=function(x) str_wrap(x, width=text_len_limit)) +
      theme_classic() +
      ylab("")
  }

  # facet plot
  if(!is.null(facet_by)) {
    plot <- plot + facet_wrap(vars(!!sym(facet_by)), 
                              scales=facet_scales, ncol = 1)
  }

  # return
  return(plot)
}
```


## GSEA enrichment
```{r}
enrich_result_gsea <- list()
for(i in seq_along(genelist_ranked)) {
  print(str_glue(">>>>>>>> GSEA enrichment on: {names(genelist_ranked)[i]}"))
  
  genelist <- genelist_ranked[[i]] %>% na.omit() %>% .[is.finite(.)]
  
  if(length(genelist) < 50) next
  
  gsea_list <- future_map(
    genesets, 
    \(x) GSEA(
      genelist, minGSSize = 10, maxGSSize = 500, pvalueCutoff = 1, 
      TERM2GENE = x$term2gene,
      TERM2NAME = x$term2name, 
      seed=T, verbose=F),
    .options = furrr_options(seed = T)
    )
    
  # merge genesets 
  gsea <- gsea_list[[1]]
  gsea@organism <- species
  gsea@result <- gsea_list %>% 
    map(\(x) slot(x, "result")) %>%
    purrr::reduce(.f = bind_rows)
  gsea@geneSets <- gsea_list %>% 
    map(\(x) slot(x, "geneSets")) %>%
    purrr::reduce(.f = c)
  
  # split each database
  gsea@result <- gsea@result %>%
    mutate(Category = map_chr(
      Description, \(x) str_split(x, "_", n=2, simplify=T) %>% .[1]),
      Description = map_chr(
        Description, \(x) str_split(x, "_", n=2, simplify=T) %>% .[2]) %>%
        map_chr(\(x) str_replace_all(x, "_", " ")) %>%
        map_chr(str_to_sentence) ) #%>%
    # mutate(Category = factor(Category, levels=unique(.$Category)))
  
  # to list
  enrich_result_gsea[[names(genelist_ranked)[i]]] <- gsea
}


# save data
write_xlsx(map(enrich_result_gsea, \(x) as_tibble(x@result)), 
           str_glue("{enrichment_dir}/{Sys.Date()}_enrichment_gsea.xlsx"))

# save plot
n_col <- length(enrich_result_gsea) #if_else( > 1, 2, 1)
map(enrich_result_gsea, 
    \(x) plot_enrich_gsea(x@result, facet_by="Category")) %>%
  plot_grid(plotlist = ., 
            labels = names(enrich_result_gsea), 
            ncol = n_col, 
            axis = "tblr", align = "hv", 
            label_size = 8, scale = 0.9) %>% 
  ggsave2(str_glue("{enrichment_dir}/{Sys.Date()}_enrichment_gsea.pdf"),
          .,
          width=n_col*6, 
          height=length(genesets)*4, 
          limitsize = F)

```

## GESA visNetwork
```{r}
pvalue_cutoff <- 1e-3
min_cluster_size <- 4
plist <- list()

for(x in names(enrich_result_gsea)) {
  print(str_glue("visNetwork >>> {x}"))
  plist[[x]] <- enrich_result_gsea[[x]]@result %>% 
    filter(pvalue < pvalue_cutoff) %>% 
    aPEAR::enrichmentNetwork(
      simMethod = "jaccard", # c('jaccard', 'cosine', 'cor'),
      clustMethod = "markov", # c('markov', 'hier', 'spectral'),
      clustNameMethod = "pagerank", # c('pagerank', 'hits', 'none'),
      minClusterSize = min_cluster_size, # min number of nodes in a single cluster
      colorBy = "NES", # pvalue, NES
      colorType = "nes", # use log transform on the colorBy column and adjust color range
      nodeSize = "setSize",
      innerCutoff = 0.1, # similarity cutoff for in-cluster nodes
      outerCutoff = 0.5, # similarity cutoff for between-cluster nodes
      pCutoff = -5, # adjust p-value colouring cutoff when using pval
      drawEllipses = F,
      fontSize = 4,
      repelLabels = T,
      plotOnly = T,
      verbose = F)
}

# save plot
plot_grid(plotlist = plist, 
          labels = names(enrich_result_gsea), 
          ncol = 1, 
          axis = "tblr", align = "hv", 
          label_size = 8, scale = 0.9) %>% 
  ggsave2(str_glue(
    "{enrichment_dir}/{Sys.Date()}_enrichment_gesa_visNetwork.pdf"),
    .,
    width=10, 
    height=length(enrich_result_gsea)*10, 
    limitsize = F)
```

## GSEA plot
```{r}
if(T) {
  subset <- enrich_result_gsea
  
  genesets_roi <- c(
    # "HALLMARK_ANDROGEN_RESPONSE",
    # "HALLMARK_MYC_TARGETS_V1",
    # "HALLMARK_MYC_TARGETS_V2",
    # "HALLMARK_WNT_BETA_CATENIN_SIGNALING",
    # "HALLMARK_NOTCH_SIGNALING", 
    # "HALLMARK_TGF_BETA_SIGNALING",
    # "HALLMARK_P53_PATHWAY",
    "HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION",
    # "GO:0001837", # Epithelial to mesenchymal transition
    "GO:0010717" # Regulation of epithelial to mesenchymal transition
    # "GO:0010718",	# Positive regulation of epithelial to mesenchymal transition
    # "GO:0010719" # Negative regulation of epithelial to mesenchymal transition
  )
  
  ## merge pathway
  plot <- map(subset, ~ gseaNb(
    .x, geneSetID = genesets_roi, 
    addPval = T, subPlot = 2,
    legend.position = c(0.25,0.1))
  )
  # save plot
  save_plot(file.path(enrichment_dir, str_glue(
    "{Sys.Date()}_gseaplot_mergePathway.pdf")),
    plot_grid(plotlist = plot, ncol = 1, label_size = 6, scale = 0.9), 
    base_height = 5*length(subset), 
    base_width = 7, 
    limitsize = F)
  
  
  ## merge sample
  # set sample color
  if(length(subset) > 8) {
    sample_color <- colorRampPalette(brewer.pal(8, "Dark2"))(length(subset))
  } else {
    sample_color <- brewer.pal(8, "Dark2")[1:length(subset)]
  }
  # plot
  plot <- map(genesets_roi, ~ GSEAmultiGP(
    gsea_list = subset,
    geneSetID = .x,
    exp_name = names(subset),
    addPval = T,
    curve.col = sample_color))
  # save plot
  save_plot(file.path(enrichment_dir, str_glue(
    "{Sys.Date()}_gseaplot_mergeSample.pdf")),
    plot_grid(plotlist = plot, ncol = 1, label_size = 6, scale = 0.9), 
    base_height = 5*length(genesets_roi), 
    base_width = 7, 
    limitsize = F)
}

```


## GESA compare
```{r}
if(F) {
  subsets <- enrich_result_gsea
  
  items <- c("HALLMARK_MYC_TARGETS_V1",
             "KEGG_MAPK_SIGNALING_PATHWAY",
             "BIOCARTA_MAPK_PATHWAY",
             "BIOCARTA_P38MAPK_PATHWAY",
             "WP_MAPK_SIGNALING_PATHWAY",
             "WP_P38_MAPK_SIGNALING_PATHWAY",
             "REACTOME_MAPK3_ERK1_ACTIVATION",
             "REACTOME_ERK_MAPK_TARGETS",
             "REACTOME_MAPK_TARGETS_NUCLEAR_EVENTS_MEDIATED_BY_MAP_KINASES",
             "REACTOME_ONCOGENIC_MAPK_SIGNALING")
  
  for(item in items) {
    print(item)
    # remove samples which don't have item
    subset <- list()
    for(s in names(subsets)) {
      if(item %in% subsets[[s]]@result$ID) subset[[s]] <- subsets[[s]]
    } 
    
    # plot
    p <- GSEAmultiGP(gsea_list = subset,
                     geneSetID = item,
                     exp_name = names(subsets),
                     addPval = F,
                     base_size = 8,
                     nesDigit = 1,
                     subplot.heights = c(0.5, 0.3, 0.04)
    )
    
    save_plot(str_glue(
      "{enrichment_dir}/{Sys.Date()}_compare_GSEA_{item}.pdf"),
      plot = ggrastr::rasterize(p, dpi=600), 
      base_width = 7, 
      base_height = 5, 
      limitsize = F)
  }
}

```

 
```{r, eval=F}
if(F) {
  ## barplot
get_item <- function(x) slot(x, "result") %>%
                     mutate(direction = sign(NES)) %>%
                     filter(pvalue <= 0.05,
                            Category %in% c("HALLMARK"),
                            Description %in% c("Yap targets",
                                               "Myc targets v1",
                                               "E2f targets",
                                               "Inflammatory response",
                                               "Tgf beta signaling",
                                               "P53 pathway")
                     ) %>%
                     group_by(Category, direction) %>%
                     arrange(pvalue, desc(abs(NES))) %>%
                     # slice_head(n=10) %>%
                     pull(ID)

subsets <- enrich_result_gsea
items <- map(subsets, get_item) %>% 
  purrr::reduce(c) %>% unique()


data <- subsets %>% 
  map_dfr(~ slot(.x, "result"), .id = "Group") %>%
  filter(ID %in% items) %>%
  mutate(`-log10(pvalue)`=-log10(pvalue), 
         Direction=if_else(NES>=0, "Up-regulated", "Down-regulated")
         ) %>%
  group_by(Category, Direction) %>%
  arrange(pvalue, desc(abs(NES))) %>%
  # slice_head(n=20) %>%
  mutate(Description=factor(Description, 
                            levels = rev(unique(Description)))) %>% 
  ungroup()

# data <- map(subsets, ~ slot(.x, "result") %>% as_tibble) %>%
#   bind_rows(.id = "Group") %>%
#   filter(ID %in% items) %>%
#   mutate(Direction = if_else(NES>=0, "Up-regulated", "Down-regulated"),
#          `-log10(pvalue)` = -log10(pvalue)
#          ) %>%
#   group_by(Category, Direction) %>%
#   arrange(pvalue, desc(abs(NES))) %>%
#   # slice_head(n=20) %>%
#   mutate(Description=factor(Description, 
#                             levels = rev(unique(Description))))
  
compare_gsea_bar <- function(data, name) {
  ggplot(data, aes(`-log10(pvalue)`, Description)) +
    geom_col(aes(fill=Group), #alpha=`-log10(pvalue)`),
             width=0.7, position = position_dodge2(0.9, preserve="single")) +
    # scale_alpha_continuous(range = c(0.5, 1)) +
    # scale_fill_manual(values = c("#2ca25f","#99d8c9","#2b8cbe","#a6bddb","#e34a33","#fdbb84")) +
    # scale_fill_discrete(limits = rev) +
    geom_vline(xintercept = 2, linetype = 2, color = "grey50") +
    facet_wrap(~ Direction, scales = "free_y") +
    scale_y_discrete(labels=function(x) str_wrap(x, width=40)) +
    theme_bw(16) +
    # theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(y="", title=name)
}
 
p <- data %>%
  group_by(Category) %>%
  nest() %>%
  mutate(plot = map2(data, Category, ~ compare_gsea_bar(.x, .y))) %>%
  pull(plot) %>%
  plot_grid(plotlist = ., ncol = 1, align = "v", scale = 0.9)

save_plot(str_glue("{enrichment_dir}/{Sys.Date()}_compare_GSEA.pdf"),
          plot = p, 
          base_width = 24, 
          base_height = length(unique(data$Group)) * 
            length(unique(data$Category)) * 2, 
          limitsize = F)


compare_gsea_gseplot <- function(data, name) {
  ggplot(data, aes(`-log10(pvalue)`, Description)) +
    geom_col(aes(fill=Group), #alpha=`-log10(pvalue)`),
             width=0.7, position = position_dodge2(0.9, preserve="single")) +
    # scale_alpha_continuous(range = c(0.5, 1)) +
    # scale_fill_manual(values = c("#2ca25f","#99d8c9","#2b8cbe","#a6bddb","#e34a33","#fdbb84")) +
    # scale_fill_discrete(limits = rev) +
    geom_vline(xintercept = 2, linetype = 2, color = "grey50") +
    facet_wrap(~ Direction, scales = "free_y") +
    scale_y_discrete(labels=function(x) str_wrap(x, width=40)) +
    theme_bw(16) +
    # theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(y="", title=name)
}

p <- data %>%
  group_by(Category) %>%
  nest() %>%
  mutate(plot = map2(data, Category, ~ compare_gsea_gseplot(.x, .y))) %>%
  pull(plot) %>%
  plot_grid(plotlist = ., ncol = 1, align = "v", scale = 0.9)

save_plot(str_glue("{enrichment_dir}/{Sys.Date()}_compare_GSEA.pdf"),
          plot = p, 
          base_width = 24, 
          base_height = length(unique(data$Group)) * 
            length(unique(data$Category)) * 2, 
          limitsize = F)
}

```


## KEGG pathview

```{r}
# save multiple comparison KEGG pathview
if(!dir.exists(file.path(enrichment_dir, "KEGG_pathview"))) dir.create(file.path(enrichment_dir, "KEGG_pathview"))

# setwd (only works in this chunk)
setwd(file.path(enrichment_dir, "KEGG_pathview"))

# construct cross-sample all degs logFC matrix
wald_test_sig_all <- wald_test_sig %>% 
  unlist() %>% unique()
degs_fc_matrix <- map(wald_test, \(x) column_to_rownames(x, "symbol") %>%
                        .[wald_test_sig_all, ] %>%
                        pull(log2FoldChange)) %>%
  bind_cols() %>%
  mutate(gene_name = wald_test_sig_all) %>%
  column_to_rownames("gene_name")

print("pathview multi sample ordered as:")
print(str_c(seq_along(colnames(degs_fc_matrix)), 
            colnames(degs_fc_matrix), sep = ": "), sep = "\n")

# show top N KEGG pathways in each comparison
top_kegg <- map(enrich_result_gsea, 
                \(x) dplyr::filter(x@result, Category=="KEGG") %>% 
                  dplyr::slice_min(pvalue, n = 10) %>% 
                  pull(ID)) %>%
  unlist() %>% unique()

kegg_species <- if_else(species == "hs", "hsa", "mmu")
org_db <- if_else(species == "hs", "org.Hs.eg.db", "org.Mm.eg.db")

# # png
# pathview(gene.data = degs_fc_matrix, 
#          gene.idtype = "SYMBOL", 
#          pathway.id = top_kegg,
#          kegg.dir = ".", 
#          species = kegg_species, 
#          gene.annotpkg = org_db,
#          kegg.native = TRUE, res = 900,
#          limit = list(gene = quantile(as.matrix(degs_fc_matrix), 
#                                       probs = c(0.02, 0.98))),
#          low = list(gene = "#377eb8"), 
#          mid = list(gene = "white"), 
#          high = list(gene = "#e41a1c"))

# pdf
pathview(gene.data = degs_fc_matrix, 
         gene.idtype = "SYMBOL", 
         pathway.id = top_kegg,
         kegg.dir = ".", 
         species = kegg_species, 
         gene.annotpkg = org_db,
         kegg.native = FALSE,
         limit = list(gene = quantile(as.matrix(degs_fc_matrix), 
                                      probs = c(0.02, 0.98))),
         low = list(gene = "#377eb8"), 
         mid = list(gene = "white"), 
         high = list(gene = "#e41a1c"))

```



# Save data
```{r}
if(save_Rdata) {
  getwd()
  save.image(str_glue("{Sys.Date()}_enrichment.RData"))
}

# load data
# list.files(pattern = "^RNAseq_Enrichment_.*RData$")
# load(list.files(pattern = "^RNAseq_Enrichment_.*RData$")[1])
# load("RNAseq_Enrichment_2021-01-28.RData")
```






