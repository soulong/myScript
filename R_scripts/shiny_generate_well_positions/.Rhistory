# Chunk 18
# obj <- "cell"
#
# axis_var <- "Metadata_well"
# fill_var <- "Metadata_lib"
# fact_var <- "Metadata_prefix"
if(any(str_detect("Granularity_",
colnames(eval(parse(text=obj)))))) {
# granularity per field
granularity_data <- eval(parse(text=obj)) %>%
pivot_longer(
matches("Granularity_.*"),
names_to = c("granularity_order", "channel"),
names_pattern = "Granularity_(.+)_(.+)$",
# names_prefix = "Intensity_MeanIntensity_",
values_to = "granularity_value") %>%
filter(granularity_order %in% 2:5) %>%
mutate(granularity_order=str_c("Granularity_", granularity_order)) %>%
reframe(mean=mean(granularity_value, na.rm=T),
sd=sd(granularity_value, na.rm=T),
se=sd/sqrt(n()),
.by=c(all_of(c(plate_var, axis_var, color_var,
"granularity_order", "channel"))))
# point range plot
granularity_data %>%
ggplot(aes(!!as.name(axis_var),
mean,
color = !!as.name(color_var))) +
geom_pointrange(aes(ymin=mean-se, ymax=mean+se),
size=0.25, show.legend = show_legend) +
{if(!is.na(fact_var)) {
ggh4x::facet_grid2(cols=vars(granularity_order),
rows=vars(!!as.name(fact_var)),
scales="fixed",
# independent="y",
axes = "all")
} else {
ggh4x::facet_grid2(cols=vars(granularity_order),
# rows=vars(!!as.name(fact_var)),
scales="fixed",
# independent="y",
axes = "all")
} }+
labs(x="", y="Mean Granularity per Field") +
theme_bw(8) +
theme(strip.background = element_rect(fill=NA),
strip.text = element_text(size=6),
axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
panel.grid = element_blank(),
legend.position = "top")
ggsave2(str_glue("{Sys.Date()}_{obj}_granularity.pdf"),
# width=(colnames(granularity_data) %>%
#          str_subset("Granularity_") %>%
#          length())*3,
# height=length(unique(cellRegion[[fact_var]]))*1.5,
width=length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
length(unique(granularity_data[[granularity_order]])),
height=ifelse(
is.na(fact_var),
2.5,
2.5*length(unique(granularity_data[[fact_var]]))),
limitsize = F)
}
# Chunk 19
# summarized to well
cell_per_well <- eval(parse(text=obj)) %>%
reframe(across(
c(matches("^AreaShape_(EquivalentDiameter)|(Eccentricity)|(Solidity)"),
matches("^Intensity_MeanIntensity.*"),
matches("^Granularity_.*"),
matches(".*_ratio_.*")),
list(mean=mean, sd=sd)),
count=n(),
.by = setdiff(
starts_with("Metadata_"),
matches("(Metadata_field)|(Metadata_position_name)|(Metadata_position)|(Metadata_stack)|(Metadata_timepoint)"))
) %>%
mutate(across(!starts_with("Metadata_"), ~ round(.x, 3)))
glimpse(cell_per_well)
# Chunk 20
writexl::write_xlsx(
list(#cell=cell,
cell_per_well=cell_per_well),
str_glue("{Sys.Date()}_cell.xlsx"))
# Chunk 21
per_plate_id <- "Metadata_prefix"
## ratio for measurements
# subset DMSO
cell_dmso <- cell %>%
filter(Metadata_Name == "DMSO") %>%
# per well mean
reframe(across(
c(matches("^AreaShape_(EquivalentDiameter)|(Eccentricity)|(Solidity)"),
matches("^Intensity_MeanIntensity.*"),
matches("^Granularity_.*"),
matches(".*_ratio_.*")),
~ mean(.x, na.rm=T, trim=0.25)),
count=n(),
.by = all_of(c(group_vars, "Metadata_well"))) %>%
# per plate mean
reframe(across(
c(matches("^AreaShape_(EquivalentDiameter)|(Eccentricity)|(Solidity)"),
matches("^Intensity_MeanIntensity.*"),
matches("^Granularity_.*"),
matches(".*_ratio_.*")),
~ mean(.x, na.rm=T, trim=0.25)),
.by = all_of(per_plate_id)) %>%
rename_with(~ str_c(.x, "_DMSO"),
!starts_with("Metadata_"))
# items for ratio
ratio_2_dmso_items <- colnames(cell_dmso) %>%
str_subset(".*_DMSO") %>%
str_replace_all("_DMSO", "") %>%
str_subset("count", negate = T)
# get ratio for each item
cell_ratio <- select(cell,
all_of(c(group_vars, per_plate_id, "Metadata_well")),
all_of(ratio_2_dmso_items)) %>%
left_join(cell_dmso)
for(ratio_item in ratio_2_dmso_items) {
cell_ratio[[str_glue("{ratio_item}_ratio_DMSO")]] <-
# add 1e-5 to minimize cal error
log2(cell_ratio[[str_glue("{ratio_item}")]] /
cell_ratio[[str_glue("{ratio_item}_DMSO")]] + 1e-5)
}
cell_ratio <- cell_ratio %>%
select(starts_with("Metadata_"), ends_with("_ratio_DMSO"))
# summary to per well
cell_ratio_per_well <- cell_ratio %>%
reframe(across(!starts_with("Metadata"),
list(mean= ~ mean(.x, na.rm=T, trim = 0.05),
sd= ~ sd(.x, na.rm=T))),
.by = all_of(c(group_vars, "Metadata_well")))
## count per field ratio to DMSO
# count per well of DMSO
count_per_field_per_well_dmso <- count_per_field_per_well %>%
filter(Metadata_Name == "DMSO") %>%
reframe(count_DMSO=mean(count_per_field_mean, na.rm = T, trim=0.05),
.by = per_plate_id)
# count per well of cmpds
count_per_field_per_well_ratio <- cell %>%
reframe(count_per_field = n(),
.by = all_of(
c(group_vars, "Metadata_well", "Metadata_field"))) %>%
left_join(count_per_field_per_well_dmso) %>%
mutate(count_ratio_DMSO=log2(count_per_field/count_DMSO)) %>%
reframe(across(count_ratio_DMSO,
list(mean=mean, sd=sd)),
n_field=n(),
.by=all_of(c(group_vars, "Metadata_well")))
## merge measurements with cell count
cell_ratio_per_well <- cell_ratio_per_well %>%
left_join(count_per_field_per_well_ratio)
glimpse(cell_ratio)
glimpse(cell_ratio_per_well)
# Chunk 22
obj <- "cell_ratio"
group_vars <- c("Metadata_prefix", "Metadata_ID", "Metadata_Name")
axis_var <- "Metadata_well"
fill_var <- "Metadata_well"
fact_var <- "Metadata_prefix" # NA mean no additional facet beside channel
show_legend <- F
# Chunk 23
p <- cell_ratio_per_well %>%
mutate(count_ratio_DMSO_se=count_ratio_DMSO_sd/sqrt(n_field)) %>%
ggplot(aes(!!as.name(axis_var),
count_ratio_DMSO_mean,
color = !!as.name(fill_var))) +
geom_pointrange(aes(
ymin=count_ratio_DMSO_mean - count_ratio_DMSO_se,
ymax=count_ratio_DMSO_mean + count_ratio_DMSO_se),
size=0.25, show.legend = show_legend) +
{ if(!is.na(fact_var)) {
ggh4x::facet_grid2(
# rows=vars(Metadata_vector, Metadata_conc),
rows=vars(!!as.name(fact_var)),
scales = "fixed",
axes  = "all") } } +
labs(y="Mean Count per Field", x="") +
# coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
theme_bw(8) +
theme(strip.background = element_rect(fill=NA),
strip.text = element_text(size=6),
axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
panel.grid = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_count_per_field.pdf"),
p,
width=length(unique(cell_ratio_per_well[[axis_var]]))*0.06,
height=ifelse(
is.na(fact_var),
2,
2*length(unique(cell_ratio_per_well[[fact_var]]))),
limitsize = F)
# Chunk 24
# obj <- "cell_ratio"
#
# axis_var <- "Metadata_vector"
# fill_var <- "Metadata_vector"
# fact_var <- "Metadata_prefix" # NA mean no additional facet beside channel
#
# show_legend <- F
diameter_per_well <- eval(parse(text=obj)) %>%
reframe(across(AreaShape_EquivalentDiameter_ratio_DMSO,
list(mean=mean, sd=sd)),
n=n(),
AreaShape_EquivalentDiameter_ratio_DMSO_se=
AreaShape_EquivalentDiameter_ratio_DMSO_sd/sqrt(n),
.by = all_of(c(group_vars, "Metadata_well")))
# glimpse(diameter_per_well)
# plot
p <- diameter_per_well %>%
ggplot(aes(!!as.name(axis_var),
AreaShape_EquivalentDiameter_ratio_DMSO_mean,
# group = !!as.name(fill_var),
color = !!as.name(fill_var))) +
geom_pointrange(aes(
ymin=AreaShape_EquivalentDiameter_ratio_DMSO_mean -
AreaShape_EquivalentDiameter_ratio_DMSO_se,
ymax=AreaShape_EquivalentDiameter_ratio_DMSO_mean +
AreaShape_EquivalentDiameter_ratio_DMSO_se),
size=0.25, show.legend = show_legend) +
{ if(!is.na(fact_var)) {
ggh4x::facet_grid2(
# rows=vars(Metadata_vector, Metadata_conc),
rows=vars(!!as.name(fact_var)),
axes  = "all") } } +
labs(y="Diameter [uM]", x="") +
# coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
theme_bw(8) +
theme(strip.background = element_rect(fill=NA),
strip.text = element_text(size=6),
axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
panel.grid = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_diameter.pdf"),
p,
width=length(unique(diameter_per_well[[axis_var]]))*0.06,
height=ifelse(
is.na(fact_var),
2,
2*length(unique(diameter_per_well[[fact_var]]))),
limitsize = F)
# Chunk 25
# obj <- "cell_ratio"
#
# axis_var <- "Metadata_vector"
# fill_var <- "Metadata_vector"
# fact_var <- "Metadata_prefix" # NA mean no additional facet beside channel
#
# show_legend <- F
eccentricity_per_well <- eval(parse(text=obj)) %>%
reframe(across(AreaShape_Eccentricity_ratio_DMSO,
list(mean=mean, sd=sd)),
n=n(),
AreaShape_Eccentricity_ratio_DMSO_se=
AreaShape_Eccentricity_ratio_DMSO_sd/sqrt(n),
.by = all_of(c(group_vars, "Metadata_well")))
# glimpse(eccentricity_per_well)
# plot
p <- eccentricity_per_well %>%
ggplot(aes(!!as.name(axis_var),
AreaShape_Eccentricity_ratio_DMSO_mean,
# group = !!as.name(fill_var),
color = !!as.name(fill_var))) +
geom_pointrange(aes(
ymin=AreaShape_Eccentricity_ratio_DMSO_mean -
AreaShape_Eccentricity_ratio_DMSO_se,
ymax=AreaShape_Eccentricity_ratio_DMSO_mean +
AreaShape_Eccentricity_ratio_DMSO_se),
size=0.25, show.legend = show_legend) +
{ if(!is.na(fact_var)) {
ggh4x::facet_grid2(
# rows=vars(Metadata_vector, Metadata_conc),
rows=vars(!!as.name(fact_var)),
axes  = "all") } } +
labs(y="Eccentricity", x="") +
# coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
theme_bw(8) +
theme(strip.background = element_rect(fill=NA),
strip.text = element_text(size=6),
axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
panel.grid = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_eccentricity.pdf"),
p,
width=length(unique(eccentricity_per_well[[axis_var]]))*0.06,
height=ifelse(
is.na(fact_var),
2,
2*length(unique(eccentricity_per_well[[fact_var]]))),
limitsize = F)
# Chunk 26
# obj <- "cell_ratio"
#
# axis_var <- "Metadata_vector"
# fill_var <- "Metadata_vector"
# fact_var <- "Metadata_prefix"
#
# show_legend <- F
channels <- eval(parse(text=obj)) %>%
colnames() %>%
str_subset(str_glue("^Intensity_MeanIntensity_.*")) %>%
str_replace_all("Intensity_MeanIntensity_", "")
intensity_data <- eval(parse(text=obj)) %>%
pivot_longer(
any_of(as.character(str_glue(
"Intensity_MeanIntensity_{channels}"))),
names_to = "channel",
names_prefix = str_glue("Intensity_MeanIntensity_"),
values_to = "Intensity")
intensity_data_per_well <- intensity_data %>%
reframe(across(Intensity, list(mean=mean, sd=sd)),
n=n(),
Intensity_se=Intensity_sd/sqrt(n),
.by = all_of(c(group_vars, "Metadata_well", "channel")))
# glimpse(intensity_data_per_well)
# plot
p <- intensity_data_per_well %>%
ggplot(aes(!!as.name(axis_var),
Intensity_mean,
color = !!as.name(fill_var))) +
geom_pointrange(aes(
ymin=Intensity_mean - Intensity_se,
ymax=Intensity_mean + Intensity_se),
size=0.25, show.legend = show_legend) +
# scale_y_continuous(trans = scales::transform_pseudo_log()) +
{if(!is.na(fact_var)) {
ggh4x::facet_grid2(
rows=vars(!!as.name(fact_var)),
cols=vars(channel),
axes  = "all")
} else {
ggh4x::facet_grid2(
# rows=vars(!!as.name(fact_var)),
cols=vars(channel),
axes  = "all")
}} +
labs(y="Intensity", x="") +
# coord_cartesian(ylim = c(0, 5)) +
theme_bw(8) +
theme(strip.background = element_rect(fill=NA),
strip.text = element_text(size=6),
axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
panel.grid = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_intensity.pdf"),
p,
width=length(unique(intensity_data_per_well[[axis_var]]))*0.06*
length(unique(intensity_data_per_well[["channel"]])),
height=ifelse(
is.na(fact_var),
2,
2*length(unique(intensity_data_per_well[[fact_var]]))),
limitsize = F)
# Chunk 27
Intensity_ratio_data <- eval(parse(text=obj)) %>%
pivot_longer(
c(Intensity_ratio_ch12_ratio_DMSO),
names_to = "channel",
names_prefix = "Intensity_ratio_",
values_to = "Intensity_ratio")
Intensity_ratio_data_per_well <- Intensity_ratio_data %>%
reframe(across(Intensity_ratio, list(mean=mean, sd=sd)),
n=n(),
Intensity_ratio_se=Intensity_ratio_sd/sqrt(n),
.by = all_of(c(group_vars, "Metadata_well", "channel")))
# glimpse(Intensity_ratio_data_per_well)
# plot
p <- Intensity_ratio_data_per_well %>%
ggplot(aes(!!as.name(axis_var),
Intensity_ratio_mean,
color = !!as.name(fill_var))) +
geom_pointrange(aes(
ymin=Intensity_ratio_mean - Intensity_ratio_se,
ymax=Intensity_ratio_mean + Intensity_ratio_se),
size=0.25, show.legend = show_legend) +
scale_y_continuous(trans = scales::transform_pseudo_log()) +
{if(!is.na(fact_var)) {
ggh4x::facet_grid2(
rows=vars(!!as.name(fact_var)),
cols=vars(channel),
# scales = "free", independent = "x",
axes  = "all")
} else {
ggh4x::facet_grid2(
# rows=vars(!!as.name(fact_var)),
cols=vars(channel),
axes  = "all")
}} +
labs(y="Intensity Ratio", x="") +
# coord_cartesian(ylim = c(0, 3)) +
theme_bw(8) +
theme(strip.background = element_rect(fill=NA),
strip.text = element_text(size=6),
axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
panel.grid = element_blank(),
legend.position = "top",
legend.title = element_blank(),
legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_intensity_ratio.pdf"),
p,
width=length(unique(Intensity_ratio_data_per_well[[axis_var]]))*0.06*
length(unique(Intensity_ratio_data_per_well[["channel"]])),
height=ifelse(
is.na(fact_var),
2,
2*length(unique(Intensity_ratio_data_per_well[[fact_var]]))),
limitsize = F)
# Chunk 28
# obj <- "cell_ratio"
#
# axis_var <- "Metadata_well"
# fill_var <- "Metadata_lib"
# fact_var <- "Metadata_prefix"
if(any(str_detect("Granularity_",
colnames(eval(parse(text=obj)))))) {
# granularity per field
granularity_data <- eval(parse(text=obj)) %>%
pivot_longer(
matches("Granularity_.*"),
names_to = c("granularity_order", "channel"),
names_pattern = "Granularity_(.+)_(.+)$",
# names_prefix = "Intensity_MeanIntensity_",
values_to = "granularity_value") %>%
filter(granularity_order %in% 2:5) %>%
mutate(granularity_order=str_c("Granularity_", granularity_order)) %>%
reframe(mean=mean(granularity_value, na.rm=T),
sd=sd(granularity_value, na.rm=T),
se=sd/sqrt(n()),
.by=c(all_of(c(plate_var, axis_var, color_var,
"granularity_order", "channel"))))
# point range plot
granularity_data %>%
ggplot(aes(!!as.name(axis_var),
mean,
color = !!as.name(color_var))) +
geom_pointrange(aes(ymin=mean-se, ymax=mean+se),
size=0.25, show.legend = show_legend) +
{if(!is.na(fact_var)) {
ggh4x::facet_grid2(cols=vars(granularity_order),
rows=vars(!!as.name(fact_var)),
scales="fixed",
# independent="y",
axes = "all")
} else {
ggh4x::facet_grid2(cols=vars(granularity_order),
# rows=vars(!!as.name(fact_var)),
scales="fixed",
# independent="y",
axes = "all")
} }+
labs(x="", y="Mean Granularity per Field") +
theme_bw(8) +
theme(strip.background = element_rect(fill=NA),
strip.text = element_text(size=6),
axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
panel.grid = element_blank(),
legend.position = "top")
ggsave2(str_glue("{Sys.Date()}_{obj}_granularity.pdf"),
# width=(colnames(granularity_data) %>%
#          str_subset("Granularity_") %>%
#          length())*3,
# height=length(unique(cellRegion[[fact_var]]))*1.5,
width=length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
length(unique(granularity_data[[granularity_order]])),
height=ifelse(
is.na(fact_var),
2.5,
2.5*length(unique(granularity_data[[fact_var]]))),
limitsize = F)
}
# Chunk 29
writexl::write_xlsx(
list(#cell_ratio=cell_ratio,
cell_ratio_per_well=cell_ratio_per_well),
str_glue("{Sys.Date()}_cell_ratio.xlsx"))
library(shiny); source('D:/Script/generate_well_positions_for_nikon_microscopy/shinyApp.R')
library(shiny); runApp('shinyApp.R')
# set path
if(interactive()) {
rstudioapi::getActiveDocumentContext()$path |>
dirname() |>
setwd()
}
# load packages
library(tidyverse)
library(shiny)
library(DT)
# load config
source("config.R")
# load funtions
source("functions.R")
source("server.R")
source("ui.R")
app = shinyApp(ui, server, options = list(host='0.0.0.0', port=5556))
app
runApp('shinyApp.R')
shiny::runApp()
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
