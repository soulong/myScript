---
title: "cellprofiler analysis"
format: html
editor_options: 
  chunk_output_type: console
---

#---------------------------------
# prepare data

## load packages
```{r}
rstudioapi::getActiveDocumentContext()$path |>
  dirname() |>
  setwd()
# setwd("/media/hao/Data/2024-05-01_RTKs_active_mutations")

# load packages
library(tidyverse)
library(writexl)
library(patchwork)

# load helper function
c("read_sqlite.R", 
  "read_plate_info.R", 
  "cp_analysis_func.R", 
  "ggplot_helper.R",
  "fit_ic50.R") %>% 
  file.path("/home/hao/Documents/GitHub/myScript/R_functions", .) %>% 
  walk(source)
```

## read cellprofiler db
```{r}
raw <- read_sqlite(
  "cp_result.db", 
  remove_object_prefix=T,
  subset_areashape_category=c("AreaShape_Area","_EquivalentDiameter","_Eccentricity"), 
  subset_intenstiy_category=c("IntegratedIntensity_", "MeanIntensity_"),
  # merge classify table (within db), generated from cellprofiler-analyst
  classify_table=NULL,
  # model, generated from fitted tidymodel workfolw
  model_workflow=NULL,
  # use tablename data as input data to model_workflow
  model_tablename="cell")
```

## define magnification
```{r}
metadata_file <- "metadata.txt"

if(file.exists(metadata_file)) {
  print("extact length per pixel from metadata file")
  length_per_pixel <- read_lines(metadata_file) %>% 
    str_subset("Axis X Resolution per Pixel") %>% 
    dplyr::first() %>% str_squish() %>% 
    str_replace_all("Axis X Resolution per Pixel: ","") %>% 
    as.numeric() %>% round(4)
} else {
  magification <- "20x"
  image_width <- 1024
  objective_view <- c("100x"=133, "60x"=221, "20x"=655)
  length_per_pixel <- objective_view[magification] * (1/image_width) %>% round(4)
  # length_per_pixel <- NULL
}
# unit: um
print(str_glue("per pixel length: {length_per_pixel} uM"))
```

## channel names
```{r}
if(file.exists(metadata_file)) {
  # match the first wave length (excitation laser)
  map_names <- c("BFP"="405", "GFP"="488", "RFP"="561", "IFP"="640", 
                 "BFP"="DAPI", "GFP"="GFP", "RFP"="Cy3", "RFP"="RFP", "IFP"="Cy5")
  channel_names_list <- get_channel_names_from_txt(metadata_file, map_names)
  # use first one, optimzie this block later
  channel_names <- channel_names_list[[1]]
  print(channel_names)
} else {
  # manully define channel names
  channel_names=c("IFP"="ch1","GFP"="ch2")
}

# channel_names=NULL
if(!is.null(channel_names)) {
  for(idx in seq_along(channel_names)) {
    # rename for raw$image
    raw$image <- raw$image %>% 
      rename_with(\(x) str_replace(
        x, channel_names[idx], names(channel_names)[idx]),
        !starts_with("Metadata"))
    
    # rename for raw$object
    for(obj in names(raw$objects)) {
      raw$objects[[obj]] <- raw$objects[[obj]] %>% 
        rename_with(\(x) str_replace(
          x, channel_names[idx], names(channel_names)[idx]))
    }
    
    # rename for raw$object variable names
    names(raw$objects) <- str_replace(
      names(raw$objects), channel_names[idx], names(channel_names)[idx])
  }
}
```

## metadata plate info
```{r}
plate_info_f <- c("plate_info.xlsx")

if(file.exists(plate_info_f[1])) {
  plate_info <- plate_info_f %>%
    map_dfr(read_plate_info_1) %>%
    # mutate(Metadata_conc=factor(as.numeric(Metadata_conc)))
    # rename(Metadata_vector=value) %>% 
    # separate_wider_delim(value, delim="-",
    #                      names=c("Metadata_vector", "Metadata_rep"),
    #                      too_few="align_start",
    #                      cols_remove=T) %>%
    # separate_wider_delim(value, delim=regex("[+ ]"),
    #                      names=c("Metadata_vector", "Metadata_type", "Metadata_adaptor"),
    #                      too_few="align_start",
    #                      cols_remove=T) %>%
    # mutate(Metadata_vector=factor(Metadata_vector, c("Gal4DBD","APP","NOTCH1"))) %>%
    # rename(Metadata_prefix=Metadata_sheet) %>% 
    # mutate(Metadata_conc=as.numeric(Metadata_conc))
    glimpse()
}
```

## metadata compound
```{r}
# cmpd_lib_name <- c("kinase_inhibitor")
cmpd_lib_name <- NULL

if(!is.null(cmpd_lib_name)) {
  cmpd_lib <- 
    "/media/hao/Data1/compound_screen/cmpd_library/shulab_cmpd_library_merged.csv" %>% 
    read_csv() %>% #pull(library) %>% unique()
    filter(library %in% cmpd_lib_name) %>% 
    select(plate, well, id, name) %>% 
    rename_with(\(x) str_c("Metadata_",x), everything()) %>% 
    glimpse()
  # add plate prefix for imaging data pre-processing
  print(unique(raw$image$Metadata_prefix))
  plate_match <- tibble(
    Metadata_plate=unique(cmpd_lib$Metadata_plate),
    Metadata_prefix=c(1:13) %>% as.character()
      # str_c("ZQ375_plate00", str_pad(1:13, 2, "left", pad="0")), 
    )
  # print(plate_match)
  cmpd_lib <- right_join(plate_match, cmpd_lib, relationship="many-to-many")
  
  # ## add ctrl wells ----------------------------
  # ctrl_wells <- tibble(
  #   Metadata_well=c(str_c(LETTERS[2:15], 2)),
  #   Metadata_id=rep("DMSO", 14),
  #   Metadata_name=rep("DMSO", 14) ) %>% 
  #   expand_grid(
  #     distinct(cmpd_lib[, c("Metadata_plate","Metadata_prefix")]), 
  #     .)
  # print(distinct(ctrl_wells, Metadata_well, .keep_all=T))
  # 
  # cmpd_lib <- bind_rows(cmpd_lib, ctrl_wells)
  
  glimpse(cmpd_lib)
}
```

## metadata position
```{r}
if(!exists("plate_info") & !exists("cmpd_lib")) {
  position_meta <- read_csv("position.csv") %>%
    # some rows were skipped cause incorrect focus
    filter(!is.na(`P Index`)) %>%
    filter(`P Index` != "P Index") %>%
    mutate(`P Index`=as.integer(`P Index`)) %>%
    select(Metadata_prefix=prefix,
           Metadata_position=`P Index`,
           Metadata_position_name=`Position Name`)

  if(is.na(position_meta$Metadata_position_name[1])) {
    # you should edit position data here if no position name
    print("no position name found, should edit it here")
    n_per_well <- 15
    position_meta <- position_meta %>%
      left_join(tibble(
        Metadata_position=seq_len(n_per_well*100),
        Metadata_group=rep(seq_len(100), each=n_per_well) %>% str_c("g",.))
        ) %>% 
      # mutate(Metadata_group=case_when(
      #   Metadata_prefix == "293t-60x-g3bp1-g3bp" ~ "Ctrl",
      #   Metadata_prefix == "293t-60x-g3bp1-g3bp1+s-30min" ~ "As2O3-30m",
      #   )) %>%
      distinct(.keep_all=T) %>%
      mutate(
        Metadata_field=row_number(),
        Metadata_position_name=NULL,
        .by=c(Metadata_prefix, Metadata_group)) %>%
      glimpse()
  } }
```

## image
```{r}
image <- raw$image %>% 
  select(!c(starts_with("Image_Count_"),
            matches("Image_Intensity_Percentile_[25]_.*"))) %>% 
  rename_with(\(x) str_replace(x, "Intensity_Percentile_1", "bg")) %>% 
  glimpse()

## get metadata from image prefix
if(F) {
  image <- image %>%
  # mutate(Metadata_sheet=Metadata_prefix)
  separate_wider_delim(
    Metadata_prefix, delim="_p",
    names=c("Metadata_reporter", "Metadata_prefix"),
    too_few="align_start", too_many="drop", cols_remove=T) %>% 
    mutate(Metadata_prefix=as.character(as.integer(Metadata_prefix))) %>% 
    print()
  
  count(image, Metadata_reporter, Metadata_prefix)
}

## merge with metadata
if(exists("plate_info")) {
  print("merge with plate_info")
  image <- left_join(image, plate_info) %>% glimpse() } # , by=join_by(Metadata_sheet, Metadata_well)
if(exists("cmpd_lib")) {
  print("merge with cmpd_lib")
  image <- left_join(image, cmpd_lib) %>% glimpse() } # , by=join_by(Metadata_prefix, Metadata_well)
if(exists("position_meta")) {
  print("merge with position_meta")
  image <- left_join(image, position_meta) %>% glimpse() } # , by=join_by(Metadata_prefix, Metadata_position)

## remove unwanted metadata columns
image <- image %>% 
  select(!c(Metadata_directory, Metadata_stack)) %>% 
  { if(length(unique(image[["Metadata_timepoint"]]))==1 ) {
    select(., !Metadata_timepoint) } else .} %>% 
  select(starts_with("Metadata"), everything()) %>% 
  glimpse()
# count(image, Metadata_prefix, Metadata_barcode, Metadata_well) %>% view

all_objects <- c("image")
```

## cell
```{r}
# glimpse(raw$objects)
cell_obj <- str_subset(names(raw$objects), "^cell") %>% print()
if(length(cell_obj) > 0) {
  # cell <- raw$objects %>% bind_row(.id="Metadata_object") %>% 
  cell <- raw$objects[[cell_obj]] %>% 
    dplyr::select(!any_of(c(#"Number_Object_Number",
      "Parent_mask_cp_masks_cell",
      "Parent_ConvertImageObjects",
      "Parent_FilterObjects"))) %>% #glimpse()
    right_join(
      dplyr::select(image, starts_with("Metadata"), ImageNumber), ., 
      by=join_by(ImageNumber)) %>% 
    {if(any(str_detect(colnames(.), "AreaShape_Area"))) {
        dplyr::rename(., AreaShape_AreaPixel=AreaShape_Area)
      } else . } %>% 
    # scale pixel to actual length
    {if(!is.null(length_per_pixel)) {
      mutate(., across(matches("*(Diameter)|(AxisLength)|(Radius)|(Perimeter)$"),
                       \(x) x * length_per_pixel)) %>% 
        mutate(across(ends_with("_Area"), \(x) x * (length_per_pixel)^2))
    } else .} %>% 
    # rename spot-joining column name
    dplyr::rename(cellNumber=Number_Object_Number) %>% 
    # rename probabilities to make plot okay
    rename_with(\(x) str_replace(x, "_Probabilities", "Prob"), 
                !starts_with("Metadata")) %>% 
    # remove all empty col (all NA)
    janitor::remove_empty("cols", cutoff=1) %>% 
    glimpse()
  
  # make sure each combination have value, 
  # if not existed, fill with 0
  if(T) {
    uni_combination <- image %>% 
      # select(any_of(c("Metadata_prefix", "Metadata_reporter", 
      #                 "Metadata_well", "Metadata_field",
      #                 "Metadata_name"))) %>% 
      dplyr::select(starts_with("Metadata_"), ImageNumber) %>% 
      distinct() # %>% glimpse()
    
    cell <- cell %>% 
      left_join(uni_combination, .) %>%
      mutate(across(!starts_with("Metadata"), ~ replace_na(.x, 0)))
  }

  all_objects <- c(all_objects, "cell")
}
rm(cell_obj)
```

## sub-cell structures
```{r}
# sub-cell structures must have [Parent_cell] column
# c("membrane", "plasma") , c("cyto", "nuclei")
sub_cell_structures <- c("membrane", "plasma")
for(structure in sub_cell_structures) {
  if(structure %in% names(raw$objects)) {
    assign(structure, 
           raw$objects[[structure]] %>% 
             dplyr::select(!any_of(c(
               "Number_Object_Number",
               "Children_cyto_Count"))) %>% #glimpse()
             right_join(
               dplyr::select(image, starts_with("Metadata"), ImageNumber), ., 
               by=join_by(ImageNumber)) %>% 
             {if(any(str_detect(colnames(.), "AreaShape_Area"))) {
               dplyr::rename(., AreaShape_AreaPixel=AreaShape_Area)
             } else . } %>% 
             # scale pixel to actual length
             {if(!is.null(length_per_pixel)) {
               mutate(., across(matches("*(Diameter)|(AxisLength)|(Radius)|(Perimeter)$"),
                                \(x) x * length_per_pixel)) %>% 
                 mutate(across(ends_with("_Area"), \(x) x * (length_per_pixel)^2))
             } else .} %>% 
             # rename spot-joining column name
             dplyr::rename(cellNumber=Parent_cell)# %>% glimpse()
    )
    all_objects <- c(all_objects, structure)
  }
}
```

## tidy spot
```{r}
# glimpse(raw$object)
spot_objs<- str_detect(names(raw$objects), "^spot") %>% 
  names(raw$objects)[.] %>% 
  str_subset("spot_rbg", negate=T)
if(length(spot_objs) > 0) {
  for(spot_obj in spot_objs) {
    assign(
      spot_obj, 
      raw$objects[[spot_obj]] %>% 
        dplyr::select(!any_of(c(#"Number_Object_Number",
          "Parent_mask_cp_masks_cell",
          "Parent_ConvertImageToObjects"))) %>% 
        right_join(
          dplyr::select(image, starts_with("Metadata"), ImageNumber), ., 
          by=join_by(ImageNumber)) %>% 
        rename(AreaShape_AreaPixel=AreaShape_Area) %>%
        # scale pixel to actual length
        {if(!is.null(length_per_pixel)) {
          mutate(., across(matches("*(Diameter)|(AxisLength)|(Radius)|(Perimeter)$"),
                           \(x) x * length_per_pixel)) %>% 
            mutate(across(ends_with("_Area"), \(x) x * (length_per_pixel)^2))
        } else .} %>% 
        # rename cell-joining column name
        {if("Parent_cell" %in% colnames(.)) {
          dplyr::rename(., cellNumber=Parent_cell)
        } else . } %>% 
        dplyr::rename(spotNumber=Number_Object_Number) %>%
        # rename probabilities to make plot okay
        rename_with(\(x) str_replace(x, "_Probabilities", "SpotProb"), 
                    !starts_with("Metadata")) #%>% glimpse()
    )
    
    all_objects <- c(all_objects, spot_obj)
  }
  rm(spot_obj)
}
rm(spot_objs)
```

## add spot_rbg
```{r}
# get spot around background to calculate spot contrast, if has
if("spot_rbg" %in% names(raw$objects)) {
   # Intensity_UpperQuartileIntensity_ or Intensity_MeanIntensity_
  calculate_contrast_by <- "Intensity_MeanIntensity_"
  
  # merge spot with spot_rbg
  spot <- raw$objects[["spot_rbg"]] %>% 
    dplyr::rename(spotNumber=Number_Object_Number) %>% 
    dplyr::select(ImageNumber, spotNumber, contains("MeanIntensity_")) %>% 
    rename_with(\(x) str_c(x, "rbg", sep=""), !c(ImageNumber, spotNumber)) %>% 
    left_join(spot, ., by=join_by(ImageNumber, spotNumber)) %>% 
    glimpse()
  
  # calculate spot contrast
  rbg_colnames <- colnames(spot) %>% 
    str_subset("ch[0-9]+rbg$") %>% 
    str_replace_all("rbg$", "")
  rbg_prefix <- str_replace_all(rbg_colnames, "ch\\d+", "") %>% unique()
  rbg_channels <- str_replace_all(rbg_colnames, rbg_prefix, "")
  for(i in rbg_channels) {
    # use spot mean intensity divided by rbg intensity
    spot[str_c(calculate_contrast_by, i, "EnrichFold")] <- round(
      (spot[str_c(calculate_contrast_by, i)] + 1) / 
        (spot[str_c(rbg_prefix, i, "rbg")] + 1), 3)
    # # use spot q75 intensity divided by rbg intensity
    # spot[str_c(calculate_contrast_by, i, "RatioRbg")] <- round(
    #   spot[str_c(calculate_contrast_by, i)] /
    #     spot[str_c(rbg_prefix, i, "rbg")], 3)
    spot[str_c(rbg_prefix, i, "rbg")] <- NULL
  }
  rm(rbg_colnames, rbg_prefix, rbg_channels, i)
  
  glimpse(spot)
}
```

## subtract background
```{r}
if(T) {
  # group by prefix or not
  subtract_bg_by_prefix <- T
  
  # get all channel names
  bg_channels <- colnames(image) %>% 
    str_subset("ratio", negate=T) %>% 
    str_subset("Image_bg") %>% 
    str_replace_all("Image_bg_", "")
  
  # get bg values
  if(subtract_bg_by_prefix) {
    # by using mean measurement value from each plate
    bg_intensity <- image %>% 
      dplyr::select(any_of(c("Metadata_prefix", 
                      str_subset(colnames(image), "Image_bg")))) %>% 
      dplyr::select(!matches(".*ratio")) %>% 
      rename_with(~ str_c(.x, "_mean_by_prefix"), !Metadata_prefix) %>%
      reframe(across(everything(), 
                     ~ median(.x, na.rm=T) %>% round(4)),
              .by=Metadata_prefix)
  } else {
    # by using a single mean value from total bg image measurement
    bg_intensity <- image %>% 
      dplyr::select(any_of(str_subset(colnames(image), "Image_bg"))) %>% 
      dplyr::select(!matches(".*ratio")) %>% 
      rename_with(~ str_c(.x, "_mean_by_prefix"), everything()) %>%
      reframe(across(everything(), 
                     ~ median(.x, na.rm=T) %>% round()) ) %>% 
      expand_grid(tibble(
        Metadata_prefix=unique(image$Metadata_prefix)), .)
  }
  print(head(bg_intensity))
  
  # or by manual defined
  if(F) {
    bg_intensity <- c(
      "Image_bg_ch1_mean_by_prefix"=1570,
      "Image_bg_ch2_mean_by_prefix"=1565,
      "Image_bg_ch3_mean_by_prefix"=1577) %>%
      enframe() %>%
      pivot_wider(names_from=name, values_from=value) %>%
      expand_grid(tibble(Metadata_prefix=unique(Image$Metadata_prefix)))
  }
  
  # prepare merged data
  for(obj in all_objects) {
    obj_df <- get(obj)
    obj_df <- left_join(obj_df, bg_intensity, by=join_by(Metadata_prefix))
    assign(obj, obj_df)
    rm(obj_df) }
  
  # process one channel each time
  for(ch in bg_channels) {
    for(obj in all_objects) {
      obj_df <- get(obj)
      # MeanIntensity
      if(str_glue("Intensity_MeanIntensity_{ch}") %in% colnames(obj_df)) {
        obj_df[[str_glue("Intensity_MeanIntensity_{ch}")]] <- 
          (obj_df[[str_glue("Intensity_MeanIntensity_{ch}")]] - 
             obj_df[[str_glue("Image_bg_{ch}_mean_by_prefix")]]) %>% 
          map_dbl(\(x) max(x, 0)) }
      # IntegratedIntensity
      if(str_glue("Intensity_IntegratedIntensity_{ch}") %in% colnames(obj_df)) {
        if(any(str_detect(colnames(obj_df), "AreaShape_AreaPixel"))) {
          obj_df[[str_glue("Intensity_IntegratedIntensity_{ch}")]] <- 
            (obj_df[[str_glue("Intensity_IntegratedIntensity_{ch}")]] - 
               obj_df[[str_glue("Image_bg_{ch}_mean_by_prefix")]] * 
               obj_df[[str_glue("AreaShape_AreaPixel")]]) %>% 
            map_dbl(\(x) max(x, 0))
        } } 
      # remove bg column
      obj_df[[str_glue("Image_bg_{ch}_mean_by_prefix")]] <- NULL
      # assign data
      assign(obj, obj_df)
      rm(obj_df)
    }
    rm(obj)
  }
  
  # glimpse(image)
  # glimpse(cell)
  # glimpse(bg_intensity)
}
```


#---------------------------------
## merge object
```{r}
# merge with sub_cell_structures
for(structure in sub_cell_structures) {
  if(exists(structure)) {
    cell <- get(structure) %>% 
      rename_with(\(x) str_c(x, "_", structure), 
                  !c(starts_with("Metadata"), ImageNumber, cellNumber)) %>% 
      left_join(cell, .) #%>% glimpse() 
  }
}

# merge with spot
if(length(str_subset(ls(), "^spot")) > 0) {
  # each row is a cell
  for(obj in str_subset(ls(), "^spot")) {
    cell <- get(obj) %>% reframe(
      # across(contains(c("EquivalentDiameter","Eccentricity","Intensity_MeanIntensity")), 
      #        list(Mean=\(x) mean(x, na.rm=T)), .names="{.col}{obj}{.fn}"),
      across(contains(c("IntegratedIntensity")), 
             list(Total=\(x) sum(x, na.rm=T)), .names="{.col}_{obj}{.fn}"),
      .by=c(starts_with("Metadata"), any_of(c("ImageNumber", "cellNumber")))) %>% 
      left_join(cell, .) %>% 
      # rename_with(\(x) str_replace(x, "") Intensity_MeanIntensity_spotCount=Children_spot_Count) %>% 
      mutate(across(matches("_Count$"), \(x) replace_na(x, 0)))
    # mutate(across(!starts_with("Metadata"), \(x) replace_na(x, 0)))
    
    # calculate spark value
    for(ch in names(channel_names)) {
      spotTotal_colname <- str_glue("Intensity_IntegratedIntensity_{ch}_{obj}Total")
      cellTotal_colname <- str_glue("Intensity_IntegratedIntensity_{ch}")
      if(all(c(spotTotal_colname, cellTotal_colname) %in% colnames(cell))) {
        print(str_glue("calculate spark value for {obj} {ch}"))
        cell[[str_glue("Intensity_MeanIntensity_{ch}_{obj}_SparkValue")]] <-
          cell[[spotTotal_colname]] / cell[[cellTotal_colname]]
      } }
    
    # filter out by SparkValue < 1 and reset SparkValue NA
    cell <- cell %>% 
      mutate(across(contains("SparkValue"), \(x) replace_na(x, 0))) %>% 
      # filter out cells which SparkValue > 1
      filter(!if_any(ends_with("SparkValue"), \(x) x >= 1))
  }
  rm(obj, spotTotal_colname, cellTotal_colname)
  glimpse(cell)
}
```

## !! modify object
```{r}
if(T) {
  if(F) {
    cell$AreaShape_Eccentricity %>% quantile(c(0.01,0.05,0.1,0.5,0.9,0.95,0.99))
    cell$AreaShape_EquivalentDiameter %>% quantile(c(0.01,0.05,0.1,0.5,0.9,0.95,0.99))
    cell$Intensity_MeanIntensity_GFP %>% quantile(c(0.01,0.05,0.1,0.5,0.9,0.95,0.99))
    ggplot(cell, aes(Intensity_MeanIntensity_RFP)) +
      geom_histogram(binwidth=20) +
      facet_wrap(vars(Metadata_vector), axes="all") +
      coord_cartesian(xlim=c(10, 8000)) +
      # coord_cartesian(xlim=c(1e3, 2e6)) +
      # scale_x_log10() +
      my_theme(0)
    count(cell, Metadata_prefix, Metadata_well)
  }
  
  glimpse(cell)
  glimpse(cell_filter)
  
  cell_filter <- cell %>% 
    filter(between(AreaShape_Eccentricity, 0.28, 0.95)) %>% 
    filter(between(AreaShape_EquivalentDiameter, 12, 40)) %>% 
    filter(!(str_detect(Metadata_vector, "Kras") & Intensity_IntegratedIntensity_IFP < 7.5e5)) %>%
    filter(between(Intensity_MeanIntensity_RFP, 200, 6000)) %>%
    filter(!Metadata_vector_conc == 0) %>% 
    # mutate(Intensity_MeanIntensity_ErkKTRActivity =
    #          (`RadialDistribution_MeanFrac_IFP_4of5` +
    #             `RadialDistribution_MeanFrac_IFP_5of5`) /
    #          (2*`RadialDistribution_MeanFrac_IFP_1of5`)) %>%
    mutate(Intensity_MeanIntensity_RatioGFPtoRFP=
             Intensity_MeanIntensity_GFP / Intensity_MeanIntensity_RFP) %>%
    mutate(Intensity_MeanIntensity_RatioEdgeGFPtoEdgeRFP=
             Intensity_MeanIntensity_GFP_membrane / Intensity_MeanIntensity_RFP_membrane) %>%
    mutate(Intensity_MeanIntensity_RatioEdgeGFPtoPlasmaGFP=
             Intensity_MeanIntensity_GFP_membrane / Intensity_MeanIntensity_GFP_plasma) %>%
    # mutate(Intensity_MeanIntensity_ErkKTRActivity2 =
    #          (Intensity_IntegratedIntensity_IFP - 
    #             Intensity_IntegratedIntensity_IFP_nuclei)/
    #          Intensity_IntegratedIntensity_IFP_nuclei)  %>%
    # mutate(Intensity_MeanIntensity_ErkKTRActivity2=ifelse(
    #   Intensity_MeanIntensity_ErkKTRActivity2 < 0, NA,
    #   Intensity_MeanIntensity_ErkKTRActivity2)) %>% 
    # select(!ends_with("_nuclei")) %>%
    # select(!starts_with("RadialDistribution")) %>% 
    select(!matches("spot.*Total$")) %>% 
    select(!c(Parent_plasma_membrane, 
              starts_with("Children")
              )) %>%
    mutate(across(starts_with("Metadata"), as.character)) #%>% glimpse()
}
```



#---------------------------------
# summarize to field
```{r}
cell_obj <- "cell_filter"

## summarize data
grouping_vars <- c("Metadata_prefix", "Metadata_well", "Metadata_group",
                   "Metadata_vector", "Metadata_vector_conc", "Metadata_cmpd")
# define summarize calculation method
if(F) {
  # remove high/low values
  mean_func <- function(x) mean(x, trim=0.05, na.rm=T)
  sum_func <- function(x) {
    x <- x[quantile(x, 0.05) < x & x < quantile(x, 0.95)]
    sum(x, na.rm=T) } 
} else {
  # use all values
  mean_func <- function(x) mean(x, trim=0, na.rm=T)
  sum_func <- function(x) sum(x, na.rm=T) }

# summary per field
assign(
  str_glue("{cell_obj}_field"),
  summarize_to_field(
    get(cell_obj), grouping_vars = grouping_vars,
    mean_keys = c("Intensity_MeanIntensity_", "Granularity_"),
    sum_keys = NULL, 
    mean_func = mean_func, sum_func = sum_func
  ))
# glimpse(get(str_glue("{cell_obj}_field")))
```


#---------------------------------
# analyze data
## setting
```{r}
statistics_obj <- "cell"
# statistics_obj <- "cell_filter_field"

# normalized by group
statistics_grouping_vars <- c("Metadata_prefix") 

get_foldchange <- T # if calculate fold change to ctrl
log_trans <- F # if fc log2 transform
get_pvalue <- T # if calculate p-value
pvalue_items <- c("Intensity_MeanIntensity_ErkKTRActivity") # column names from statistics_obj

use_median <- T # if TRUE, ctrl_value will be set as median per group
ctrl_colname <- "Metadata_well" # uid for analysis
ctrl_value <- "0" # datatype must be same with column type, omit if use_median == T
ctrl_value <- ifelse(isTRUE(use_median), "median", ctrl_value)
```

## foldchange
```{r}
if(get_foldchange) {
  print(str_glue("use [{statistics_obj}] to calculate foldchange"))
  assign(
    str_glue("{statistics_obj}_stat"), 
    calculate_foldchange(
      get(statistics_obj), 
      ctrl_colname=ctrl_colname, ctrl_value=ctrl_value,
      grouping_vars=statistics_grouping_vars, use_median=use_median,
      log_trans=log_trans, mean_trim=0.05, const=0)
  )} else rm(list=str_subset(ls(), str_glue("^{statistics_obj}.*_stat$")))
```

## pvalue
```{r}
if(get_pvalue) {
  print(str_glue("use [{statistics_obj}] to calculate pvalue"))
  assign(
    str_glue("{statistics_obj}_pval"), 
    calculate_pvalue(
      get(statistics_obj), 
      ctrl_colname=ctrl_colname, ctrl_value=ctrl_value,
      grouping_vars=statistics_grouping_vars, 
      pvalue_items=pvalue_items, use_median=use_median) )
  # merge pval with fc
  assign(
    str_glue("{statistics_obj}_stat"),
    left_join(get(str_glue("{statistics_obj}_stat")),
              get(str_glue("{statistics_obj}_pval"))) )
} else rm(list=str_subset(ls(), str_glue("^{statistics_obj}.*_pval$")))

# glimpse(get(str_glue("{statistics_obj}_stat")))
```



# ---------------------------------
# save data
```{r}
if(T) {
  list(cell_filter=cell_filter, cell_filter_field=cell_filter_field 
       ) %>% 
    write_xlsx(str_glue("{Sys.Date()}_data.xlsx"))
}

```


# ---------------------------------
# plot data

## plot
```{r}
plot_obj <- "cell_filter_field"
# glimpse(get(plot_obj))

pdata <- get(plot_obj) %>% 
  {if("Metadata_well" %in% colnames(.)) {
    mutate(., Metadata_well=factor(
      Metadata_well, str_sort(unique(Metadata_well), numeric=T)))
  } else .} %>% 
  # mutate(Metadata_cmpd=factor(
  #   Metadata_cmpd, str_sort(unique(Metadata_cmpd), numeric=T))) %>%
  mutate(Metadata_cmpd=factor(
    Metadata_cmpd, c("DMSO","AMG510"))) %>%
  mutate(Metadata_vector_conc=factor(
    as.numeric(Metadata_vector_conc), sort(as.numeric(unique(Metadata_vector_conc))))) %>%
  # filter(!is.na(Metadata_vector)) %>%
  # filter(!str_detect(Metadata_vector, "ZQ375")) %>% 
  # mutate(row=str_extract(Metadata_well, "(\\w)\\d+", group=1),
         # col=str_extract(Metadata_well, "\\w(\\d+)", group=1)) %>%# glimpse()
  # mutate(col=factor(col, unique(sort(as.numeric(col))))) %>% 
  glimpse()

# count(pdata, Metadata_vector, Metadata_dose, Metadata_conc) %>% view()

plot_items <- colnames(get(plot_obj)) %>% 
  str_subset("^Metadata", negate=T) %>% 
  str_subset(".*Number$", negate=T) %>% 
  str_subset("statistic$", negate=T) %>% 
  str_subset("pvalue$", negate=T) %>% 
  str_subset("Granularity_1_", negate=T) %>% 
  str_subset("Granularity_[5-9]_", negate=T) %>% 
  str_subset("AreaShape_Eccentricity", negate=T) %>%
  str_subset("AreaShape_AreaPixel", negate=T) %>% 
  # str_subset("IFP", negate=T) %>% 
  str_subset("Children", negate=T) %>%
  # str_subset("Spot", negate=T) %>% 
  unique() %>% print()
# plot_items <-c("Intensity_MeanIntensity_GFP", "Granularity_2_GFP")

# bar
plot_list <- plot_items %>% 
  map(\(x) pdata %>% 
        ggplot(aes(Metadata_vector_conc, !!as.name(x), fill=Metadata_cmpd)) +
        # stat_summary(geom="errorbar", fun.data=mean_sdl, fun.args=list(mult=1), # check Hmisc::smean.sdl
        #              width=0.4, color="grey20", position=position_dodge(1)) + # "#4575b4"
        stat_summary(geom="errorbar", fun.data=mean_se, 
                     width=0.4, position=position_dodge(0.75)) + # color="grey20", 
        stat_summary(geom="bar", fun=mean, 
                     width=0.7,  position=position_dodge(0.75)) + # fill="#4575b4",
        # facet_wrap(vars(Metadata_vector),
        #            scales="fixed", axes="all") +
        facet_grid(rows=vars(Metadata_prefix),
                   cols=vars(Metadata_vector),
                   scales="fixed", axes="all") +
        ggpubr::stat_compare_means(
          aes(group=Metadata_treat, label=after_stat(p.format)),
          method="wilcox.test", size=1) +
        labs(x="") +
        # guides(fill="none") + 
        scale_fill_hue(direction=-1) +
        # scale_x_continuous(limits=c(1, 60000), 
        #                    transform=scales::log2_trans()) +
        coord_cartesian(ylim=c(0, NA)) +
        labs(x="DNA usage (ng)") +
        my_theme(angle=0)
        # plot_layout(widths=unit(20,"cm"), heights=unit(6,"cm"))
      ) %>% align_patches()
# save to multiple pages
pdf(str_glue("{Sys.Date()}_{plot_obj}_bar.pdf"), width=9, height=5)
for(i in plot_list) print(i)
while(dev.cur() != 1) dev.off()



roi <- "GFP"
pdata %>% 
  ggplot(aes(!!as.name(str_glue("Intensity_MeanIntensity_{roi}")), 
             !!as.name(str_glue("Granularity_2_{roi}"))
             )) +
  geom_point(shape=21, fill="#386cb0", color="white", stroke=0, alpha=0.7, size=1) +
  geom_smooth(color="darkred", method="gam", linewidth=0.2) +
  # ggpubr::stat_cor(size=1.5) +
  # facet_wrap(vars(Metadata_well), ncol=9,
  #            scales="fixed", axes="all") +
  # facet_grid(rows=vars(Metadata_prefix),
  #            cols=vars(Metadata_cmpd),
  #            scales="free", axes="all") +
  facet_grid(rows=vars(row),
             cols=vars(col),
             scales="fixed", axis.labels="all", axes="all") +
  # labs(x="") +
  # labs(y="ERK-KTR Activity") +
  my_theme(angle=0)
ggsave(str_glue("{Sys.Date()}_{plot_obj}_Granularity_spot_{roi}.pdf"), 
       width=12, height=2.5)
# ggsave(str_glue("{Sys.Date()}_{plot_obj}_SparkValue_spot_{roi}.pdf"), 
#        width=12, height=2.5)
```

## volcano
```{r}
glimpse(summary_per_well)
summary_per_well %>% 
  ggplot(aes(granularity_Granularity_2_ch1_statistic,
             -log10(granularity_Granularity_2_ch1_pvalue))) +
  geom_point(aes(size=-log10(granularity_Granularity_2_ch1_pvalue)), 
             size=0.5, color="grey50",
             data=filter(p_data, Metadata_cmpd_type == "Diverse")) +
  geom_point(aes(color=Metadata_cmpd_type, 
                 size=-log10(granularity_Granularity_2_ch1_pvalue)), 
             size=1,
             data=filter(p_data, Metadata_cmpd_type != "Diverse")) +
  facet_grid(Metadata_plate_type ~ Metadata_model_class) +
  theme_bw()

p_data <- summary_per_well_normCtrl %>% 
  filter(!!as.name(ctrl_colname) != ctrl_value) %>% 
  reframe(across(ends_with(c("statistic","pvalue")), mean),
          .by=c(Metadata_cmpd, Metadata_cmpd_type, 
                Metadata_plate_type, Metadata_model_class))
p <- p_data %>% 
  ggplot(aes(granularity_Granularity_2_ch1_statistic,
             -log10(granularity_Granularity_2_ch1_pvalue))) +
  geom_point(aes(size=-log10(granularity_Granularity_2_ch1_pvalue)), 
             size=0.5, color="grey50",
             data=filter(p_data, Metadata_cmpd_type == "Diverse")) +
  geom_point(aes(color=Metadata_cmpd_type, 
                 size=-log10(granularity_Granularity_2_ch1_pvalue)), 
             size=1,
             data=filter(p_data, Metadata_cmpd_type != "Diverse")) +
  facet_grid(Metadata_plate_type ~ Metadata_model_class) +
  theme_bw()
 ggsave(str_glue("{Sys.Date()}_{obj}_vocalno.pdf"),
          ggrastr::rasterize(p, dpi=600),
          width=9, height =6, limitsize=F)
 
# top rank
top_hits <- p_data %>% 
  # group_by(Metadata_model_class) %>% 
  slice_min(granularity_Granularity_2_ch1_statistic,
            n=200,
            by=c(Metadata_plate_type, Metadata_model_class)) %>% 
  pull(Metadata_cmpd)
p <- filter(p_data, Metadata_cmpd %in% top_hits) %>% 
  ggplot(aes(Metadata_plate_type, granularity_Granularity_2_ch1_statistic,
             group=Metadata_cmpd)) +
  geom_line(color="grey50", alpha=0.5,
            data=filter(p_data, Metadata_cmpd_type == "Diverse")) +
  geom_line(aes(color=Metadata_cmpd_type),
            data=filter(p_data, Metadata_cmpd_type != "Diverse")) +
  # geom_point(aes(size=-log10(granularity_Granularity_2_ch1_statistic)), 
  #            size=0.5, color="grey50",
  #            data=filter(p_data, Metadata_cmpd_type == "Diverse")) +
  geom_point(aes(color=Metadata_cmpd_type, 
                 size=-log10(granularity_Granularity_2_ch1_statistic)), 
             size=1,
             data=filter(p_data, Metadata_cmpd_type != "Diverse")) +
  facet_grid(~ Metadata_model_class) +
  theme_bw()
ggsave(str_glue("{Sys.Date()}_{obj}_top200_compare_plate.pdf"),
        ggrastr::rasterize(p, dpi=600),
        width=10, height =6, limitsize=F)
```




# --------------------------------------------------
# dose response

## fit setting
```{r}
# fitting_source: cell, cell_stat, cell_field, cell_field_stat
# glimpse(summary_per_field_normCtrl)
fitting_obj <- "cell_norm"
fitting_X <- "Metadata_conc"
fitting_Y <- "Granularity_2_GFP"
fitting_groupby <- c("Metadata_prefix","Metadata_cmpd")
# fitting_groupby <- NULL
```

## fit curve
```{r}
fitted <- get(fitting_obj) %>% 
  # filter(Metadata_cmpd=="Sema") %>% 
  fit_dose_response(
    fitting_X, fitting_Y, fitting_groupby, n_worker=1
    # # parameters from dr4pl::dr4pl()
    # trend = "decreasing",
    # method.init = "Mead",
    # method.robust = "Huber",
    # lowerl = c(theta_4 = 0)
    )
# prepare data to plot
# remove not converged group
fitted_prepared <- plot_dose_response_dataPrepare(
  fitted, group=fitting_groupby)
```

## plot fitted result
```{r}
conc_series <- unique(pull(unnest(fitted_prepared, data), dose))
log_trans_sigma <- conc_series %>% setdiff(0) %>% min() %>% 
  magrittr::divide_by(10)
axis_breaks <- conc_series %>% setdiff(0) %>% range() %>% 
  log10() %>% round() %>% {seq(.[1], .[2], by=1)} %>% {10^(.)}
if(0 %in% conc_series) axis_breaks <- c(0, axis_breaks)

p <-  ggplot() +
  stat_summary(aes(dose, response),
               geom="pointrange", 
               color="#4575b4", size=0.2,
               fun=mean, 
               fun.min = function(x) mean(x) - se(x), 
               fun.max = function(x) mean(x) + se(x),
               data=unnest(fitted_prepared, data)) +
  geom_line(aes(x,y), color="#4575b4",
            data=unnest(fitted_prepared, pred)) + 
  geom_text(aes(x, y, label=label), 
    size=2, nudge_x=1, nudge_y=-0.25,
    data=unnest(fitted_prepared, pred) %>% 
      arrange(x, y) %>% 
      slice_head(n=1, by=any_of(fitting_groupby)) %>% 
      mutate(label=str_c("IC50: ", format_num_auto(IC50_Estimate),"\n",
                         "Upper: ", format_num_auto(as.numeric(Upper_Estimate)*100),"\n",
                         "Lower: ", format_num_auto(as.numeric(Lower_Estimate)*100)))) +
  facet_wrap(vars(Metadata_prefix),
             scales="fixed", axes="all") +
  # facet_grid(rows=vars(Metadata_prefix),
  #            cols=vars(Metadata_vector),
  #            scales="fixed", axes="all") +
  labs(x="Dose (uM)", y=fitting_Y, caption="mean_se") +
  scale_x_continuous(
    transform=scales::pseudo_log_trans(sigma=log_trans_sigma, base=10),
    breaks=axis_breaks,
    # labels=scales::label_number(drop0trailing=T),
    expand=expansion(mult=c(0.05, 0.1)),
    labels=function(lab) {
      do.call(expression, lapply(paste(lab), function(x) bquote(.(x))))
      } ) +
  # coord_cartesian(ylim=c(0, NA)) +
  my_theme(angle=45)
# p
ggsave(str_glue("{Sys.Date()}_{fitting_obj}_DoseFit_{fitting_Y}.pdf"),
        p, width=12, height=3, limitsize=F)
```

## save fitted data
```{r}
fitted_save_data <- fitted %>% 
  unnest(coef) %>%
  # add more IC values
  mutate(ICs=map(
    model, 
    \(x) dr4pl::IC(x, inhib.percent=c(10, 50, 90)) %>% 
      enframe() %>% 
      pivot_wider() )) %>% 
  unnest(ICs) %>% 
  select(!c(data, model, pred))

writexl::write_xlsx(
  list(fitted=fitted_save_data), 
  str_glue("{Sys.Date()}_{fitting_obj}_DoseFit_{fitting_Y}.xlsx"))
```




# ---------------------------------
# plot individual data

```{r}
library(tidyplots)

glimpse(cell_filter)

cell_filter %>% 
  filter(Metadata_vector2 != "empty") %>% 
  tidyplot(Metadata_vector, 
           IFP_cyto_nuclei_ratio, 
           color=Metadata_vector2) %>% 
  add_mean_bar() %>% 
  add_sem_errorbar() %>% 
  adjust_x_axis(rotate_labels=T) %>% 
  sort_x_axis_labels()
  
cell_filter %>% 
  filter(Metadata_vector2 != "empty") %>% 
  ggplot(aes(Metadata_vector, IFP_cyto_nuclei_ratio)) +
  stat_summary(geom="bar", fun=mean, width=0.8, position="dodge", fill="#4575b4") +
  stat_summary(geom="errorbar", fun.data=mean_se, width=0.5, position="dodge") +
  facet_grid( ~ Metadata_vector2, 
             scales="free", axis.labels="all", axes="all") +
  my_theme(angle=45)
```

```{r}
if(F) {
  obj <- "cell"
  log_trans <- T
  # remove data out of quantile range
  clip_data <- c(0.01, 0.99)
  # clip_data <- NULL
  
  plot_categories <- colnames(get(obj)) %>% 
    str_subset("^Metadata_", negate=T) %>% 
    str_subset(".*Number", negate=T) %>% 
    map_chr(\(x) str_split(x, "_", simplify=T)[1]) %>% 
    unique()
  
  for(category in plot_categories) {
    # category <- plot_categories[1]
    print(str_glue("plot {category}"))
    # subset item
    subset <- get(obj) %>% 
      # filter(!!as.name(ctrl_colname) != ctrl_value) %>% 
      select(starts_with("Metadata"), 
             matches(str_glue("^{category}_"))) %>%
      pivot_longer(!starts_with("Metadata"), 
                   names_prefix=str_c(category, "_")) #%>% glimpse()
    # clip data
    if(!is.null(clip_data)) {
      subset <- subset %>% reframe(
        across(value, \(x) quantile(x, clip_data, na.rm=T)), 
        prob=clip_data, .by=any_of(c("name","Metadata_well"))) %>% 
        pivot_wider(names_from=c(prob), values_from=value) %>% 
        magrittr::set_colnames(., c(colnames(.)[1:(ncol(.)-2)], "l","h")) %>% 
        left_join(subset, .) %>% 
        filter(between(value, l, h)) }
    # plot
    p <- subset %>% 
      cp_analysis_plot_individual(
        # set y here
        x_axis="value", y_axis="Metadata_vector", 
        # flexible aes mapping here 
        color="Metadata_vector", fill="Metadata_vector",
        # using vector to enable multiple variables
        # NULL mean no additional facet
        # fact_var2 default separate different sub-category by column
        fact_var1="Metadata_reporter", fact_var2="name", 
        # facet setting
        facet_scale="free", facet_independent="y", facet_axes="all", fact_drop=T,
        # plot type
        plot_type="ridge", dodge_preserve="single", na_rm=T, 
        # additional setting
        box_outlier=F, box_width=0.9, box_staple_width=0.5,
        box_outlier_color="grey50", box_outlier_size=0.5,
        linewidth=0.5, ridge_scale=1, fill_alpha=1, show_legend=F,
        x_size=6, y_size=6, x_rotatin=0,
        x_lab="",  y_lab="", raster=F)
    # transform intensity
    if(log_trans) {
      p <- p + scale_x_continuous(transform=scales::pseudo_log_trans())
    }
    ggsave(str_glue("{Sys.Date()}_{obj}_indivudual_{category}{ifelse(log_trans,'_log','')}.pdf"),
            p,
            width=2*length(unique(subset$name)), height=5, limitsize=F)
  }
}
```