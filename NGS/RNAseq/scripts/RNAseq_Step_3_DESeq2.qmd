---
title: "RNAseq Differential Gene Expression Analysis"
author: "Hao He"
date: "`r Sys.time()`"
format: html
params:
  save_Rdata: TRUE
  species: "hs" # species: hs or mm
  deg_padj: 0.01
  deg_fc: 1.5
  deg_threshold: 2 # tpm threshold at least in one group for plot heatmmap
  counts_file_suffix: "_gene_expression.xlsx" # suffix of gene expression file
  sample_info_file: "sample_info.xlsx" # sample info file located in root_dir
  quantification_dir: "quantification" # directory of expression file
  deseq2_dir: "deseq2" # output directory of DESeq2
editor_options: 
  chunk_output_type: console
---

# Setup
```{r setup, include=FALSE, cache = FALSE}
# options("repos" = c(CRAN = "http://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
# options(BioC_mirror = "http://mirrors.tuna.tsinghua.edu.cn/bioconductor")
f_path <- rstudioapi::getActiveDocumentContext()$path |> dirname()
setwd(dirname(f_path))
knitr::opts_knit$set(root.dir=dirname(f_path))
knitr::opts_chunk$set(echo = TRUE, results = "hold", cache = TRUE)

# load package
invisible(sapply(
  c("tidyverse","readxl","writexl","DESeq2","ashr","factoextra","corrplot",
    "RColorBrewer","ggrepel","patchwork","lemon","cowplot","pheatmap"), 
  function(x) library(x, character.only=T)))
```

```{r}
# load help function
source("scripts/RNAseq_helper.R")

species <- params$species
deg_padj <- params$deg_padj
deg_fc <- params$deg_fc
deg_threshold <- params$deg_threshold
sample_info_file <- params$sample_info_file
counts_file_suffix <- params$counts_file_suffix
deseq2_dir <- params$deseq2_dir
quantification_dir <- params$quantification_dir
run_DEG_pattern <- params$run_DEG_pattern
save_Rdata <- params$save_Rdata

if(!dir.exists(deseq2_dir)) dir.create(deseq2_dir)
```


# Prepare colData
```{r}
print(getwd())
# read sample info
sample <- sample_info_file %>% 
  read_xlsx(sheet="sample", col_types="text")

# check sample info if project_id and sample_name were unique
if(length(sample$project_id) != unique(length(sample$project_id))) {
  stop("check samples file, `project_id` were not unique") } else {
    if(length(sample$sample_name) != unique(length(sample$sample_name)))
      stop("check samples file, `sample_name` were not unique") }

# read contrast info
contrast_info <- normalizePath(sample_info_file) %>% 
  read_xlsx(sheet="contrast", range="A1:C100", col_types="text")

# construct contrast
contrast <- na.omit(contrast_info$contrast) %>% 
  seq_along() %>% 
  map(\(x) c(contrast_info$contrast[x], contrast_info$control[x]))

# subset & filter sample info
sample <- c("project_id", "sample_name", "include", "batch") %>% 
  c(na.omit(contrast_info$comparison)) %>% 
  sample[, .] %>% 
  filter(include=="yes")

# construct sample contrasts according to sample info colData
sample$contrast <- na.omit(contrast_info$comparison) %>% 
  sample[, .] %>% 
  apply(1, paste, collapse=".") %>% 
  factor(., levels=unique(.))

# check if contrast has its relative items in sample_info$condition
if(!all(as.factor(unlist(contrast)) %in% sample$contrast)) 
  stop("not all 'contrast' vs 'control' were found in sample definition, please check it")

# prepare colData
col_data <- data.frame(batch = sample$batch, contrast = sample$contrast) %>% 
  magrittr::set_rownames(sample$sample_name)

# show sample info
print(sample)
```

# Prepare count matrix
```{r}
# look for expr file
expr_file <- list.files(quantification_dir, counts_file_suffix, full.names = T) %>% 
  str_subset("^~", negate = T) # remove tmp file when file opened in windows
# check expression file exist
if(length(expr_file) == 0) {
  stop(str_glue("can't find '{counts_file_suffix}'")) } else {
    # check unique
    if(length(expr_file) > 1) {
      print(str_glue("more than one '{counts_file_suffix}', use last one"))
      expr_file <- last(expr_file)
      print(expr_file) } }

# read counts
counts <- expr_file %>% read_xlsx(sheet = "counts")
# remove samples not include (include = no) and convert to matrix
counts <- counts[, c("symbol", sample$sample_name)] %>% 
  filter(!is.na(symbol)) %>%
  distinct(symbol, .keep_all = T) %>%
  column_to_rownames("symbol")
# filter low count genes within each group
counts <- sample[, c("sample_name", "contrast")] %>% 
  deframe %>% 
  # mean > 10 counts at least one group
  filter_df_by_group(counts, ., threshold = 10)

# read TPM
if("tpm" %in% excel_sheets(expr_file)) {
  print("read TPM data")
  tpm <- expr_file %>% read_xlsx(sheet = "tpm") %>% 
    select(all_of(c("symbol", sample$sample_name))) %>% 
    filter(symbol %in% rownames(counts), !is.na(symbol)) %>% 
    distinct(symbol, .keep_all = T)
  # mean > 5 tpm at least one group
  tpm_filter <- tpm %>% 
    filter_df_by_group(
      deframe(sample[, c("sample_name", "contrast")]), 
      threshold = deg_threshold) }
```

# Cnnstruct DESeq2
```{r}
# check if batch data included
include_batch <- length(unique(col_data$batch)) > 1

if(include_batch) {
  deseq_matrix <- DESeqDataSetFromMatrix(
    countData = counts, colData = col_data, 
    design = ~ batch + contrast)
} else {
  deseq_matrix <- DESeqDataSetFromMatrix(
    countData = counts, colData = col_data,
    design = ~ contrast) }

# pair-wise wald test
deseq_wald <- DESeq(deseq_matrix)

# dispersion estimation
# plotDispEsts(deseq_wald)
```

# Exploratory analysis
```{r}
# vst transformation
vst <- vst(deseq_wald, blind = F)
vst_mat <- assay(vst)

# batch effect
if(include_batch) {
  print("perform batch correction")
  vst_mat <- limma::removeBatchEffect(
    vst_mat, vst$batch, 
    design = model.matrix(~ vst$contrast)) }

# top N variable genes heatmap
N <- 2000
top_variable_genes <- rowVars(vst_mat) %>% 
  order(decreasing = T) %>% .[1:N] %>% vst_mat[., ] %>% 
  pheatmap::pheatmap(
    scale = "row", border_color = NA,
    col = colorRampPalette(c("#377eb8", "#f7f7f7", "#e41a1c"))(100),
    # col = colorRampPalette(c("#377eb8", "#f7f7f7", "#e41a1c"))(100)
    show_rownames = F, cluster_cols = F, cluster_rows = T,
    annotation_col = col_data[, "contrast", drop = F], 
    filename = str_glue("{deseq2_dir}/{Sys.Date()}_variable_genes_heatmap_top{N}.pdf"),
    width = ceiling(nrow(col_data)/4), 
    height = ceiling(nrow(col_data)/5),
    main = str_glue("Heatmap of top {N} variable genes") )

# sample to sample correlation
vst_mat %>% 
  cor(method = "pearson") %>% 
  pheatmap::pheatmap(
    scale = "none", border_color = NA,
    cluster_cols = F, cluster_rows = F,
    col = colorRampPalette(brewer.pal(9, "Blues"))(255),
    annotation_col = col_data[, "contrast", drop = F], 
    annotation_row = col_data[, "contrast", drop = F], 
    filename = str_glue("{deseq2_dir}/{Sys.Date()}_sample_correlation.pdf"),
    width = ceiling(nrow(col_data)/2), 
    height = ceiling(nrow(col_data)/2) - 1.5,
    main = str_glue("Sample distance using all expressed genes")
  )

# # sample to sample correlation (use corrplot)
# pdf(str_glue("{deseq2_dir}/{Sys.Date()}_sample_correlation2.pdf"),
#     width = ceiling(ncol(vst_mat)/2), 
#     height = ceiling(ncol(vst_mat)/2))
# vst_mat %>% 
#   cor(method = "pearson") %>% 
#   corrplot.mixed(
#     lower = "number", upper = "ellipse",
#     order = "hclust",
#     tl.cex = 0.4,
#     number.cex = 0.6,
#     number.digits = 3,
#     lower.col=colorRampPalette(c("#386cb0","white","#d73027"))(200),
#     upper.col=colorRampPalette(c("#386cb0","white","#d73027"))(200),
#     tl.col="black")
# while(dev.cur() != 1) dev.off()

# PCA
pca <- t(vst_mat) %>% prcomp(scale. = T)
# scree plot
p1 <- fviz_eig(pca, addlabels = T) + 
  labs(title=NULL) +
  theme_bw() +
  theme(panel.grid = element_blank())
# individuals
p2 <- pca %>% 
  fviz_pca_ind(
    axes = c(1, 2), 
    geom = c("point", "text"), 
    repel = TRUE, labelsize = 2, 
    pointshape = 19, pointsize = 2, 
    col.ind = sample$contrast,
    # fill.ind = sample$contrasts,
    addEllipses = TRUE, ellipse.type = "confidence", ellipse.level = 0.95, 
    invisible = "quali", legend.title = "") +
  labs(title=NULL) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.position = "top",
        legend.key.size = unit(0.01, 'snpc'),
        legend.text = element_text(size=4))
ggsave2(str_glue("{deseq2_dir}/{Sys.Date()}_sample_pca.pdf"), 
        p1 + p2 + plot_layout(widths = c(3, 2)), 
        width=9, height=4)

# # MDS using Euclidean Distance
# mds <- t(vst_mat) %>%
#   dist(method="euclidean") %>%
#   as.matrix() %>%
#   cmdscale() %>% 
#   as.data.frame() %>% 
#   magrittr::set_colnames(c("MDS1", "MDS2")) %>% 
#   as_tibble(rownames="sample") %>% 
#   left_join(as_tibble(col_data, rownames="sample"),
#             by = join_by(sample))
# 
# # plot mds
# p <- mds %>% 
#   ggplot(aes(MDS1, MDS2, color=contrast)) +
#   geom_point(size=2) +
#   geom_mark_ellipse(expand = unit(0.1,"mm")) +
#   # stat_ellipse(show.legend = F) +
#   geom_text_repel(aes(label=sample), size=1) +
#   theme_bw() +
#   theme(legend.position = "top",
#         panel.grid = element_blank(),
#         legend.title = element_blank(),
#         legend.text = element_text(size=4))
# ggsave2(str_glue("{deseq2_dir}/{Sys.Date()}_sample_mds_euclidean.pdf"), 
#         p, width=4, height=4)


# MDS using Poisson Distance
require("PoiClaClu")
poisd <- t(vst_mat) %>% 
  PoiClaClu::PoissonDistance() %>% 
  .$dd %>% as.matrix() %>% 
  magrittr::set_colnames(colnames(deseq_wald)) %>% 
  magrittr::set_rownames(colnames(deseq_wald))
mds <- poisd %>% cmdscale() %>% as.data.frame() %>% 
  magrittr::set_colnames(c("MDS1", "MDS2")) %>% 
  as_tibble(rownames="sample") %>% 
  left_join(as_tibble(col_data, rownames="sample"), by=join_by(sample))
# plot mds
p <- mds %>% 
  ggplot(aes(MDS1, MDS2, color=contrast)) +
  geom_point(size=2) +
  ggforce::geom_mark_ellipse(expand = unit(0.1,"mm"), show.legend = F) +
  geom_text_repel(aes(label=sample), size=1.5, max.overlaps=20) +
  theme_bw() +
  theme(legend.position = "top",
        panel.grid = element_blank(),
        legend.key.size = unit(0.01, 'snpc'),
        legend.title = element_blank(),
        legend.text = element_text(size=4))
ggsave2(str_glue("{deseq2_dir}/{Sys.Date()}_sample_mds_poisson.pdf"), 
        p, width=4, height=4)
```

# Save normalized data
```{r}
expr_norm <- list(
  counts_norm = counts(deseq_wald, normalize=T) %>% as_tibble(rownames="symbol"),
  vst = vst_mat %>% as_tibble(rownames="symbol"),
  tpm = tpm )

write_xlsx(expr_norm, str_glue(
  "{quantification_dir}/{Sys.Date()}_norm_expression.xlsx"))
```

# Get comparison result
```{r}
# extract wald test result 
if(length(contrast) > 0) {
  deg_list <- list()
  for (i in seq_along(contrast)) {
    cat(str_c(">>>>>>>> get wald test result on: ", 
              contrast[[i]][1], "_vs_", contrast[[i]][2]))
    
    # get result
    deg_unshrink <- results(
      deseq_wald, 
      contrast = c("contrast", contrast[[i]][1], contrast[[i]][2]) )
    # shrink LFC
    deg_shrink <- lfcShrink(
      deseq_wald, 
      contrast = c("contrast", contrast[[i]][1], contrast[[i]][2]), 
      svalue = T, type = "ashr", quiet = T)
    summary(deg_shrink)
    # merge stats, p values with deg_shrink result
    result <- left_join(
      as_tibble(deg_shrink, rownames="symbol"),
      as_tibble(deg_unshrink, rownames="symbol") %>% 
        dplyr::select(symbol, stat, pvalue, padj),
      by = join_by(symbol)) %>% 
      mutate(baseMean=round(baseMean),
             log2FoldChange=round(log2FoldChange,3),
             lfcSE=round(lfcSE,3),
             stat=round(stat, 3) ) %>% 
      relocate(stat, .before = svalue) %>% 
      arrange(svalue, desc(abs(log2FoldChange)))
    
    # append to results list
    result <- list(result) %>% 
      set_names(str_glue("{contrast[[i]][1]}_vs_{contrast[[i]][2]}"))
    deg_list <- append(deg_list, result)
  }
  
  # save deg result
  write_xlsx(deg_list, str_glue("{deseq2_dir}/{Sys.Date()}_wald_result.xlsx"))
}
```

# Vacalno plot
```{r}
deg_list %>% 
  imap(\(x,y) plot_volcano(
    x, 
    fc_thred=deg_fc, padj_thred=deg_padj,
    title=y, size=1, alpha=0.5,
    xlim=c(-7.5, 7.5), ylim=c(0, 120)
  )) %>% 
  wrap_plots(nrow=1) %>% 
  ggsave2(str_glue("{deseq2_dir}/{Sys.Date()}_wald_volcano.pdf"), ., 
          width=ceiling(length(deg_list)*5), height=4, limitsize = F) 
```

# DEG count
```{r}
if(T) {
  print("use wald test result as DEGs")
  deg_gene <- map(deg_list, \(x) filter(
    x, abs(log2FoldChange) > log2(deg_fc),  padj < deg_padj) %>% 
      pull(symbol) %>% 
      # filter by tpm
      {if(exists("tpm_filter")) {
        intersect(., tpm_filter$symbol) } else .} )
  deg_uni <- deg_gene %>% unlist() %>% unique()
  
  # upset plot
  # require(UpSetR)
  # require(ComplexHeatmap)
  pdf(str_glue("{deseq2_dir}/{Sys.Date()}_deg_count.pdf"), 
      width=16, height=5)
  m <- ComplexHeatmap::make_comb_mat(deg_gene)
  p <- ComplexHeatmap::UpSet(m, pt_size=grid::unit(2, "mm"), 
        comb_order = order(ComplexHeatmap::comb_size(m), decreasing = T))
  ComplexHeatmap::draw(p)
  while(dev.cur() != 1) dev.off()
  
} else {
  print("use LRT result as DEGs")
  # LRT test
  deseq_lrt <- DESeqDataSetFromMatrix(
    countData = counts, colData = col_data, design = ~ contrast) %>%
    DESeq(test = 'LRT', reduced = ~ 1)
  # get LRT result
  lrt_result <- results(deseq_lrt) %>% 
    as_tibble(rownames='symbol')
  # save LRT
  write_xlsx(lrt_result,
             str_glue("{deseq2_dir}/{Sys.Date()}_lrt_result.xlsx"))
  
  deg_uni <- lrt_result %>%
    filter(abs(log2FoldChange) > log2(deg_fc),
           padj < deg_padj) %>% 
    pull(symbol) %>% 
    unique() %>% 
    # filter by tpm
    {if(exists("tpm_filter")) {
      intersect(., tpm_filter$symbols) } else .}
}

print(str_glue("Number of deg: {length(deg_uni)}"))
```

# DEG heatmap
```{r}
# prepare deg heatmap data
if(exists("tpm")) {
  print("deg heatmap use tpm")
  dat <- tpm %>% 
    filter(symbol %in% deg_uni) %>% 
    column_to_rownames("symbol") %>% 
    list() %>% set_names("tpm")
} else {
  print("deg heatmap use vst transformed counts")
  dat <- vst_mat %>% 
    as_tibble(rownames="symbol") %>% 
    filter(symbol %in% deg_uni) %>% 
    filter(!is.na(symbol)) %>% 
    column_to_rownames("symbol")%>% 
    list() %>% set_names("vst") }

# gene cluster annotation
# anno_row <- pattern$df %>% 
#   mutate(genes=NULL, cluster=str_glue("C{cluster}"))
anno_col <- sample[, c("sample_name","contrast")] %>% 
  column_to_rownames("sample_name")

# save deg heatmap
p <- dat[[1]] %>% 
  pheatmap::pheatmap(
    name = names(dat), scale = "row", border_color = NA,
    col = colorRampPalette(c("#377eb8", "#f7f7f7", "#e41a1c"))(100),
    cluster_rows = T, cluster_cols = F,
    annotation_col = anno_col, # annotation_row = anno_row, 
    show_rownames = F, show_colnames = T, angle_col = 45,
    filename = str_glue("{deseq2_dir}/{Sys.Date()}_deg_heatmap.pdf"),
    width = ceiling((nrow(col_data)-1)/2), 
    height = ceiling((nrow(col_data)-1)/2),
    main = str_glue("DEG heatmap (N={nrow(dat[[1]])})") )
# save heatmap data
p_data <- dat[[1]] %>% 
  # .[p$tree_row$order, p$tree_col$order] %>% 
  .[p$tree_row$order, ] %>% 
  as_tibble(rownames="symbol") %>% 
  list() %>% set_names(names(dat))
write_xlsx(p_data, str_glue("{deseq2_dir}/{Sys.Date()}_deg_heatmap.xlsx"))
```


# Save image
```{r}
if(save_Rdata) {
  save.image(str_glue("{deseq2_dir}/{Sys.Date()}_DESeq2.RData"))
  }

# load data
# load(str_glue("{deseq2_dir}/2024-06-17_DESeq2.RData"))
```


# Plot individuals
```{r, eval=F}
genes_roi <- read_xlsx("uniprotkb_family_protein_kinase_superfa_2025_04_26.xlsx") %>% 
  pull(`Gene Names`) %>% 
  map_chr(\(x) str_split(x, " ", simplify=T) %>% .[1]) %>% 
  str_sort()
# genes_roi <- c("SRC","AXL","AMOTL2","MYC","CCN2","CCN1","FGFR1","FGFR2","YAP1",
#                "FGFR3","FGFR3","PDGFRA","PDGFRB","EGFR","ERBB2","ERBB3","ERBB4")

tpm <- read_excel("2025-03-12_norm_expression.xlsx", "tpm") %>% 
  filter(symbol %in% genes_roi) %>% 
  select(symbol, 
         starts_with("H358_P"), starts_with("ARS_24H"), 
         starts_with("ARS_48H"), starts_with("H358_R")) %>% 
  pivot_longer(!symbol, names_to="sample", values_to="tpm") %>% 
  separate_wider_delim(sample, delim="#", names=c("contrast", "rep"), cols_remove=F) %>% 
  print()

plot <- tpm %>% 
  mutate(contrast=factor(contrast, c(
    "H358_P","ARS_24H","ARS_48H","H358_R"))) %>% 
  ggplot(aes(contrast, tpm)) +
  geom_jitter(shape=21, color="transparent", width = 0.25) +
  facet_wrap(~ symbol, scales = "free", ncol = 4) +
  labs(x = "", y = "TPM") +
  theme_bw(base_size = 8) +
  theme(axis.text.x = element_text(angle=90, vjust = 0.5, hjust = 1), 
        legend.position = "none")

ggsave(str_glue("{Sys.Date()}_tpm_plot.pdf"), 
          plot, 
          height = 2*ceiling(length(unique(tpm$symbol))/4), 
          width = 8, limitsize=F)
```

# two groups crossing plot
```{r}
pathway <- c("HALLMARK_MYC_TARGETS_V1", "HALLMARK_MYC_TARGETS_V2")
msigdb <- msigdbr::msigdbr(
    species = if_else(species=="hs", "Homo sapiens", "Mus musculus"))
myc_target_genes <- list(
    ## H
    Hallmark = filter(msigdb, gs_cat == "H")
    ## GO
    # GOBP = filter(msigdb, gs_subcat == "GO:BP")
    # GOMF = filter(msigdb, gs_subcat == "GO:MF"),
    # GOCC = filter(msigdb, gs_subcat == "GO:CC"),
    ## cannonical pathway
    # KEGG = filter(msigdb, gs_subcat == "CP:KEGG"),
    # PID = filter(msigdb, gs_subcat == "CP:PID"),
    # BIOCARTA = filter(msigdb, gs_subcat == "CP:BIOCARTA"),
    # WikiPathway = filter(msigdb, gs_subcat == "CP:WIKIPATHWAYS"),
    # Reactome = filter(msigdb, gs_subcat == "CP:REACTOME")
  ) %>% 
    map(\(x) dplyr::select(x, gs_id=gs_exact_source, gs_name, gene_symbol) %>% 
          mutate(gs_id=ifelse(gs_id=="", gs_name, gs_id))) %>% 
  list_rbind() %>% 
  filter(gs_id %in% pathway) %>% 
  pull(gene_symbol) %>% 
  intersect(deg_list[[1]]$symbol)


compares <- deg_list[c("Kelly.200nM.4h_vs_Kelly.0nM.16h", "SHEP.200nM.4h_vs_SHEP.0nM.16h")]
compare_names <- c("Kelly.200nM.4h", "SHEP.200nM.4h") # Kelly first, then SHEP

compares <- deg_list[c("Kelly.200nM.16h_vs_Kelly.0nM.16h", "SHEP.200nM.16h_vs_SHEP.0nM.16h")]
compare_names <- c("Kelly.200nM.16h", "SHEP.200nM.16h") # Kelly first, then SHEP

compares <- deg_list[c("Kelly.40nM.4h_vs_Kelly.0nM.16h", "SHEP.40nM.4h_vs_SHEP.0nM.16h")]
compare_names <- c("Kelly.40nM.4h", "SHEP.40nM.4h") # Kelly first, then SHEP

compares <- deg_list[c("Kelly.40nM.16h_vs_Kelly.0nM.16h", "SHEP.40nM.16h_vs_SHEP.0nM.16h")]
compare_names <- c("Kelly.40nM.16h", "SHEP.40nM.16h") # Kelly first, then SHEP


limits <- c(-2, 2)
compares %>% 
  set_names(compare_names) %>% 
  list_rbind(names_to="compare") %>% 
  filter(symbol %in% myc_target_genes) %>%
  mutate(geneset=ifelse(symbol %in% myc_target_genes, "MYC targets", NA)) %>% 
  mutate(log2FoldChange=ifelse(log2FoldChange > limits[2], limits[2], 
                        ifelse(log2FoldChange < limits[1], limits[1], log2FoldChange))) %>% 
  pivot_wider(id_cols=c(symbol, geneset), 
              names_from=c(compare), 
              values_from=log2FoldChange) %>% 
  ggplot(aes(!!as.name(compare_names[1]), !!as.name(compare_names[2]))) +
  # geom_point(aes(color=geneset), color="grey80") +
  geom_point(color="red3") +
  geom_hline(yintercept=c(-0.1, 0.1), linetype=2, color="grey20") +
  geom_vline(xintercept=c(-0.1, 0.1), linetype=2, color="grey20") +
  coord_cartesian(xlim=c(limits[1], limits[2]), ylim=c(limits[1], limits[2])) +
  labs(x=str_glue("Log2FC of {compare_names[1]} to DMSO"),
       y=str_glue("Log2FC of {compare_names[2]} to DMSO")) +
  theme_bw()
ggsave2(str_glue("{Sys.Date()}_compare_myc_targets_between_celltype_crossing_lfc.pdf"),
        width=5, height=5)


compares %>% 
  set_names(compare_names) %>% 
  list_rbind(names_to="compare") %>% 
  # filter(log2FoldChange > 0) %>%
  mutate(dir=ifelse(log2FoldChange>0, "up", "down")) %>% 
  mutate(geneset=ifelse(symbol %in% myc_target_genes, "MYC targets", NA)) %>% 
  filter(!is.na(geneset)) %>% 
  ggplot(aes(compare, log2FoldChange, color=compare, size=-log10(padj))) +
  ggbeeswarm::geom_quasirandom(show.legend=T) +
  scale_size_continuous(range=c(0.5, 2)) +
  ggpubr::stat_compare_means(comparisons=list(c(compare_names[1], compare_names[2])),
                             method="wilcox.test") +
  facet_wrap(~ dir, scales="free") +
  scale_x_discrete(limits = rev) +
  labs(y="log2FoldChange of HALLMARK_MYC_TARGETS") +
  # geom_boxplot(outliers=F) +
  theme_bw()
ggsave2(str_glue("{Sys.Date()}_compare_myc_targets_between_celltype_scatter_lfc.pdf"),
        width=6, height=4)

limits <- c(-200, 200)
expr_norm$tpm %>% 
  filter(symbol %in% myc_target_genes) %>% 
  # transmute(symbol=symbol, 
  #           `Kelly.200nM.4h`=Kelly.200nM.4h - Kelly.0nM.16h, 
  #           `SHEP.200nM.4h`=SHEP.200nM.4h - SHEP.0nM.16h)
  pivot_longer(!symbol, names_to="sample_name") %>% 
  left_join(sample) %>% 
  filter(contrast %in% c(compare_names, "Kelly.0nM.16h", "SHEP.0nM.16h")) %>% 
  reframe(value=mean(value), .by=c(contrast, cell, symbol)) %>% 
  pivot_wider(id_cols=c(symbol), names_from=contrast, values_from=value) %>% 
  transmute(symbol=symbol,
            !!compare_names[1] := !!as.name(compare_names[1]) - Kelly.0nM.16h,
            !!compare_names[2] := !!as.name(compare_names[2]) - SHEP.0nM.16h) %>% 
  mutate(!!compare_names[1] := ifelse(!!as.name(compare_names[1]) > limits[2], limits[2], 
                               ifelse(!!as.name(compare_names[1]) < limits[1], limits[1], 
                                      !!as.name(compare_names[1])))) %>% 
  mutate(!!compare_names[2] := ifelse(!!as.name(compare_names[2]) > limits[2], limits[2], 
                              ifelse(!!as.name(compare_names[2]) < limits[1], limits[1], 
                                     !!as.name(compare_names[2])))) %>% 
  ggplot(aes(!!as.name(compare_names[1]), !!as.name(compare_names[2]))) +
  geom_point(color="red3", size=0.75) +
  geom_hline(yintercept=c(-25, 25), linetype=2, color="grey20") +
  geom_vline(xintercept=c(-25, 25), linetype=2, color="grey20") +
  coord_cartesian(xlim=c(limits[1], limits[2]), ylim=c(limits[1], limits[2])) +
  labs(x=str_glue("TPM difference of {compare_names[1]} to DMSO"),
       y=str_glue("TPM difference of {compare_names[2]} to DMSO")) +
  theme_bw()
ggsave2(str_glue("{Sys.Date()}_compare_myc_targets_between_celltype_scatter_tpm_difference_to_DMSO.pdf"),
        width=5, height=5)

```

