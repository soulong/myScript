---
title: "CellProfiler Analysis"
format: html
editor_options: 
  chunk_output_type: console
---

## load packages
```{r}
# rstudioapi::getActiveDocumentContext()$path |>
#   dirname() |>
#   setwd()
setwd("D:\\Postdoc_Data\\Project_cmpd_screen\\2024-03-24_SURF_TAU-PTEN_L6000v2_FX")

# load packages
library(tidyverse)
library(cowplot)
# library(lemon)
library(ggh4x)
library(ggridges)
```

## read cellprofiler db
```{r}
# load function
source("D:/Script/R_functions/read_sqlite.R")

# read db
raw <- read_sqlite("cp_result.db",
                   classify_table = NULL,
                   remove_object_prefix = T)
# raw <- map("cp_result.db", read_sqlite) %>% 
#   bind_rows(.id="Metadata_source")

glimpse(raw$image)
glimpse(raw$objects)
```


## define magnification
```{r}
magification <- "20x"
image_width <- unique(raw$image$Image_Width)

# unit: um
objective_view <- c("100x" = 133, "60x" = 221, "20x" = 600)
length_per_pixel <- objective_view[magification] * (1/image_width)
print(str_glue("per pixel length: {round(length_per_pixel, 3)} uM"))
```

## metadata position
```{r}
position_meta <- read_csv("position_metadata.csv") %>% 
  # some rows were skipped cause incorrect focus
  filter(!is.na(`P Index`)) %>% 
  select(Metadata_prefix = prefix, 
           Metadata_position = `P Index`,
           Metadata_position_name = `Position Name`)

if(is.na(position_meta$Metadata_position_name[1])) {
  # you should edit position data here if no position name
  print("no position name found, should edit it here")
  
  # position_meta <- position_meta %>%
  #   mutate(Metadata_well = case_when(
  #     Metadata_position %in% 1:20 ~ "SURF-EBFP2",
  #     Metadata_position %in% 21:40 ~ "SURF-mIFP2",
  #     Metadata_position %in% 41:60 ~ "cpSURF-EBFP2",
  #     Metadata_position %in% 61:80 ~ "cpSURF-mIFP",
  #     Metadata_position %in% 81:100 ~ "SURF-EBFP2+GRB2-mIFP",
  #     Metadata_position %in% 101:120 ~ "SURF-mIFP+GRB2-EBFP2",
  #     Metadata_position %in% 121:140 ~ "cpSURF-EBFP2+GRB2-mIFP",
  #     Metadata_position %in% 141:160 ~ "cpSURF-mIFP+GRB2-EBFP2"
  #   ) %>% factor(c("SURF-EBFP2","cpSURF-EBFP2","SURF-mIFP2","cpSURF-mIFP",
  #                  "SURF-EBFP2+GRB2-mIFP","cpSURF-EBFP2+GRB2-mIFP",
  #                  "SURF-mIFP+GRB2-EBFP2","cpSURF-mIFP+GRB2-EBFP2")),
  #   Metadata_field = Metadata_position)
  
  position_meta <- expand_grid(row=LETTERS[1:8], col=2:11) %>% 
    unite("well", row, col, remove = F, sep="") %>% 
    mutate(row_image_order=ifelse(row %in% c("A","C","E","G"), "lr", "rl")) %>% 
    mutate(row_image_reorder=ifelse(row_image_order=="lr", col, 24-col)) %>% 
    arrange(row, row_image_reorder) %>% 
    select(Metadata_well=well) %>% 
    expand_grid(Metadata_field=1:5) %>% 
    bind_cols(Metadata_position=1:400) %>% 
    expand_grid(Metadata_prefix=unique(raw$image$Metadata_prefix), .)

# } else {
#   # get position name data
#   print("extract well use position name")
#   position_meta <- position_meta %>% 
#     # by well format
#     separate_wider_delim(., Metadata_position_name, 
#                          "#",
#                          names = c("Metadata_well", 
#                                    "Metadata_field"),
#                          cols_remove = F) %>% 
#     mutate(Metadata_field=as.integer(Metadata_field))
}

glimpse(position_meta)
```

## metadata compound
```{r}
# kinase inhibitor
cmpd <- "L6000-Natural product 2 1354 cpds.xlsx" %>% 
  readxl::read_xlsx(sheet = "Compound List") %>% 
  transmute(Metadata_Plate=Plate, 
            Metadata_well=str_c(str_to_upper(Row), Col, sep=""),
            Metadata_ID=ID,
            Metadata_Name=MOLENAME,
            Metadata_Target=Target,
            Metadata_Pathway=Pathways)

print(unique(raw$image$Metadata_prefix))

# add plate prefix for imaging data pre-processing
print(unique(raw$image$Metadata_prefix))
plate_match <- tibble(Metadata_Plate=c(unique(cmpd$Metadata_Plate)),
                      Metadata_prefix=c(str_c("plate-",1:5)))
plate_match

cmpd <- right_join(plate_match, cmpd,
                   relationship = "many-to-many")

glimpse(cmpd)
```

## add ctrl wells
```{r}
ctrl_wells <- tibble(
  Metadata_well=c(str_c(LETTERS[2:15], 2)),
  Metadata_ID=rep("DMSO", 14),
  Metadata_Name=rep("DMSO", 14) ) %>% 
  expand_grid(
    distinct(cmpd[, c("Metadata_Plate","Metadata_prefix")]), 
    .)

cmpd <- bind_rows(cmpd, ctrl_wells)
```


## tidy image
```{r}
# glimpse(raw$image)
Image <- raw$image %>% 
  select(!c(starts_with("Image_Count_"),
            matches("Image_Intensity_Percentile_[25]_.*"))) %>% 
  rename_with(\(x) str_replace(x, "Intensity_Percentile_1", "bg"))

# Image <- Image %>% 
#   mutate(Metadata_prefix=factor(Metadata_prefix,
#                                 str_c("P",1:14))) %>% 
#   mutate(Metadata_well=factor(Metadata_well,
#                               crossing(x=LETTERS[1:16], y=1:24) %>% 
#                                 unite("well", x, y, sep="") %>% 
#                                 pull(well)))

# merge with position meta
Image <- Image %>% 
  # right_join(position_meta, ., 
  #            by=join_by(Metadata_prefix, Metadata_position)) %>%
  right_join(cmpd, .,
             by=join_by(Metadata_prefix, Metadata_well)) %>% 
  select(!c(Metadata_directory, Metadata_stack, 
            Metadata_timepoint, Image_Width))

glimpse(Image)
```

## tidy cell
```{r}
# glimpse(raw$objects)
cell <- raw$objects[[1]] %>% 
  select(!any_of(c("ObjectNumber",
                   "Number_Object_Number"))) %>% 
  right_join(Image, ., 
             by=join_by(ImageNumber)) %>% 
  mutate(AreaShape_Pixel=AreaShape_Area, .before=AreaShape_Area) %>% 
  # scale pixel to actual length
  mutate(across(matches("(Area)"), \(x) x * (length_per_pixel)^2)) %>% 
  mutate(across(matches(
    "(Diameter)|(AxisLength)|(Radius)|(Perimeter)$"),
    \(x) x * length_per_pixel))

# cell <- cell %>% 
#   mutate(Metadata_prefix=factor(Metadata_prefix,
#                                 str_c("P",1:14))) %>% 
#   mutate(Metadata_well=factor(Metadata_well,
#                               crossing(x=LETTERS[1:16], y=1:24) %>% 
#                                 unite("well", x, y, sep="") %>% 
#                                 pull(well))) %>% 
#   mutate(Metadata_lib=ifelse(is.na(Metadata_name), "DMSO", "Library"),
#          .after = Metadata_well)

glimpse(cell)

# cell <- filter(cell, !is.na(Metadata_prefix))
```

## subtract background
```{r}
# get all channel names
bg_channels <- colnames(Image) %>% 
  str_subset("Image_bg") %>% 
  str_replace_all("Image_bg_", "") 

subtract_bg_by_prefix <- T

if(subtract_bg_by_prefix) {
  # by using mean measurement value from each plate
  bg_intensity <- Image %>% 
    select(any_of(c("Metadata_prefix", 
                    str_subset(colnames(Image), "Image_bg")))) %>% 
    rename_with(~ str_c(.x, "_mean_by_prefix"), !Metadata_prefix) %>%
    reframe(across(everything(), 
                   ~ median(.x, na.rm=T) %>% round()),
            .by=Metadata_prefix)
} else {
  # by using a single mean value from total bg image measurement
  bg_intensity <- Image %>% 
    select(any_of(str_subset(colnames(Image), "Image_bg"))) %>% 
    rename_with(~ str_c(.x, "_mean_by_prefix"), everything()) %>%
    reframe(across(everything(), 
                   ~ median(.x, na.rm=T) %>% round()) ) %>% 
    expand_grid(tibble(
      Metadata_prefix=unique(Image$Metadata_prefix))
      )
}

# # or by manual defined
# bg_intensity <- c(
#   "Image_bg_ch1_mean_by_prefix" = 1570,
#   "Image_bg_ch2_mean_by_prefix" = 1565,
#   "Image_bg_ch3_mean_by_prefix" = 1577) %>% 
#   enframe() %>% 
#   pivot_wider(names_from = name, values_from = value) %>% 
#   expand_grid(tibble(Metadata_prefix=unique(Image$Metadata_prefix)))


# process one channel each time
Image <- left_join(Image, bg_intensity, by = join_by(Metadata_prefix))
cell <- left_join(cell, bg_intensity, by = join_by(Metadata_prefix)) %>% 
  relocate(starts_with("Image_bg_"), .after = starts_with("Image_Intensity_"))

for(ch in bg_channels) {
  # subtract image bg
  Image[[str_glue("Image_Intensity_MeanIntensity_{ch}")]] <- 
    (Image[[str_glue("Image_Intensity_MeanIntensity_{ch}")]] - 
       Image[[str_glue("Image_bg_{ch}_mean_by_prefix")]])
    # map_int(~ max(0, .x, na.rm=T))
  
  # subtract object bg
  cell[[str_glue("Image_Intensity_MeanIntensity_{ch}")]] <- 
    (cell[[str_glue("Image_Intensity_MeanIntensity_{ch}")]] - 
       cell[[str_glue("Image_bg_{ch}_mean_by_prefix")]])
    # map_int(~ max(0, .x, na.rm=T))
  
  cell[[str_glue("Intensity_IntegratedIntensity_{ch}")]] <- 
    (cell[[str_glue("Intensity_IntegratedIntensity_{ch}")]] - 
       cell[[str_glue("Image_bg_{ch}_mean_by_prefix")]] * 
       cell[[str_glue("AreaShape_Pixel")]])
    # map_int(~ max(0, .x, na.rm=T))
  
  cell[[str_glue("Intensity_MeanIntensity_{ch}")]] <- 
    (cell[[str_glue("Intensity_MeanIntensity_{ch}")]] - 
       cell[[str_glue("Image_bg_{ch}_mean_by_prefix")]])
    # map_int(~ max(0, .x, na.rm=T))
}

glimpse(bg_intensity)
# glimpse(Image)
# glimpse(cell)
```


## modify object
```{r}
if(T) {
  cell <- cell %>% 
    mutate(Intensity_MeanIntensity_ch12=
             Intensity_MeanIntensity_ch1/
             Intensity_MeanIntensity_ch2)
}

glimpse(cell)
```


##---------------------------------
## plot setting
```{r}
obj <- "cell"
grouping_vars <- c("Metadata_prefix", "Metadata_ID", "Metadata_Name")

axis_var <- "Metadata_well"
fill_var <- "Metadata_well"
fact_var <- "Metadata_prefix" # NA mean no additional facet beside channel

show_legend <- F

# get intensity channels
channels <- eval(parse(text=obj)) %>% 
  colnames() %>% 
  str_subset(str_glue("^Intensity_MeanIntensity_.*")) %>% 
  str_replace_all("Intensity_MeanIntensity_", "")
print(channels)
```

## bg intensity over wells
```{r}
p <- Image %>% 
  pivot_longer(matches("Image_bg_ch\\d$"), 
               names_to = "channel", 
               values_to = "value") %>% 
  ggplot(aes(!!as.name(axis_var),
             value,
             color = !!as.name(fill_var))) +
  geom_point(size=0.25, show.legend = show_legend) +
  # geom_pointrange(aes(
  #   ymin=count_per_field_mean - count_per_field_se, 
  #   ymax=count_per_field_mean + count_per_field_se), 
  #   size=0.25, show.legend = show_legend) +
  { if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      # rows=vars(Metadata_vector, Metadata_conc),
      rows = vars(!!as.name(fact_var)),
      cols = vars(channel),
      scales = "fixed",
      axes  = "all") } } +
  labs(y="Intensity at 1% pixel over Wells", x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_Image_bg_intensity.pdf"),
        p,
        width=length(unique(Image[[axis_var]]))*0.06*length(bg_channels), 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(Image[[fact_var]]))),
        limitsize = F)
```

## count per field
```{r}
# count per filed at well level
count_per_field_per_well <- cell %>% 
  reframe(count_per_field = n(),
          .by = all_of(
            c(grouping_vars, "Metadata_well", "Metadata_field"))) %>% 
  reframe(across(count_per_field, 
                 list(mean=mean, sd=sd)),
          n_field=n(),
          .by =c(grouping_vars, "Metadata_well")) %>%
  mutate(count_per_field_se=count_per_field_sd/sqrt(n_field),
         .before = n_field)

glimpse(count_per_field_per_well)


# plot
p <- count_per_field_per_well %>% 
  ggplot(aes(!!as.name(axis_var),
             count_per_field_mean,
             color = !!as.name(fill_var))) +
  geom_pointrange(aes(
    ymin=count_per_field_mean - count_per_field_se, 
    ymax=count_per_field_mean + count_per_field_se), 
    size=0.25, show.legend = show_legend) +
  { if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      # rows=vars(Metadata_vector, Metadata_conc),
      rows=vars(!!as.name(fact_var)),
      scales = "fixed",
      axes  = "all") } } +
  labs(y="Mean Count per Field", x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_count_per_field.pdf"),
        p,
        width=length(unique(count_per_field_per_well[[axis_var]]))*0.06, 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(count_per_field_per_well[[fact_var]]))),
        limitsize = F)
```


## areaShape
```{r}
keys <- c("AreaShape_EquivalentDiameter", "AreaShape_Eccentricity")
key_names <- c("Diameter", "Eccentricity")

for(i in seq_along(keys)) {
  key <- keys[i]
  key_name <- key_names[i]
  print(str_glue("process {key}"))
  
  mean_per_well <- eval(parse(text=obj)) %>% 
    reframe(across(!!as.name(key), 
                   list(mean=mean, sd=sd)),
            n_cell=n(),
            "{key}_se" := !!as.name(str_glue("{key}_sd"))/sqrt(n_cell),
            .by = all_of(c(grouping_vars, "Metadata_well"))) %>% 
    rename_with(~ str_replace_all(.x, key, key_name))
  # glimpse(mean_per_well)
  # assign variable for later use
  assign(str_glue("mean_{key_name}_per_well"),
         mean_per_well)
  
  # plot
  p <- mean_per_well %>% 
  ggplot(aes(!!as.name(axis_var),
             !!as.name(str_glue("{key_name}_mean")),
             # group = !!as.name(fill_var),
             color = !!as.name(fill_var))) +
  geom_pointrange(aes(
    ymin=!!as.name(str_glue("{key_name}_mean")) - 
      !!as.name(str_glue("{key_name}_se")), 
    ymax=!!as.name(str_glue("{key_name}_mean")) +
      !!as.name(str_glue("{key_name}_se"))),
    size=0.25, show.legend = show_legend) +
  { if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      # rows=vars(Metadata_vector, Metadata_conc),
      rows=vars(!!as.name(fact_var)),
      axes  = "all") } } +
  labs(y=key_name, x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_{key_name}.pdf"),
        p,
        width=length(unique(mean_per_well[[axis_var]]))*0.06, 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(mean_per_well[[fact_var]]))),
        limitsize = F)
}
```


## mean intenstiy
```{r}
key <- "Intensity_MeanIntensity_"
key_name <- "MeanIntensity"
mean_intensity_per_well <- eval(parse(text=obj)) %>% 
  pivot_longer(all_of(str_c(key, channels)),
               names_to = "channel", 
               names_prefix = key,
               values_to = "intensity") %>% 
  reframe(across(intensity, 
                 list(mean = ~ mean(.x, na.rm = T), 
                      sd = ~ sd(.x, na.rm = T))),
          n_field=n(),
          intensity_se=intensity_sd/sqrt(n_field),
          .by = all_of(c(grouping_vars, 
                         "Metadata_well", 
                         "channel")))
# glimpse(mean_intensity_per_well)

# filter by object-channel
if(F) {
  mean_intensity_per_well <- mean_intensity_per_well %>% 
    filter((Metadata_object=="app" & channel=="ch2") |
             (Metadata_object=="notch" & channel=="ch1") |
             (Metadata_object=="gal4dbd" & channel=="ch3"))
}


# plot
p <- mean_intensity_per_well %>% 
  ggplot(aes(!!as.name(axis_var),
             intensity_mean,
             color = !!as.name(fill_var))) +
  geom_pointrange(aes(
    ymin=intensity_mean - intensity_se, 
    ymax=intensity_mean + intensity_se),
    size=0.25, show.legend = show_legend) +
  # scale_y_continuous(trans = scales::transform_pseudo_log()) +
  {if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      axes  = "all")
  } else {
    ggh4x::facet_grid2(
      # rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      axes  = "all")
  }} +
  labs(y=key_name, x="") +
  # coord_cartesian(ylim = c(0, 5)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_{key_name}.pdf"),
        p,
        width=length(unique(mean_intensity_per_well[[axis_var]]))*0.06*
          length(unique(mean_intensity_per_well[["channel"]])), 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(mean_intensity_per_well[[fact_var]]))),
        limitsize = F) 

```

## mean intensity ratio
```{r}
# get ratio of ch1/ch2 at cell level
if(T) {
  cell <- cell %>% 
    mutate(Intensity_ratio_ch12=
             Intensity_MeanIntensity_ch1/
             Intensity_MeanIntensity_ch2)
  
  mean_intensity_ratio_per_well <- cell %>% 
    pivot_longer(
      starts_with("Intensity_ratio_"),
      names_to = "channel", 
      values_to = "ratio") %>% 
    reframe(across(ratio, list(mean=mean, sd=sd)),
            n=n(),
            ratio_se=ratio_sd/sqrt(n),
            .by = all_of(c(grouping_vars, "Metadata_well", "channel")))
  # glimpse(mean_intensity_ratio_per_well)
  
  # plot
  p <- mean_intensity_ratio_per_well %>% 
    ggplot(aes(!!as.name(axis_var),
               ratio_mean,
               color = !!as.name(fill_var))) +
    geom_pointrange(aes(
      ymin=ratio_mean - ratio_se, 
      ymax=ratio_mean + ratio_se),
      size=0.25, show.legend = show_legend) +
    scale_y_continuous(trans = scales::transform_pseudo_log()) +
    {if(!is.na(fact_var)) {
      ggh4x::facet_grid2(
        rows=vars(!!as.name(fact_var)),
        cols=vars(channel),
        # scales = "free", independent = "x", 
        axes  = "all")
    } else {
      ggh4x::facet_grid2(
        # rows=vars(!!as.name(fact_var)),
        cols=vars(channel),
        axes  = "all")
    }} +
    labs(y="Intensity Ratio", x="") +
    coord_cartesian(ylim = c(0, 3)) +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.title = element_blank(),
          legend.key.size = unit(1.5, "mm"))
  ggsave2(str_glue("{Sys.Date()}_{obj}_MeanIntensityRatio.pdf"),
          p,
          width=length(unique(mean_intensity_ratio_per_well[[axis_var]]))*0.06*
            length(unique(mean_intensity_ratio_per_well[["channel"]])), 
          height=ifelse(
            is.na(fact_var), 
            2,
            2*length(unique(mean_intensity_ratio_per_well[[fact_var]]))),
          limitsize = F) 
}
```


## sum intensity per well
```{r}
key <- "Intensity_IntegratedIntensity_"
key_name <- "IntegratedIntensity"

sum_intensity_per_well <- eval(parse(text=obj)) %>% 
  pivot_longer(contains(key), 
               names_to = "channel",
               names_prefix = key,
               values_to = "intensity") %>% 
  # sum of FOV
  reframe(across(intensity, ~ sum(.x, na.rm = T)),
          .by = all_of(c(grouping_vars, 
                         "Metadata_well", "Metadata_field",
                         "channel"))) %>% 
  # mean of fields
  reframe(across(intensity, 
                 list(mean = ~ mean(.x, na.rm = T),
                      sd = ~ sd(.x, na.rm = T))),
          n_field = n(),
          intensity_se = intensity_sd / sqrt(n_field),
          .by = all_of(c(grouping_vars, 
                         "Metadata_well",
                         "channel")))
# glimpse(sum_intensity_per_well)

# filter by object-channel
if(F) {
  sum_intensity_per_well <- sum_intensity_per_well %>% 
    filter((Metadata_object=="app" & channel=="ch2") |
             (Metadata_object=="notch" & channel=="ch1") |
             (Metadata_object=="gal4dbd" & channel=="ch3"))
}

# plot
p <- sum_intensity_per_well %>% 
  ggplot(aes(!!as.name(axis_var),
             intensity_mean,
             # group = !!as.name(fill_var),
             color = !!as.name(fill_var))) +
  geom_pointrange(aes(
    ymin=intensity_mean - intensity_se, 
    ymax=intensity_mean + intensity_se),
    size=0.25, show.legend = show_legend) +
  { if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      cols=vars(channel),
      rows=vars(!!as.name(fact_var)),
      axes  = "all") } } +
  labs(y=key_name, x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_{key_name}.pdf"),
        p,
        width=length(unique(sum_intensity_per_well[[axis_var]]))*0.06, 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(sum_intensity_per_well[[fact_var]]))),
        limitsize = F)
```

## granularity
```{r}
granularity_subset <- 2:5
key <- "Granularity_"
key_name <- "Granularity"

if(any(str_detect(key, colnames(eval(parse(text=obj)))))) {
  
  # granularity per field
  mean_granularity_per_well <- eval(parse(text=obj)) %>% 
    pivot_longer(
      contains(key),
      names_to = c("granularity_order", "channel"), 
      names_pattern = "Granularity_(.+)_(.+)$",
      # names_prefix = "Intensity_MeanIntensity_",
      values_to = "granularity_value") %>% 
    filter(granularity_order %in% granularity_subset) %>% 
    mutate(granularity_order=str_c("Granularity_", granularity_order)) %>% 
    reframe(mean=mean(granularity_value, na.rm=T),
            sd=sd(granularity_value, na.rm=T),
            se=sd/sqrt(n()),
            .by=c(all_of(c(plate_var, axis_var, color_var,
                           "granularity_order", "channel"))))
  
  # plot
  mean_granularity_per_well %>% 
    ggplot(aes(!!as.name(axis_var),
               mean, 
               color = !!as.name(color_var))) +
    geom_pointrange(aes(ymin=mean-se, ymax=mean+se), 
                    size=0.25, show.legend = show_legend) +
    {if(!is.na(fact_var)) {
      ggh4x::facet_grid2(cols=vars(granularity_order), 
                         rows=vars(!!as.name(fact_var)),
                         scales="fixed",
                         # independent="y",
                         axes = "all") 
    } else {
      ggh4x::facet_grid2(cols=vars(granularity_order), 
                         # rows=vars(!!as.name(fact_var)),
                         scales="fixed",
                         # independent="y",
                         axes = "all")
    } }+
    labs(x="", y=key_name) +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top")
  ggsave2(str_glue("{Sys.Date()}_{obj}_granularity.pdf"),
          # width=(colnames(granularity_data) %>% 
          #          str_subset("Granularity_") %>% 
          #          length())*3, 
          # height=length(unique(cellRegion[[fact_var]]))*1.5,
          width=length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
            length(unique(mean_granularity_per_well[[granularity_order]])), 
          height=ifelse(
            is.na(fact_var), 
            2.5,
            2.5*length(unique(mean_granularity_per_well[[fact_var]]))),
          limitsize = F) 
}
```

## SAVE per well
```{r}
cell_summary <- 
  list(count_per_field_per_well %>% 
         select(!count_per_field_sd),
       mean_Diameter_per_well %>% 
         select(!Diameter_sd),
       mean_Eccentricity_per_well %>% 
         select(!Eccentricity_sd),
       mean_intensity_per_well %>% 
         pivot_wider(id_cols = starts_with("Metadata_"),
                     names_from = channel,
                     values_from = c(intensity_mean, intensity_se),
                     names_glue = "{channel}_Mean_{.value}"),
       sum_intensity_per_well %>% 
         pivot_wider(id_cols = starts_with("Metadata_"),
                     names_from = channel,
                     values_from = c(intensity_mean, intensity_se),
                     names_glue = "{channel}_Sum_{.value}") ) %>%
  {if(exists("mean_Intensity_ratio_per_well")) {
    c(., mean_intensity_ratio_per_well %>% 
        mutate(channel=str_replace_all(channel, "Intensity_ratio_", "")) %>% 
        pivot_wider(id_cols = starts_with("Metadata_"),
                    names_from = channel,
                    values_from = c(ratio_mean, ratio_se),
                    names_glue = "{channel}_Ratio_{.value}") %>% 
        list())
  } else {.} } %>% 
  reduce(left_join) %>% 
  relocate(starts_with("n_"), .after = starts_with("Metadata_")) %>% 
  relocate(ends_with("_mean"), .after = starts_with("n_")) %>% 
  relocate(ends_with("_se"), .after = starts_with("_mean"))
glimpse(cell_summary)

writexl::write_xlsx(
  list(#cell=cell,
       cell_summary=cell_summary),
  str_glue("{Sys.Date()}_cell_summary.xlsx"))
```

## sum intensity ratio per well
```{r}
# for multiplexed screen
# used for compare change of multiple targets in same well
if(F) {
  sum_intensity_intra_ratio <- cell_summary %>% 
    pivot_wider(id_cols = starts_with("Metadata_"), 
                names_from = Metadata_object,
                values_from = contains("SUM_intensity_mean")) %>% 
    mutate(ch23_SUM_intensity_mean_app = ch2_SUM_intensity_mean_app/
             ch3_SUM_intensity_mean_gal4dbd,
           ch13_SUM_intensity_mean_notch = ch1_SUM_intensity_mean_notch/
             ch3_SUM_intensity_mean_gal4dbd) %>% 
    select(starts_with("Metadata_"), 
           ch23_SUM_intensity_mean_app, 
           ch13_SUM_intensity_mean_notch)
  
  # add to cell summary
  cell_summary <- sum_intensity_intra_ratio %>% 
    pivot_longer(c(ch23_SUM_intensity_mean_app, ch13_SUM_intensity_mean_notch),
                 names_to = c("item", "Metadata_object"),
                 names_pattern = "(.*_mean)_(.*)",
                 values_to = "intra_ratio") %>% 
    pivot_wider(names_from = item, values_from = intra_ratio) %>% 
    select(starts_with("Metadata_"), everything()) %>% 
    left_join(cell_summary, .)
  
  
  # plot
  p <- sum_intensity_intra_ratio %>% 
    pivot_longer(c(ch23_SUM_intensity_mean_app, 
                   ch13_SUM_intensity_mean_notch), 
                 names_to = "channel", 
                 values_to = "ratio") %>% 
    ggplot(aes(!!as.name(axis_var),
               ratio,
               # group = !!as.name(fill_var),
               color = !!as.name("Metadata_well"))) +
    geom_point(size=0.5, show.legend = F) +
    # geom_hline(aes(yintercept = -MAD), data=MAD_reformat,
    #            linetype=2, linewidth=0.25, color="grey50") +
    # geom_hline(aes(yintercept = MAD), data=MAD_reformat,
    #            linetype=2, linewidth=0.25, color="grey50") +
    # geom_pointrange(aes(
    #   ymin=!!as.name(str_glue("{key_name}_mean")) - 
    #     !!as.name(str_glue("{key_name}_se")), 
    #   ymax=!!as.name(str_glue("{key_name}_mean")) +
    #     !!as.name(str_glue("{key_name}_se"))),
    #   size=0.25, show.legend = show_legend) +
    { if(!is.na(fact_var)) {
      ggh4x::facet_grid2(
        cols=vars(channel),
        rows=vars(!!as.name(fact_var)),
        axes  = "all") } } +
    labs(y=key_name, x="") +
    # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.title = element_blank(),
          legend.key.size = unit(1.5, "mm"))
  ggsave2(str_glue("{Sys.Date()}_cell_intra_ratio.pdf"),
          p,
          width=length(unique(sum_intensity_intra_ratio[[axis_var]]))*0.06, 
          height=ifelse(
            is.na(fact_var), 
            2,
            2*length(unique(sum_intensity_intra_ratio[[fact_var]]))),
          limitsize = F)
  
}
```


##---------------------------------
## ratio to DMSO calculation
```{r}
per_plate_id <- c("Metadata_prefix")

# subset for calculate ratio
cell_summary_subset <- cell_summary %>% 
  select(starts_with("Metadata_"), ends_with("_mean")) %>% 
  rename_with(~ str_replace_all(.x, "_mean", ""))

# items for ratio
ratio_items <- colnames(cell_summary_subset) %>% 
  str_subset("Metadata_", negate = T)

# calculate mean for DMSO
cell_summary_subset_dmso <- cell_summary_subset %>% 
  filter(Metadata_Name == "DMSO") %>% 
  rename_with(~ str_c(.x, "_DMSO"), 
              !starts_with("Metadata_")) %>% 
  reframe(across(!starts_with("Metadata_"),
                 ~ mean(.x, na.rm=T)),
          .by = all_of(per_plate_id))
# glimpse(cell_summary_subset_dmso)

# get ratio for each item
cell_summary_ratio <- left_join(
  cell_summary_subset, cell_summary_subset_dmso)

# add constant value to minimize cal error
const <- 0
for(item in ratio_items) {
  cell_summary_ratio[[str_glue("{item}_DMSO_log2")]] <- 
    log2(cell_summary_ratio[[str_glue("{item}")]] / 
           cell_summary_ratio[[str_glue("{item}_DMSO")]] + const)
}
cell_summary_ratio <- cell_summary_ratio %>% 
  select(starts_with("Metadata_"), ends_with("_DMSO_log2"))

# calculate 3xMAD for DMSO
cell_summary_subset_dmso_3xMAD <- cell_summary_ratio %>% 
  filter(Metadata_Name == "DMSO") %>% 
  # rename_with(~ str_c(.x, "_DMSO"),
  #             !starts_with("Metadata_")) %>% 
  reframe(across(!starts_with("Metadata_"),
                 ~ mad(.x, na.rm=T)*3)) %>% 
  pivot_longer(everything()) %>% 
  deframe()
print(cell_summary_subset_dmso_3xMAD)

glimpse(cell_summary_ratio)
```

## ratio plot setting
```{r}
obj <- "cell_summary_ratio"

grouping_vars <- c("Metadata_prefix", "Metadata_ID", "Metadata_Name")

axis_var <- "Metadata_well"
fill_var <- "Metadata_well"
fact_var <- "Metadata_prefix" # NA mean no additional facet beside channel

show_legend <- F
```


## ratio count per field
```{r}
key <- "count_per_field_DMSO_log2"
key_name <- "Ratio of cell Count to DMSO (log2)"

p <- cell_summary_ratio %>% 
  ggplot(aes(!!as.name(axis_var),
             !!as.name(key),
             color = !!as.name(fill_var))) +
  geom_point(size=0.5, show.legend = show_legend) +
  geom_hline(yintercept = -cell_summary_subset_dmso_3xMAD[key],
             linetype=2, linewidth=0.25, color="grey50") +
  geom_hline(yintercept = cell_summary_subset_dmso_3xMAD[key],
             linetype=2, linewidth=0.25, color="grey50") +
  { if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      # rows=vars(Metadata_vector, Metadata_conc),
      rows=vars(!!as.name(fact_var)),
      scales = "fixed",
      axes  = "all") } } +
  labs(y=key_name, x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_{key}.pdf"),
        p,
        width=length(unique(cell_summary_ratio[[axis_var]]))*0.06, 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(cell_summary_ratio[[fact_var]]))),
        limitsize = F)
```


## ratio areaShape
```{r}
keys <- c("Diameter_DMSO_log2", "Eccentricity_DMSO_log2")
key_names <- c("Ratio of Diameter to DMSO", "Ratio of Eccentricity to DMSO")

for(i in seq_along(keys)) {
  key <- keys[i]
  key_name <- key_names[i]

  # plot
  p <- cell_summary_ratio %>% 
    ggplot(aes(!!as.name(axis_var),
               !!as.name(key),
               # group = !!as.name(fill_var),
               color = !!as.name(fill_var))) +
    geom_point(size=0.5, show.legend = show_legend) +
    geom_hline(yintercept = -cell_summary_subset_dmso_3xMAD[key],
               linetype=2, linewidth=0.25, color="grey50") +
    geom_hline(yintercept = cell_summary_subset_dmso_3xMAD[key],
               linetype=2, linewidth=0.25, color="grey50") +
    # geom_pointrange(aes(
    #   ymin=!!as.name(str_glue("{key_name}_mean")) - 
    #     !!as.name(str_glue("{key_name}_se")), 
    #   ymax=!!as.name(str_glue("{key_name}_mean")) +
    #     !!as.name(str_glue("{key_name}_se"))),
    #   size=0.25, show.legend = show_legend) +
    { if(!is.na(fact_var)) {
      ggh4x::facet_grid2(
        # rows=vars(Metadata_vector, Metadata_conc),
        rows=vars(!!as.name(fact_var)),
        axes  = "all") } } +
    labs(y=key_name, x="") +
    # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.title = element_blank(),
          legend.key.size = unit(1.5, "mm"))
  ggsave2(str_glue("{Sys.Date()}_{obj}_{key}.pdf"),
          p,
          width=length(unique(cell_summary_ratio[[axis_var]]))*0.06, 
          height=ifelse(
            is.na(fact_var), 
            2,
            2*length(unique(cell_summary_ratio[[fact_var]]))),
          limitsize = F)
}
```

## ratio intenstiy
```{r}
keys <- c("Mean_intensity_DMSO_log2", 
          "Sum_intensity_DMSO_log2")
key_names <- c("Ratio of Mean Intensity to DMSO", 
               "Ratio of Sum Intensity to DMSO")

for(i in seq_along(keys)) {
  key <- keys[i]
  key_name <- key_names[i]
  print(str_glue("process {key}"))
  
  MAD_reformat <- cell_summary_subset_dmso_3xMAD %>% 
    enframe(name = "channel", value="MAD") %>% 
    filter(str_detect(channel, key)) %>% 
    mutate(channel=str_replace_all(channel, str_glue("_{key}"), ""))
  
  # plot
  pdata <- cell_summary_ratio %>% 
    pivot_longer(contains(key), 
                 names_to = c("channel", "item"), 
                 names_pattern = "(ch\\d+)_(.*)",
                 values_to = "ratio")
  p <- pdata %>% 
    # left_join(MAD_reformat) +
    ggplot(aes(!!as.name(axis_var),
               ratio,
               # group = !!as.name(fill_var),
               color = !!as.name(fill_var))) +
    geom_point(size=0.5, show.legend = show_legend) +
    geom_hline(aes(yintercept = -MAD), data=MAD_reformat,
               linetype=2, linewidth=0.25, color="grey50") +
    geom_hline(aes(yintercept = MAD), data=MAD_reformat,
               linetype=2, linewidth=0.25, color="grey50") +
    # geom_pointrange(aes(
    #   ymin=!!as.name(str_glue("{key_name}_mean")) - 
    #     !!as.name(str_glue("{key_name}_se")), 
    #   ymax=!!as.name(str_glue("{key_name}_mean")) +
    #     !!as.name(str_glue("{key_name}_se"))),
    #   size=0.25, show.legend = show_legend) +
    { if(!is.na(fact_var)) {
      ggh4x::facet_grid2(
        cols=vars(channel),
        rows=vars(!!as.name(fact_var)),
        axes  = "all") } } +
    labs(y=key_name, x="") +
    # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.title = element_blank(),
          legend.key.size = unit(1.5, "mm"))
  ggsave2(str_glue("{Sys.Date()}_{obj}_{key}.pdf"),
          p,
          width=length(unique(cell_summary_ratio[[axis_var]]))*0.06*
            length(unique(pdata[["channel"]])), 
          height=ifelse(
            is.na(fact_var), 
            2,
            2*length(unique(cell_summary_ratio[[fact_var]]))),
          limitsize = F)
}
```

## ratio granularity
```{r}
if(any(str_detect("Granularity_", colnames(cell_summary_ratio)))) {
  
  # granularity per field
  granularity_data <- cell_summary_ratio %>% 
    pivot_longer(
      matches("Granularity_.*"),
      names_to = c("granularity_order", "channel"), 
      names_pattern = "Granularity_(.+)_(.+)$",
      # names_prefix = "Intensity_MeanIntensity_",
      values_to = "granularity_value") %>% 
    filter(granularity_order %in% 2:5) %>% 
    mutate(granularity_order=str_c("Granularity_", granularity_order)) %>% 
    reframe(mean=mean(granularity_value, na.rm=T),
            sd=sd(granularity_value, na.rm=T),
            se=sd/sqrt(n()),
            .by=c(all_of(c(plate_var, axis_var, color_var,
                           "granularity_order", "channel"))))
  
  # point range plot
  granularity_data %>% 
    ggplot(aes(!!as.name(axis_var),
               mean, 
               color = !!as.name(color_var))) +
    geom_pointrange(aes(ymin=mean-se, ymax=mean+se), 
                    size=0.25, show.legend = show_legend) +
    {if(!is.na(fact_var)) {
      ggh4x::facet_grid2(cols=vars(granularity_order), 
                         rows=vars(!!as.name(fact_var)),
                         scales="fixed",
                         # independent="y",
                         axes = "all") 
    } else {
      ggh4x::facet_grid2(cols=vars(granularity_order), 
                         # rows=vars(!!as.name(fact_var)),
                         scales="fixed",
                         # independent="y",
                         axes = "all")
    } }+
    labs(x="", y="Mean Granularity per Field") +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top")
  ggsave2(str_glue("{Sys.Date()}_{obj}_granularity.pdf"),
          # width=(colnames(granularity_data) %>% 
          #          str_subset("Granularity_") %>% 
          #          length())*3, 
          # height=length(unique(cellRegion[[fact_var]]))*1.5,
          width=length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
            length(unique(granularity_data[[granularity_order]])), 
          height=ifelse(
            is.na(fact_var), 
            2.5,
            2.5*length(unique(granularity_data[[fact_var]]))),
          limitsize = F) 
}
```

## SAVE per well ratio
```{r}
cell_summary_ratio_wide <- cell_summary_ratio %>% 
  # pivot_wider(names_from = Metadata_object,
  #             values_from = !starts_with("Metadata_")) %>% 
  select(where(~!all(is.na(.))))
glimpse(cell_summary_ratio_wide)

writexl::write_xlsx(
  list(#cell_summary_ratio=cell_summary_ratio,
    cell_summary_ratio_wide=cell_summary_ratio_wide),
  str_glue("{Sys.Date()}_cell_summary_ratio.xlsx"))
```

## --------------------------------------------------



## --------------------------------------------------
## control well
```{r}
cell_summary_ratio %>% 
  filter(Metadata_ID %in% c("DMSO")) %>% 
  # mutate(count_ratio_DMSO_se=count_ratio_DMSO_sd/sqrt(n_field)) %>%
  ggplot(aes(Metadata_object,
             count_per_field_DMSO_log2,
             color = Metadata_ID)) +
  geom_boxplot(width=0.7, show.legend = show_legend) +
  # geom_errorbar(aes(
  #   ymin=count_ratio_DMSO_mean - count_ratio_DMSO_se, 
  #   ymax=count_ratio_DMSO_mean + count_ratio_DMSO_se), 
  #   size=0.25, show.legend = show_legend) +
  { if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      # rows=vars(Metadata_vector, Metadata_conc),
      rows=vars(!!as.name(fact_var)),
      scales = "fixed",
      axes  = "all") } } +
  labs(y="Ratio of Cell Count to DMSO (log2)", x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_count_per_field_ctrl.pdf"),
        width=length(unique(cell_summary_ratio[[axis_var]]))*0.01, 
        height=ifelse(
          is.na(fact_var), 
          1,
          1*length(unique(cell_summary_ratio[[fact_var]]))),
        limitsize = F)


# intensity
cell_summary_ratio %>% 
  filter(Metadata_ID %in% c("DMSO", "Sema")) %>% 
  pivot_longer(contains("SUM_intensity_DMSO_log2"), 
                 names_to = c("channel", "item"), 
                 names_pattern = "(ch\\d+)_(.*)",
                 values_to = "ratio") %>% 
  filter(!is.na(ratio)) %>% 
  ggplot(aes(Metadata_object,
             ratio,
             color = Metadata_ID)) +
  geom_boxplot(width=0.7, show.legend = show_legend) +
  # geom_pointrange(aes(
  #   ymin=Intensity_ratio_mean - Intensity_ratio_se, 
  #   ymax=Intensity_ratio_mean + Intensity_ratio_se),
  #   size=0.25, show.legend = show_legend) +
  # scale_y_continuous(trans = scales::transform_pseudo_log()) +
  {if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = "free_x", independent = "x",
      axes  = "all")
  } else {
    ggh4x::facet_grid2(
      # rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = "free_x", independent = "x",
      axes  = "all")
  }} +
  labs(y="Ratio of Sum Intensity to DMSO (log2)", x="") +
  # coord_cartesian(ylim = c(0, 3)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_sum_intensity_ratio_ctrl.pdf"),
        width=length(unique(cell_summary_ratio[[axis_var]]))*0.006*
          length(channels), 
        height=ifelse(
          is.na(fact_var), 
          1,
          1*length(unique(cell_summary_ratio[[fact_var]]))),
        limitsize = F)
```
