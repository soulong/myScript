---
title: "cell with spot analysis"
format: html
editor_options: 
  chunk_output_type: console
---

## load packages
```{r}
# rstudioapi::getActiveDocumentContext()$path |>
#   dirname() |>
#   setwd()
setwd("D:\\Postdoc_Data\\Project_protease_APP_Notch\\2024-03-06_APP_Notch_Cmpd_time_add")

# load packages
library(tidyverse)
library(cowplot)
library(lemon)
library(ggridges)
```

## read cellprofiler db
```{r}
# load function
source("D:/Script/R_functions/read_sqlite.R")

# read db
raw <- read_sqlite("cp_result.db", 
                   classify_table=NULL, 
                   remove_object_prefix = T)

# raw <- map("cp_result.db", read_sqlite) %>% 
#   bind_rows(.id="Metadata_source")

glimpse(raw$image)
glimpse(raw$objects)
```

## define magnification
```{r}
magification <- "20x"
image_width <- unique(raw$image$Image_Width)

# unit: um
objective_view <- c("100x" = 133, "60x" = 221, "20x" = 600)
length_per_pixel <- objective_view[magification] * (1/image_width)
print(str_glue("per pixel length: {round(length_per_pixel, 3)} uM"))
```

## metadata plate info
```{r}
# load function
source("D:/Script/R_functions/read_plate_info.R")

# get plate info
plate_info_f <- "plate_info.xlsx"

if(file.exists(plate_info_f)) {
  plate_info <- plate_info_f %>%
    map_dfr(read_plate_info_1, add_directory=F) %>%
    # separate_wider_delim(Metadata_group, delim = "+",
    #                      names = c("Metadata_vectorFP", "Metadata_addFP"),
    #                      too_few = "align_start",
    #                      cols_remove = F) %>% 
    # separate_wider_delim(Metadata_vectorFP, delim = "-",
    #                      names = c("Metadata_vector", NA),
    #                      too_few = "align_start",
    #                      cols_remove = F) %>% 
    # mutate(across(c(Metadata_group, Metadata_vectorFP, 
    #                 Metadata_vector, Metadata_addFP), 
    #               ~ replace_na(.x, ""))) %>% 
    mutate(Metadata_time = factor(Metadata_time,
                                   levels=rev(unique(Metadata_time))),
           Metadata_cmpds = factor(Metadata_cmpds,
                                   levels=rev(unique(Metadata_cmpds))))
  
  plate_info
}

```


## tidy image
```{r}
Image <- raw$image %>% 
  select(!c(starts_with("Image_Count_"),
            matches("Image_Intensity_Percentile_[25]_.*"))) %>% 
  rename_with(\(x) str_replace(x, "Intensity_Percentile_1", "bg"))
# glimpse(Image)

if(exists("plate_info")) {
  Image <- Image %>% 
    left_join(plate_info, 
              by=join_by(Metadata_well))
}
# add metadta
# Image$Metadata_position %>% unique()

# image <- image %>% 
#   mutate(Metadata_prefix=str_replace_all(
#     Metadata_prefix, ".*-per-", "")) %>% 
#   mutate(Metadata_group=case_when(
#     Metadata_position %in% 1:10 ~ "Vector",
#     Metadata_position %in% 11:20 ~ "YAP-WT",
#     Metadata_position %in% 21:30 ~ "YAP-detlaTAD",
#     Metadata_position %in% 31:40 ~ "YAPMAML2"
#   ), .after = Metadata_position)
```

## tidy cell (multiplex)
```{r}
# glimpse(raw$objects)
objects <- names(raw$objects)
print(objects)

cell <- raw$objects %>% 
  bind_rows(.id = "Metadata_object") %>% 
  mutate(Metadata_object=factor(
    Metadata_object, c("app","notch","gal4dbd"))) %>% 
  select(!any_of(c("Parent_mask_cp_masks_cell",
                   "Parent_FilterObjects",
                   "Children_cell_wo_spot_Count"))) %>% 
  right_join(Image, ., 
             by=join_by(ImageNumber)) %>% 
  # scale pixel to actual length
  mutate(across(matches(
    "(Diameter)|(AxisLength)|(Radius)|(Perimeter)$"),
    \(x) x * length_per_pixel)) %>% 
  mutate(across(matches(
    "(Area)$"),
    \(x) x * length_per_pixel * length_per_pixel))

glimpse(cell)

cell <- cell %>%
  mutate(Metadata_position=as.factor(Metadata_position))

# # cell model classification
# cell <- cell %>% 
#   right_join(raw$objects$cell_class, .,
#             by=join_by(ImageNumber, cell_Number_Object_Number)) %>% 
#   rename(Metadata_cell_class=class)

# # cell wo spot
# cell_wo_spot <- raw$objects$cell_wo_spot %>% 
#   select(ImageNumber,
#          ends_with("Parent_cell"),
#          ends_with("AreaShape_Area"),
#          contains("_Intensity_")
#          )
# # glimpse(cell_wo_spot)
# 
# # cell + cell wo spot
# cell <- cell %>% 
#   left_join(cell_wo_spot,
#             by=join_by(
#               ImageNumber,
#               cell_Number_Object_Number==cell_wo_spot_Parent_cell))
# glimpse(cell)
# 
# # remove unneeded variables
# rm(cell_wo_spot)
```

<!-- ## tidy spot -->
<!-- ```{r} -->
<!-- # glimpse(raw$objects$spot) -->
<!-- spot <- raw$objects$spot %>%  -->
<!--   filter(spot_Parent_cell != 0) %>%  -->
<!--   filter((spot_AreaShape_MajorAxisLength /  -->
<!--             spot_AreaShape_MinorAxisLength) < 3, -->
<!--          spot_AreaShape_Area > 6) %>%  -->
<!--   select(!c(spot_Children_cell_wo_spot_Count)) %>%  -->
<!--   select(!c(contains("RadialDistribution_FracAtD"), -->
<!--             contains("RadialDistribution_RadialCV"))) %>%  -->
<!--   select(!setdiff(contains("AreaShape"),  -->
<!--                   contains("EquivalentDiameter"))) %>% -->
<!--   # spot_Parent_cell==0 means related to background -->
<!--   right_join(cell, .,  -->
<!--              by=join_by( -->
<!--                ImageNumber, -->
<!--                cell_Number_Object_Number==spot_Parent_cell)) -->
<!-- # glimpse(spot) -->

<!-- # spot rbg -->
<!-- spot_rbg <- raw$objects$spot_rbg %>%  -->
<!--   select(ImageNumber, -->
<!--          contains("Parent_spot_expand_l"), -->
<!--          contains("Intensity")) -->
<!-- # glimpse(spot_rbg) -->

<!-- # spot + spot rbg -->
<!-- spot <- spot %>%  -->
<!--   left_join(spot_rbg, -->
<!--             by=join_by( -->
<!--               ImageNumber, -->
<!--               spot_Number_Object_Number==spot_rbg_Parent_spot_expand_l)) -->

<!-- # add spot type -->
<!-- spot <- spot %>%  -->
<!--   left_join(spot_type,  -->
<!--             by = join_by( -->
<!--               ImageNumber, -->
<!--               spot_Number_Object_Number==spot_Number_Object_Number )) -->

<!-- glimpse(spot) -->

<!-- # remove unneeded variables -->
<!-- rm(spot_rbg) -->
<!-- ``` -->

## subtract background
```{r}
# get all channel names
bg_channels <- colnames(Image) %>% 
  str_subset("Image_bg") %>% 
  str_replace_all("Image_bg_", "")
bg_intensity <- colnames(Image) %>% 
  str_subset("Image_bg") %>% 
  map_dbl(~ Image[.x] %>% pull() %>% 
            mean(na.rm=T, trim=0.1) %>% round()) %>% 
  set_names(bg_channels)
print(bg_intensity)

# process one channel each time
print("substract background")
for(ch in bg_channels) {
  
  # subtract image bg
  cell[[str_glue("Image_Intensity_MeanIntensity_{ch}")]] <- 
    (cell[[str_glue("Image_Intensity_MeanIntensity_{ch}")]] - 
       bg_intensity[ch]) %>% 
    map_int(~ max(0, .x, na.rm=T))
  # subtract object bg
  cell[[str_glue("Intensity_MeanIntensity_{ch}")]] <- 
    (cell[[str_glue("Intensity_MeanIntensity_{ch}")]] - 
       bg_intensity[ch]) %>% 
    map_int(~ max(0, .x, na.rm=T))
}
```

## filter object
```{r}
if(F) {
  cell <- cell %>% 
    # select(!any_of(ends_with("_ch1"))) %>%
    filter(!is.na(Metadata_vector)) %>% 
    separate(Metadata_prefix, 
             c("Metadata_prefix", "Metadata_serum"),
             sep = "_") %>% 
    mutate(Metadata_prefix=case_when(
      Metadata_prefix == "ZQ6" ~ "GRB2-SH2",
      Metadata_prefix == "ZQ19" ~ "GRB2-FL",
      Metadata_prefix == "ZQ28" ~ "SHC1"
    ))
}

glimpse(cell)
```

## save
```{r}
writexl::write_xlsx(
  list(cell=cell),
       str_glue("{Sys.Date()}_cell.xlsx")
)
```

## plot setting
```{r}
obj <- "cell"

group_vars <- c("Metadata_cmpds", "Metadata_object", "Metadata_time")

# intensity log10 trans
trans <- F

# plot
show_legend <- T

axis_var <- "Metadata_object"
fill_var <- "Metadata_cmpds"
fact_var <- "Metadata_time" # NA mean no additional facet beside channel

fact_scale <- "free"
fact_independent <- "y"
fact_axes <- "all"
```

## count per field
```{r}
# count per filed at well level
count_per_field_per_well <- eval(parse(text=obj)) %>% 
  reframe(count_per_field = n(),
          .by = all_of(
            c(group_vars, "Metadata_well", "Metadata_field"))) %>% 
  reframe(across(count_per_field, 
                 list(mean=mean, sd=sd)),
          n_field=n(),
          .by =c(group_vars, "Metadata_well")) %>%
  mutate(count_per_field_se=count_per_field_sd/sqrt(n_field),
         .before = n_field)
glimpse(count_per_field_per_well)


# pointrange
p <- count_per_field_per_well %>% 
  ggplot(aes(!!as.name(axis_var),
             count_per_field_mean,
             color = !!as.name(fill_var))) +
  geom_pointrange(aes(
    ymin=count_per_field_mean - count_per_field_se, 
    ymax=count_per_field_mean + count_per_field_se), 
    size=0.25, show.legend = show_legend) +
  { if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      # rows=vars(Metadata_vector, Metadata_conc),
      rows=vars(!!as.name(fact_var)),
      scales = "fixed",
      axes  = "margins") } } +
  labs(x="", y="Cell Count per Field") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        # axis.text.x = element_text(size=6, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.2, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_count_per_field_point.pdf"),
        p,
        width=length(unique(count_per_field_per_well[[axis_var]]))*1, 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(count_per_field_per_well[[fact_var]]))),
        limitsize = F)

# bar dodge
count_per_field_per_well %>% 
  ggplot(aes(!!as.name(axis_var), 
             count_per_field_mean,
             fill=!!as.name(fill_var))) +
  geom_bar(stat="identity",
           position=position_dodge(width = 0.8),
           width=0.7) +
  geom_errorbar(aes(
    ymin=count_per_field_mean - count_per_field_se, 
    ymax=count_per_field_mean + count_per_field_se,
    color=!!as.name(fill_var)),
    # color="grey10",
    position=position_dodge(width = 0.8), 
    width=0.35) +
  { if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      # rows=vars(Metadata_vector, Metadata_conc),
      rows=vars(!!as.name(fact_var)),
      scales = "fixed",
      axes  = "all") } } +
  labs(x="", y="Cell Count per Field") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        panel.grid = element_blank(),
        # axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        legend.title = element_blank(),
        legend.key.size = unit(1.2, "mm"),
        legend.position = "top")
ggsave2(str_glue("{Sys.Date()}_{obj}_count_per_field_bar.pdf"),
        width=length(unique(count_per_field_per_well[[axis_var]])) * 1, 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(count_per_field_per_well[[fact_var]]))),
        limitsize = F)

# # bar stack
# count_per_field_per_well %>% 
#   ggplot(aes(!!as.name(axis_var), 
#              count_per_field_mean,
#              fill=!!as.name(fill_var))) +
#   geom_bar(stat="identity",
#            position=position_stack(),
#            width=0.7) +
#   { if(!is.na(fact_var)) {
#     ggh4x::facet_grid2(
#       # rows=vars(Metadata_vector, Metadata_conc),
#       rows=vars(!!as.name(fact_var)),
#       scales = "fixed",
#       axes  = "all") } } +
#   theme_bw() +
#   labs(x="", y="Cell Count per Field") +
#   # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
#   theme_bw(8) +
#   theme(strip.background = element_rect(fill=NA), 
#         strip.text = element_text(size=6),
#         panel.grid = element_blank(),
#         legend.title = element_blank(),
#         legend.key.size = unit(1.2, "mm"),
#         legend.position = "top")
# ggsave2(str_glue("{Sys.Date()}_{obj}_count_per_field_stack.pdf"),
#         width=length(unique(count_per_field_per_well[[axis_var]])) * 1, 
#         height=ifelse(
#           is.na(fact_var), 
#           2,
#           2*length(unique(count_per_field_per_well[[fact_var]]))))
```

## diameter
```{r}
# boxplot
p <- eval(parse(text=obj)) %>% 
  ggplot(aes(!!as.name(axis_var),
             AreaShape_EquivalentDiameter,
             # group = !!as.name(fill_var),
             fill = !!as.name(fill_var))) +
  geom_boxplot(position = position_dodge(0.9, preserve = "single"),
               linewidth=0.25,
               outlier.color = "grey80",
               outlier.size = 0.05,
               show.legend = show_legend) +
  { if(!is.na(fact_var)) {
      ggh4x::facet_grid2(
        # rows=vars(Metadata_vector, Metadata_conc),
        rows=vars(!!as.name(fact_var)),
        axes  = "all") } } +
  labs(y="Diameter [uM]", x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        # axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.2, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_diameter_box.pdf"),
        p,
        width=length(unique(eval(parse(text=obj))[[axis_var]]))*1, 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(eval(parse(text=obj))[[fact_var]]))),
        limitsize = F)

# # ridge plot
# p <- eval(parse(text=obj)) %>% 
#   ggplot(aes(AreaShape_EquivalentDiameter,
#              !!as.name(axis_var),
#              fill = !!as.name(fill_var))) +
#   geom_density_ridges(color = "grey80", linewidth=0.1, alpha=0.8,
#                       scale = 1.2, show.legend = show_legend) +
#   { if(!is.na(fact_var)) {
#       ggh4x::facet_grid2(
#         # rows=vars(Metadata_vector, Metadata_conc),
#         rows=vars(!!as.name(fact_var)),
#         axes  = "all") } } +
#   # ggh4x::facet_grid2(
#   #   # rows=vars(Metadata_vector, Metadata_conc),
#   #   rows=vars(!!as.name(fact_var)),
#   #   scales = "free_x", space = "fixed",
#   #   axes  = "y", remove_labels = "y") +
#   labs(x="Diameter [uM]", y="") +
#   # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
#   theme_bw(8) +
#   theme(strip.background = element_rect(fill=NA), 
#         strip.text = element_text(size=6),
#         # axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
#         panel.grid = element_blank(),
#         legend.position = "top",
#         legend.title = element_blank(),
#         legend.key.size = unit(1.2, "mm"))
# ggsave2(str_glue("{Sys.Date()}_{obj}_diameter_ridge.pdf"),
#         p,
#         width=4, 
#         height=ifelse(
#           is.na(fact_var), 
#           length(unique(eval(parse(text=obj))[[axis_var]]))*0.5,
#           length(unique(eval(parse(text=obj))[[axis_var]]))*0.5*
#             length(unique(eval(parse(text=obj))[[fact_var]]))),
#         limitsize = F)

```
  
## intenstiy
```{r}
channels <- eval(parse(text=obj)) %>% 
  colnames() %>% 
  str_subset(str_glue("^Intensity_MeanIntensity_.*")) %>% 
  str_replace_all("Intensity_MeanIntensity_", "")

intensity_data <- eval(parse(text=obj)) %>% 
  pivot_longer(
    any_of(as.character(str_glue(
      "Intensity_MeanIntensity_{channels}"))),
    names_to = "channel", 
    names_prefix = str_glue("Intensity_MeanIntensity_"),
    values_to = "Intensity")

intensity_data_summary <- intensity_data %>% 
  reframe(across(Intensity, list(mean=mean, sd=sd)),
          n=n(),
          .by=all_of(c(group_vars, "channel"))
          ) %>% 
  mutate(Intensity_se=Intensity_sd/sqrt(n))


# boxplot
p <- intensity_data %>% 
  ggplot(aes(!!as.name(axis_var),
             Intensity,
             fill = !!as.name(fill_var))) +
  geom_boxplot(position = position_dodge(0.9, preserve = "single"),
               linewidth=0.25,
               outlier.color = "grey80",
               outlier.size = 0.1,
               show.legend = show_legend) +
  {if(trans) scale_y_continuous(trans = scales::transform_log10())} +
  {if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = fact_scale, independent = fact_independent,
      axes  = fact_axes)
  } else {
    ggh4x::facet_grid2(
      # rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = fact_scale, independent = fact_independent,
      axes  = fact_axes)
  }} +
  labs(y="Intensity", x="") +
  # coord_cartesian(ylim = c(0, 20000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        # axis.text.x = element_text(size=4, angle = 0, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.2, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_intensity_log{trans}_box.pdf"),
        p,
        width=length(unique(eval(parse(text=obj))[[axis_var]]))*1*
          length(unique(intensity_data$channel)), 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(eval(parse(text=obj))[[fact_var]]))),
        limitsize = F)

# barplot
p <- intensity_data_summary %>% 
  ggplot(aes(!!as.name(axis_var), 
             Intensity_mean,
             fill=!!as.name(fill_var))) +
  geom_bar(stat="identity",
           position=position_dodge(width = 0.8),
           width=0.7) +
  geom_errorbar(aes(
    ymin=Intensity_mean - Intensity_se, 
    ymax=Intensity_mean + Intensity_se,
    color=!!as.name(fill_var)),
    # color="grey10",
    position=position_dodge(width = 0.8), 
    width=0.35) +
  {if(trans) scale_y_continuous(trans = scales::transform_log10())} +
  {if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = fact_scale, independent = fact_independent,
      axes  = fact_axes)
  } else {
    ggh4x::facet_grid2(
      # rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = fact_scale, independent = fact_independent,
      axes  = fact_axes)
  }} +
  labs(y="Intensity", x="") +
  # coord_cartesian(ylim = c(0, 20000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        # axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.2, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_intensity_log{trans}_bar.pdf"),
        p,
        width=length(unique(eval(parse(text=obj))[[axis_var]]))*1*
          length(unique(intensity_data$channel)), 
        height=ifelse(
          is.na(fact_var), 
          2,
          2*length(unique(eval(parse(text=obj))[[fact_var]]))),
        limitsize = F)

# # ridge plot
# p <- intensity_data %>%
#   ggplot(aes(Intensity, !!as.name(axis_var),
#              fill = !!as.name(fill_var))) +
#   geom_density_ridges(color = "grey80", linewidth=0.1, alpha=0.8,
#                       scale = 1.2, show.legend = show_legend) +
#   {if(trans) scale_x_continuous(trans = scales::transform_log10())} +
#   {if(!is.na(fact_var)) {
#     ggh4x::facet_grid2(
#       rows=vars(!!as.name(fact_var)),
#       cols=vars(channel),
#       scales = fact_scale, independent = fact_independent,
#       axes  = fact_axes)
#   } else {
#     ggh4x::facet_grid2(
#       # rows=vars(!!as.name(fact_var)),
#       cols=vars(channel),
#       scales = fact_scale, independent = fact_independent,
#       axes  = fact_axes)
#   }} +
#   labs(x="Intensity",y="") +
#   # coord_cartesian(xlim = c(0, 20000)) +
#   theme_bw(8) +
#   theme(strip.background = element_rect(fill=NA),
#         strip.text = element_text(size=6),
#         panel.grid = element_blank(),
#         legend.position = "top",
#         legend.title = element_blank(),
#         legend.key.size = unit(1.2, "mm"))
# ggsave2(str_glue("{Sys.Date()}_{obj}_intensity_log{trans}_ridge.pdf"),
#         p,
#         width=2.5*length(unique(intensity_data$channel)) ,
#         height=ifelse(
#           is.na(fact_var),
#           length(unique(eval(parse(text=obj))[[axis_var]]))*0.5,
#           length(unique(eval(parse(text=obj))[[axis_var]]))*0.5*
#             length(unique(eval(parse(text=obj))[[fact_var]]))),
#         limitsize = F)

# flexible here
if(F) {
  # intensity line plot over group
  axis_var <- "Metadata_time"
  fill_var <- "Metadata_cmpds"
  fact_var <- "Metadata_object"
  line_group <- "Metadata_cmpds"
  
  p <- intensity_data_summary %>% 
    ggplot(aes(!!as.name(axis_var), 
               Intensity_mean,
               color=!!as.name(fill_var))) +
    geom_pointrange(aes(
      ymin=Intensity_mean - Intensity_se, 
      ymax=Intensity_mean + Intensity_se),
      # position=position_dodge(width = 0.8),
      size=0.5) +
    geom_line(aes(group=!!as.name(line_group))) +
    {if(trans) scale_y_continuous(trans = scales::transform_log10())} +
    {if(!is.na(fact_var)) {
      ggh4x::facet_grid2(
        rows=vars(!!as.name(fact_var)),
        cols=vars(channel),
      scales = fact_scale, independent = fact_independent,
      axes  = fact_axes)
    } else {
      ggh4x::facet_grid2(
        # rows=vars(!!as.name(fact_var)),
        cols=vars(channel),
      scales = fact_scale, independent = fact_independent,
      axes  = fact_axes)
    }} +
    labs(y="Intensity", x="") +
    # coord_cartesian(ylim = c(400, 4000)) +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          # axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.title = element_blank(),
          legend.key.size = unit(1.2, "mm"))
  ggsave2(str_glue("{Sys.Date()}_{obj}_intensity_log{trans}_line.pdf"),
          p,
          width=length(unique(eval(parse(text=obj))[[axis_var]]))*1*
            length(unique(intensity_data$channel)), 
          height=ifelse(
            is.na(fact_var), 
            2,
            2*length(unique(eval(parse(text=obj))[[fact_var]]))),
          limitsize = F)
}
```

<!-- ## cell classification class -->
<!-- ```{r} -->
<!-- cell %>%  -->
<!--   mutate(Metadata_cell_class=factor(Metadata_cell_class, -->
<!--                                     rev(c("none", "spot", "aggregate")))) %>% -->
<!--   ggplot(aes(Metadata_vector,  -->
<!--              fill=Metadata_cell_class)) + -->
<!--   geom_bar(width = 0.75) + -->
<!--   # geom_col(position = "stack") + -->
<!--   scale_fill_manual(values = c("#005a32", "#41ab5d", "#c7e9c0")) + -->
<!--   labs(x="") + -->
<!--   theme_bw() + -->
<!--   theme(legend.position = "top", -->
<!--         legend.title = element_blank()) -->
<!-- ggsave2(str_glue("{Sys.Date()}_cell_classification.pdf"), -->
<!--         width=4,  -->
<!--         height=3) -->
<!-- ``` -->


## granularity
```{r}
# obj <- "cell"
# 
# axis_var <- "Metadata_well"
# fill_var <- "Metadata_lib"
# fact_var <- "Metadata_prefix"

if(any(str_detect("Granularity_", 
                  colnames(eval(parse(text=obj)))))) {
  
  # granularity per field
  granularity_data <- eval(parse(text=obj)) %>% 
    pivot_longer(
      matches("Granularity_.*"),
      names_to = c("granularity_order", "channel"), 
      names_pattern = "Granularity_(.+)_(.+)$",
      # names_prefix = "Intensity_MeanIntensity_",
      values_to = "granularity_value") %>% 
    filter(granularity_order %in% 2:5) %>% 
    mutate(granularity_order=str_c("Granularity_", granularity_order)) %>% 
    reframe(mean=mean(granularity_value, na.rm=T),
            sd=sd(granularity_value, na.rm=T),
            se=sd/sqrt(n()),
            .by=c(all_of(c(plate_var, axis_var, color_var,
                           "granularity_order", "channel"))))
  
  # point range plot
  granularity_data %>% 
    ggplot(aes(!!as.name(axis_var),
               mean, 
               color = !!as.name(color_var))) +
    geom_pointrange(aes(ymin=mean-se, ymax=mean+se), 
                    size=0.15, show.legend = F) +
    {if(!is.na(fact_var)) {
      ggh4x::facet_grid2(cols=vars(granularity_order), 
                         rows=vars(!!as.name(fact_var)),
                         scales="fixed",
                         # independent="y",
                         axes = "all") 
    } else {
      ggh4x::facet_grid2(cols=vars(granularity_order), 
                         # rows=vars(!!as.name(fact_var)),
                         scales="fixed",
                         # independent="y",
                         axes = "all")
    } }+
    labs(x="", y="Mean Granularity per Field") +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top")
  ggsave2(str_glue("{Sys.Date()}_{obj}_granularity_mean_se.pdf"),
          # width=(colnames(granularity_data) %>% 
          #          str_subset("Granularity_") %>% 
          #          length())*3, 
          # height=length(unique(cellRegion[[fact_var]]))*1.5,
          width=length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
            length(unique(granularity_data[[granularity_order]])), 
          height=ifelse(
            is.na(fact_var), 
            2.5,
            2.5*length(unique(granularity_data[[fact_var]]))),
          limitsize = F) 
}
```


<!-- ## spot ratio -->
<!-- ```{r} -->
<!-- data_plot <- channels %>%  -->
<!--   set_names(., nm=.) %>%  -->
<!--   map(\(ch)  -->
<!--       spot %>%  -->
<!--         mutate("spot_ratio_cell_{ch}" :=  -->
<!--                  !!as.name(str_glue("spot_Intensity_MeanIntensity_{ch}")) /  -->
<!--                  !!as.name(str_glue("cell_Intensity_MeanIntensity_{ch}"))  -->
<!--                ) %>%  -->
<!--         pivot_longer( -->
<!--           c(!!as.name(str_glue("spot_ratio_cell_{ch}"))), -->
<!--           names_to = "type", values_to = "Ratio") %>%  -->
<!--         separate_wider_regex(type,  -->
<!--                              c(type="spot_ratio_.*", "_", channel="ch[0-9]") ) -->
<!--       ) %>%  -->
<!--   bind_rows() # pull(channel) %>% unique() -->

<!-- data_plot %>%  -->
<!--   ggplot(aes(log2(Ratio),  -->
<!--              Metadata_group,  -->
<!--              fill=type, color=type)) + -->
<!--   # geom_point(alpha=0.25, size=0.5) + -->
<!--   # geom_smooth(show.legend = T) + -->
<!--   # ggbeeswarm::geom_beeswarm() + -->
<!--   # geom_boxplot() + -->
<!--   geom_density_ridges(color = "grey80", linewidth=0.1, -->
<!--                       scale = 1.5, show.legend = F) + -->
<!--   facet_rep_wrap(~ Metadata_prefix + channel,  -->
<!--                  ncol = length(channels), -->
<!--                  scales = "fixed",  -->
<!--                  repeat.tick.labels = T) + -->
<!--   # labs(x="log2(Intensity)", y="Spark count") + -->
<!--   # coord_cartesian(ylim = c(0, 50)) + -->
<!--   theme_bw(8) + -->
<!--   theme(strip.background = element_rect(fill=NA),  -->
<!--         strip.text = element_text(size=6), -->
<!--         panel.grid = element_blank(), -->
<!--         legend.position = "top") -->
<!-- ggsave2(str_glue("{Sys.Date()}_spot_ratio.pdf"), -->
<!--         width = 6,  -->
<!--         height = 5) -->


<!-- ``` -->


<!-- ## spot intensity vs cell intensity -->
<!-- ```{r} -->
<!-- spot %>%  -->
<!--   # filter(class=="positive") %>%  -->
<!--   # filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.2) %>%  -->
<!--   # filter(spot_AreaShape_EquivalentDiameter > 2) %>% -->
<!--   # filter(!(Metadata_group != "Vector" &  -->
<!--   #          cell_Intensity_MeanIntensity_ch1 < 800)) %>%  -->
<!--   # filter(between(cell_Intensity_MeanIntensity_ch2, 800, 3000)) %>%  -->
<!--   ggplot(aes(cell_Intensity_MeanIntensity_ch2, -->
<!--              spot_Intensity_MeanIntensity_ch2)) + -->
<!--   geom_point(aes(fill=Metadata_group, -->
<!--                  size=spot_AreaShape_EquivalentDiameter),  -->
<!--              shape = 21, stroke = 0.1, -->
<!--              color = "transparent", -->
<!--              alpha = 0.5, show.legend = T) + -->
<!--   guides(size = guide_legend(override.aes = list(alpha=1))) + -->
<!--   scale_x_continuous(trans = scales::log2_trans()) + -->
<!--   scale_y_continuous(trans = scales::log2_trans()) + -->
<!--   scale_size_continuous(range=c(0.3, 3)) + -->
<!--   ggh4x::facet_grid2(cols=vars(Metadata_group),  -->
<!--                      rows=vars(Metadata_prefix), -->
<!--                      remove_labels="all") + -->
<!--   # coord_cartesian(xlim = c(0, 12000), ylim = c(0, 12000)) + -->
<!--   labs(x="Cell Intensity (log)", y="Spot intensity (log)") + -->
<!--   theme_bw() + -->
<!--   theme(strip.background = element_rect(fill=NA),  -->
<!--         strip.text = element_text(size=6), -->
<!--         legend.title = element_blank(), -->
<!--         legend.text=element_text(size=4), -->
<!--         legend.key.size = unit(3, "pt"), -->
<!--         # panel.grid = element_blank(), -->
<!--         panel.grid.major = element_blank(), -->
<!--         legend.position = "top") -->

<!-- ggsave2(str_glue("{Sys.Date()}_spot_intensity_vs_cell_intensity.pdf"), -->
<!--         ggrastr::rasterise(last_plot(), dpi=600), -->
<!--         width = 6,  -->
<!--         height = 6) -->


<!-- spot %>%  -->
<!--   filter(class=="positive") %>% -->
<!--   # filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.2) %>% -->
<!--   filter(spot_AreaShape_EquivalentDiameter > 1) %>% -->
<!--   # filter(!(Metadata_group != "Vector" & -->
<!--   #          cell_Intensity_MeanIntensity_ch1 < 800)) %>% -->
<!--   # filter(between(cell_Intensity_MeanIntensity_ch2, 800, 3000)) %>%  -->
<!--   ggplot(aes(cell_Intensity_MeanIntensity_ch2, -->
<!--              spot_Intensity_MeanIntensity_ch2)) + -->
<!--   geom_point(aes(fill=Metadata_group, -->
<!--                  size=spot_AreaShape_EquivalentDiameter),  -->
<!--              shape = 21, stroke = 0.1, -->
<!--              color = "transparent", -->
<!--              alpha=0.5, show.legend = F) + -->
<!--   scale_x_continuous(trans = scales::log2_trans()) + -->
<!--   scale_y_continuous(trans = scales::log2_trans()) + -->
<!--   scale_size_continuous(range=c(0.3, 3)) + -->
<!--   ggh4x::facet_grid2(cols=vars(Metadata_group),  -->
<!--                      rows=vars(Metadata_prefix), -->
<!--                      remove_labels="all") + -->
<!--   # coord_cartesian(xlim = c(0, 12000), ylim = c(0, 12000)) + -->
<!--   labs(x="Cell Intensity (log)", y="Spot intensity (log)") + -->
<!--   coord_fixed() + -->
<!--   theme_bw() + -->
<!--   theme(strip.background = element_rect(fill=NA),  -->
<!--         strip.text = element_text(size=6), -->
<!--         # panel.grid = element_blank(), -->
<!--         panel.grid.major = element_blank(), -->
<!--         legend.position = "top") -->

<!-- ggsave2(str_glue("{Sys.Date()}_spot_intensity_vs_cell_intensity_filtered.pdf"), -->
<!--         ggrastr::rasterise(last_plot(), dpi=600), -->
<!--         width = 6,  -->
<!--         height = 6) -->
<!-- ``` -->


<!-- ```{r} -->
<!-- group_var <- "Metadata_group" -->
<!-- fill_var <- "Metadata_group" -->

<!-- library(ggridges) -->
<!-- # intensity -->
<!-- spot %>%  -->
<!--   pivot_longer( -->
<!--     any_of(as.character(str_glue("spot_Intensity_MeanIntensity_{channels}"))), -->
<!--     names_to = "channel",  -->
<!--     names_prefix = "spot_Intensity_MeanIntensity_", -->
<!--     values_to = "Intensity" -->
<!--   ) %>% #glimpse() -->
<!--   ggplot(aes(Intensity, -->
<!--              !!as.name(group_var), -->
<!--              fill = !!as.name(fill_var))) + -->
<!--   geom_density_ridges(color = "grey80", linewidth=0.1, -->
<!--                       scale = 1.5, show.legend = F) + -->
<!--   scale_x_continuous(trans = scales::log2_trans()) + -->
<!--   facet_rep_wrap(~ Metadata_prefix + channel, -->
<!--                  nrow = 1, -->
<!--                  scales = "fixed", -->
<!--                  repeat.tick.labels = T) + -->
<!--   labs(x="Intensity (log2)",y="") + -->
<!--   # coord_cartesian(xlim = c(0, 1000)) + -->
<!--   theme_bw(8) + -->
<!--   theme(strip.background = element_rect(fill=NA),  -->
<!--         strip.text = element_text(size=6), -->
<!--         panel.grid = element_blank(), -->
<!--         legend.position = "top") -->
<!-- ggsave2(str_glue("{Sys.Date()}_cell_intensity_log2.pdf"), -->
<!--         width=4*length(channels),  -->
<!--         height=length(unique(cell[[group_var]]))/4) -->


<!-- spot %>%  -->
<!--   # filter(class=="positive") %>%  -->
<!--   filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.5) %>%  -->
<!--   ggplot(aes(cell_Intensity_MeanIntensity_ch1, -->
<!--              spot_Intensity_MeanIntensity_ch2)) + -->
<!--   geom_point(aes(color=Metadata_group), alpha=0.5, show.legend = F) + -->
<!--   ggh4x::facet_grid2(cols=vars(Metadata_group), rows=vars(Metadata_prefix), -->
<!--                      remove_labels="none") + -->
<!--   theme_bw() -->

<!-- spot %>%  -->
<!--   # filter(class=="positive") %>%  -->
<!--   filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.5) %>%  -->
<!--   ggplot(aes(cell_Intensity_MeanIntensity_ch2, -->
<!--              spot_Intensity_MeanIntensity_ch2)) + -->
<!--   geom_point(aes(color=Metadata_group), alpha=0.5, show.legend = F) + -->
<!--   ggh4x::facet_grid2(cols=vars(Metadata_group),  -->
<!--                      remove_labels="none") + -->
<!--   theme_bw() -->

<!-- spot %>%  -->
<!--   # filter(class=="positive") %>%  -->
<!--   # filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.2) %>%  -->
<!--   filter(spot_AreaShape_EquivalentDiameter > 2) %>% -->
<!--   # filter(!(Metadata_group != "Vector" &  -->
<!--   #          cell_Intensity_MeanIntensity_ch1 < 800)) %>%  -->
<!--   # filter(between(cell_Intensity_MeanIntensity_ch2, 800, 3000)) %>%  -->
<!--   ggplot(aes(cell_Intensity_MeanIntensity_ch2, -->
<!--              spot_Intensity_MeanIntensity_ch2)) + -->
<!--   geom_point(aes(color=Metadata_group, -->
<!--                  size=spot_AreaShape_EquivalentDiameter),  -->
<!--              alpha=0.75, show.legend = F) + -->
<!--   scale_size_continuous(range=c(0.2, 2)) + -->
<!--   ggh4x::facet_grid2(cols=vars(Metadata_group), rows=vars(Metadata_prefix), -->
<!--                      remove_labels="none") + -->
<!--   theme_bw() -->

<!-- spot %>%  -->
<!--   # filter(class=="positive") %>%  -->
<!--   filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.5) %>%  -->
<!--   ggplot(aes(cell_Intensity_MeanIntensity_ch2, -->
<!--              spot_Intensity_MeanIntensity_ch2)) + -->
<!--   geom_point(aes(color=Metadata_group, -->
<!--                  size=spot_AreaShape_EquivalentDiameter),  -->
<!--              alpha=0.25, show.legend = F) + -->
<!--   scale_size_continuous(range=c(0.2, 4)) + -->
<!--   ggh4x::facet_grid2(cols=vars(Metadata_group),  -->
<!--                      remove_labels="none") + -->
<!--   theme_bw() -->


<!-- spot %>%  -->
<!--   # filter(class=="positive") %>%  -->
<!--   filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.5) %>%  -->
<!--   ggplot(aes(cell_Intensity_MeanIntensity_ch2, -->
<!--              spot_Intensity_MeanIntensity_ch2_Probabilities)) + -->
<!--   geom_point(aes(color=Metadata_group), alpha=0.5, show.legend = F) + -->
<!--   ggh4x::facet_grid2(cols=vars(Metadata_group),  -->
<!--                      remove_labels="none") + -->
<!--   theme_bw() -->

<!-- spot %>%  -->
<!--   # filter(class=="positive") %>%  -->
<!--   # filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.5) %>%  -->
<!--   ggplot(aes(cell_Intensity_MeanIntensity_ch2_Probabilities, -->
<!--              spot_Intensity_MeanIntensity_ch2_Probabilities)) + -->
<!--   geom_point(aes(color=Metadata_group), alpha=0.5, show.legend = F) + -->
<!--   ggh4x::facet_grid2(cols=vars(Metadata_group),  -->
<!--                      remove_labels="none") + -->
<!--   theme_bw() -->


<!-- spot %>%  -->
<!--   # filter(class=="positive") %>%  -->
<!--   filter(spot_Intensity_MeanIntensity_ch2_Probabilities > 0.5) %>%  -->
<!--   reframe(n=n(), .by=c(Metadata_group, ImageNumber, -->
<!--                        cell_Number_Object_Number)) %>%  -->
<!--   mutate(n=ifelse(n>4, 4, n)) %>%  -->
<!--   reframe(n2 = n(), .by=c(Metadata_group, n)) %>%  -->
<!--   mutate(across(c(n), as.factor)) %>%  -->
<!--   arrange(Metadata_group, n) %>%  -->
<!--   ggplot(aes(Metadata_group, n2, group=Metadata_group, fill=n)) + -->
<!--   geom_col(position = position_fill()) + -->
<!--   # geom_bar(position = position_fill()) + -->
<!--   # geom_point(aes(color=Metadata_group), alpha=0.5, show.legend = F) + -->
<!--   # geom_boxplot() + -->
<!--   # geom_violin() +,  -->
<!--   # ggh4x::facet_grid2(cols=vars(Metadata_group),  -->
<!--   #                    remove_labels="none") + -->
<!--   # coord_cartesian(ylim=c(0, 3)) + -->
<!--   theme_bw() -->


<!-- ``` -->


<!-- ## cell spot intensity in one plot -->
<!-- ```{r} -->
<!-- data_plot <- channels %>%  -->
<!--   set_names(., nm=.) %>%  -->
<!--   map(\(ch)  -->
<!--       spot %>%  -->
<!--         pivot_longer( -->
<!--           c(!!as.name(str_glue("cell_Intensity_MeanIntensity_{ch}")), -->
<!--             # !!as.name(str_glue("cell_wo_spot_Intensity_MeanIntensity_{ch}")), -->
<!--             # !!as.name(str_glue("spot_rbg_Intensity_MeanIntensity_{ch}")),  -->
<!--             !!as.name(str_glue("spot_Intensity_MeanIntensity_{ch}")) ), -->
<!--           names_to = "type", values_to = "Intensity") %>%  -->
<!--         separate_wider_delim(type, "_Intensity_MeanIntensity_", -->
<!--                              names = c("type", "channel")) ) %>%  -->
<!--   bind_rows() # pull(channel) %>% unique() -->

<!-- if(is.na(fact_var)) { -->
<!--   p <- data_plot %>%  -->
<!--     ggplot(aes(spot_AreaShape_EquivalentDiameter,  -->
<!--                Intensity, -->
<!--                fill=type, color=type)) + -->
<!--     geom_point(alpha=0.25, size=0.5) + -->
<!--     geom_smooth(show.legend = T) + -->
<!--     ggh4x::facet_grid2(rows = vars(!!as.name(group_var)), -->
<!--                        cols = vars(channel), -->
<!--                        axes = "all", -->
<!--                        # scales = "free_y", -->
<!--                        # remove_labels = "all", -->
<!--                        independent = "none") + -->
<!--     # facet_rep_grid(rows = vars(!!as.name(group_var)), -->
<!--     #                cols = vars(channel), -->
<!--     #                scales = "free_x", -->
<!--     #                repeat.tick.labels = T) + -->
<!--     scale_y_continuous(trans = scales::log2_trans()) + -->
<!--     labs(x="Spot Diameter [uM]", y="Intensity (log2)") + -->
<!--     # coord_cartesian(ylim = c(0, 150)) + -->
<!--     theme_bw(8) + -->
<!--     theme(strip.background = element_rect(fill=NA),  -->
<!--           strip.text = element_text(size=6), -->
<!--           panel.grid = element_blank(), -->
<!--           legend.position = "top") -->
<!--   p -->
<!--   ggsave2(str_glue("{Sys.Date()}_spot_diameter_vs_intensity_log2.pdf"), -->
<!--           ggrastr::rasterize(p, dpi=600), -->
<!--           width=2*length(channels),  -->
<!--           height=length(unique(cell[[group_var]]))*2) -->

<!-- } else { -->
<!--   data_plot %>%  -->
<!--     ggplot(aes(Metadata_group,  -->
<!--                spot_AreaShape_EquivalentDiameter, -->
<!--                fill=type, color=type)) + -->
<!--     geom_point(alpha=0.25, size=0.5) + -->
<!--     # geom_smooth(show.legend = T) + -->
<!--     facet_rep_wrap(~ Metadata_prefix + channel,  -->
<!--                    scales = "fixed",  -->
<!--                    repeat.tick.labels = T) + -->
<!--     # labs(x="log2(Intensity)", y="Spark count") + -->
<!--     # coord_cartesian(xlim = c(0, 40), ylim = c(0, 10000)) + -->
<!--     theme_bw(8) + -->
<!--     theme(strip.background = element_rect(fill=NA),  -->
<!--           strip.text = element_text(size=6), -->
<!--           panel.grid = element_blank(), -->
<!--           legend.position = "top") -->
<!--   ggsave2(str_glue("{Sys.Date()}_spot_diameter_vs_intensity.pdf"), -->
<!--           width=6, height=5) -->
<!-- } -->



<!-- data_plot %>%  -->
<!--   ggplot(aes(Metadata_group, Intensity, log2(Intensity), -->
<!--              fill=type, color=type)) + -->
<!--   geom_point(alpha=0.25, size=0.5) + -->
<!--   geom_smooth(show.legend = T) + -->
<!--   facet_rep_wrap(~ Metadata_group + channel,  -->
<!--                  scales = "fixed",  -->
<!--                  repeat.tick.labels = T) + -->
<!--   # labs(x="log2(Intensity)", y="Spark count") + -->
<!--   # coord_cartesian(ylim = c(0, 150)) + -->
<!--   theme_bw(8) + -->
<!--   theme(strip.background = element_rect(fill=NA),  -->
<!--         strip.text = element_text(size=6), -->
<!--         panel.grid = element_blank(), -->
<!--         legend.position = "top") -->
<!-- ggsave2(str_glue("{Sys.Date()}_spot_diameter_vs_intensity_log2.pdf"), -->
<!--         width=6, height=5) -->
<!-- ``` -->


<!-- ## spot radial -->
<!-- ```{r} -->
<!-- if(F) { -->
<!--   data_plot <- spot %>%  -->
<!--     filter(spot_AreaShape_EquivalentDiameter > 5, -->
<!--            spot_RadialDistribution_MeanFrac_ch1_5of5 > 0.5 -->
<!--     ) %>% -->
<!--     pivot_longer( -->
<!--       contains("spot_RadialDistribution_MeanFrac"), -->
<!--       names_to = c("channel", "radial_order"),  -->
<!--       names_sep = "_", -->
<!--       names_prefix = "spot_RadialDistribution_MeanFrac_", -->
<!--       values_to = "MeanFrac") %>%  -->
<!--     mutate(radial_order=radial_order %>%  -->
<!--              str_replace_all("of5","") %>%  -->
<!--              as.integer()) -->
<!--   # filter(spot_Number_Object_Number %in% 5) %>%  -->
<!--   # glimpse() -->

<!--   data_plot %>%  -->
<!--     ggplot(aes(radial_order, MeanFrac)) + -->
<!--     # geom_point(alpha=0.25, size=0.5) + -->
<!--     geom_path(aes(color=log2(spot_AreaShape_EquivalentDiameter), -->
<!--                   group=str_c(ImageNumber, spot_Number_Object_Number))) + -->
<!--     scale_color_viridis_c() + -->
<!--     # geom_smooth(show.legend = T) + -->
<!--     facet_rep_wrap(~ Metadata_group + channel,  -->
<!--                    scales = "fixed",  -->
<!--                    repeat.tick.labels = T) + -->
<!--     # labs(x="log2(Intensity)", y="Spark count") + -->
<!--     # coord_cartesian(ylim = c(0, 150)) + -->
<!--     theme_bw(8) + -->
<!--     theme(strip.background = element_rect(fill=NA),  -->
<!--           strip.text = element_text(size=6), -->
<!--           panel.grid = element_blank(), -->
<!--           legend.position = "top") -->
<!--   ggsave2(str_glue("{Sys.Date()}_spot_radial_vs_meanfrac.pdf"), -->
<!--           width=6, height=5) -->
<!-- } -->
<!-- ``` -->


## SAVE
```{r}
writexl::write_xlsx(
  list(cell=cell),
  str_glue("{Sys.Date()}_data_cell.xlsx"))
```