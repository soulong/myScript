---
title: "CellProfiler Analysis"
format: html
editor_options: 
  chunk_output_type: console
---

## load packages
```{r}
# rstudioapi::getActiveDocumentContext()$path |>
#   dirname() |>
#   setwd()
setwd("D:\\Postdoc_Data\\Project_dRTK\\2024-03-02_dRTK_GRB2_SH2_SHC1_293T_24h")

# load packages
library(tidyverse)
library(cowplot)
library(lemon)
library(ggridges)
```

## read cellprofiler db
```{r}
# load function
source("D:/Script/R_functions/read_sqlite.R")

# read db
raw <- read_sqlite("cp_result.db", 
                   classify_table = NULL,
                   remove_object_prefix = T)
# raw <- map("cp_result.db", read_sqlite) %>% 
#   bind_rows(.id="Metadata_source")

glimpse(raw$image)
glimpse(raw$objects)
```


## define magnification
```{r}
magification <- "20x"
image_width <- unique(raw$image$Image_Width)

# unit: um
objective_view <- c("100x" = 133, "60x" = 221, "20x" = 600)
length_per_pixel <- objective_view[magification] * (1/image_width)
print(str_glue("per pixel length: {round(length_per_pixel, 3)} uM"))
```

<!-- ## metadata position -->
<!-- ```{r} -->
<!-- position_meta <- read_csv("position_metadata.csv") %>%  -->
<!--   # some rows were skipped cause incorrect focus -->
<!--   filter(!is.na(`P Index`)) %>%  -->
<!--   select(Metadata_prefix = prefix,  -->
<!--            Metadata_position = `P Index`, -->
<!--            Metadata_position_name = `Position Name`) -->

<!-- if(is.na(position_meta$Metadata_position_name[1])) { -->
<!--   # you should edit position data here if no position name -->
<!--   print("no position name found, should edit it here") -->
<!--   position_meta <- position_meta %>%  -->
<!--     mutate(Metadata_well = case_when( -->
<!--       Metadata_position %in% 1:20 ~ "SURF-EBFP2", -->
<!--       Metadata_position %in% 21:40 ~ "SURF-mIFP2", -->
<!--       Metadata_position %in% 41:60 ~ "cpSURF-EBFP2", -->
<!--       Metadata_position %in% 61:80 ~ "cpSURF-mIFP", -->
<!--       Metadata_position %in% 81:100 ~ "SURF-EBFP2+GRB2-mIFP", -->
<!--       Metadata_position %in% 101:120 ~ "SURF-mIFP+GRB2-EBFP2", -->
<!--       Metadata_position %in% 121:140 ~ "cpSURF-EBFP2+GRB2-mIFP", -->
<!--       Metadata_position %in% 141:160 ~ "cpSURF-mIFP+GRB2-EBFP2" -->
<!--     ) %>% factor(c("SURF-EBFP2","cpSURF-EBFP2","SURF-mIFP2","cpSURF-mIFP", -->
<!--                    "SURF-EBFP2+GRB2-mIFP","cpSURF-EBFP2+GRB2-mIFP", -->
<!--                    "SURF-mIFP+GRB2-EBFP2","cpSURF-mIFP+GRB2-EBFP2")), -->
<!--     Metadata_field = Metadata_position) -->

<!-- } else { -->
<!--   # get position name data -->
<!--   print("extract well use position name") -->
<!--   position_meta <- position_meta %>%  -->
<!--     # by well format -->
<!--     separate_wider_delim(., Metadata_position_name,  -->
<!--                          "#", -->
<!--                          names = c("Metadata_well",  -->
<!--                                    "Metadata_field"), -->
<!--                          cols_remove = F) %>%  -->
<!--     mutate(Metadata_field=as.integer(Metadata_field)) -->
<!-- } -->

<!-- position_meta -->
<!-- ``` -->


## metadata plate info
```{r}
# load function
source("D:/Script/R_functions/read_plate_info.R")

# get plate info
plate_info_f <- "plate_info.xlsx"

if(file.exists(plate_info_f)) {
  plate_info <- plate_info_f %>%
    map_dfr(read_plate_info_1, add_directory=F) %>%
    # separate_wider_delim(Metadata_group, delim = "+",
    #                      names = c("Metadata_vectorFP", "Metadata_addFP"),
    #                      too_few = "align_start",
    #                      cols_remove = F) %>% 
    # separate_wider_delim(Metadata_vectorFP, delim = "-",
    #                      names = c("Metadata_vector", NA),
    #                      too_few = "align_start",
    #                      cols_remove = F) %>% 
    # mutate(across(c(Metadata_group, Metadata_vectorFP, 
    #                 Metadata_vector, Metadata_addFP), 
    #               ~ replace_na(.x, ""))) %>% 
    mutate(Metadata_vector = factor(Metadata_vector,
                                   levels=unique(Metadata_vector)),
           # Metadata_serum = factor(Metadata_serum,
           #                         levels=unique(Metadata_serum))
           )
  
  plate_info
  
} else {
  plate_info <- NULL
}

```

## tidy image
```{r}
# glimpse(raw$image)
Image <- raw$image %>% 
  select(!c(starts_with("Image_Count_"),
            matches("Image_Intensity_Percentile_[25]_.*"))) %>% 
  rename_with(\(x) str_replace(x, "Intensity_Percentile_1", "bg"))

# Image <- Image %>% 
#   mutate(Metadata_prefix=factor(Metadata_prefix,
#                                 str_c("P",1:14))) %>% 
#   mutate(Metadata_well=factor(Metadata_well,
#                               crossing(x=LETTERS[1:16], y=1:24) %>% 
#                                 unite("well", x, y, sep="") %>% 
#                                 pull(well)))

# merge with position meta
Image <- Image %>% 
  # right_join(position_meta, .) %>% 
  right_join(plate_info, .)

glimpse(Image)
```

## tidy cellRegion
```{r}
# glimpse(raw$objects[[1]])
cellRegion <- raw$objects[[1]] %>% 
  select(!any_of(c("Parent_ConvertImageToObjects",
                   "ObjectNumber",
                   "Number_Object_Number"))) %>% 
  right_join(Image, ., 
             by=join_by(ImageNumber)) %>% 
  # scale pixel to actual length
  mutate(across(matches("(Area)"), \(x) x * (length_per_pixel)^2)) %>% 
  mutate(across(matches(
    "(Diameter)|(AxisLength)|(Radius)|(Perimeter)$"),
    \(x) x * length_per_pixel))

glimpse(cellRegion)
```

## subtract background
```{r}
# get all channel names
bg_channels <- colnames(Image) %>% 
  str_subset("Image_bg") %>% 
  str_replace_all("Image_bg_", "")
bg_intensity <- colnames(Image) %>% 
  str_subset("Image_bg") %>% 
  map_dbl(~ Image[.x] %>% pull() %>% 
            mean(na.rm=T, trim=0.1) %>% round()) %>% 
  set_names(bg_channels)

# process each channel each time
print("substract background")
for(ch in bg_channels) {
  # subtract image bg
    cellRegion[[str_glue("Image_Intensity_MeanIntensity_{ch}")]] <- 
    (cellRegion[[str_glue("Image_Intensity_MeanIntensity_{ch}")]] - 
       bg_intensity[ch]) %>% 
    map_int(~ max(0, .x, na.rm=T))
  # subtract object bg
  cellRegion[[str_glue("Intensity_MeanIntensity_{ch}")]] <- 
    (cellRegion[[str_glue("Intensity_MeanIntensity_{ch}")]] - 
       bg_intensity[ch]) %>% 
    map_int(~ max(0, .x, na.rm=T))
}

cellRegion <- cellRegion %>% 
  # select(!any_of(ends_with("_ch1"))) %>%
  filter(!is.na(Metadata_vector))

glimpse(cellRegion)
```



## covered area per cellRegion
```{r}
obj <- "cellRegion"

axis_var <- "Metadata_vector"
fill_var <- "Metadata_vector"
fact_var <- "Metadata_prefix"

show_legend <- F

# ridge plot
p <- eval(parse(text=obj)) %>% 
  ggplot(aes(AreaShape_Area,
             !!as.name(axis_var),
             fill = !!as.name(fill_var))) +
  geom_density_ridges(color = "grey80", linewidth=0.1, alpha=0.8,
                      scale = 1.2, show.legend = show_legend) +
  { if(!is.na(fact_var)) {
      ggh4x::facet_grid2(
        # rows=vars(Metadata_vector, Metadata_conc),
        rows=vars(!!as.name(fact_var)),
        axes  = "all") } } +
  labs(x="Mean Cell Covered Area [uM]", y="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_area_ridge.pdf"),
        p,
        width=4, 
        height=ifelse(
          is.na(fact_var), 
          length(unique(eval(parse(text=obj))[[axis_var]]))*0.1,
          length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
            length(unique(eval(parse(text=obj))[[fact_var]]))),
        limitsize = F)

# boxplot
p <- eval(parse(text=obj)) %>% 
  ggplot(aes(!!as.name(axis_var),
             AreaShape_Area,
             # group = !!as.name(fill_var),
             fill = !!as.name(fill_var))) +
  geom_boxplot(position = position_dodge(0.9, preserve = "single"),
               linewidth=0.25,
               outlier.color = "grey50",
               outlier.size = 0.2,
               show.legend = show_legend) +
  { if(!is.na(fact_var)) {
      ggh4x::facet_grid2(
        # rows=vars(Metadata_vector, Metadata_conc),
        rows=vars(!!as.name(fact_var)),
        axes  = "all") } } +
  labs(y="Mean Cell Covered Area [uM]", x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_area_box.pdf"),
        p,
        width=length(unique(eval(parse(text=obj))[[axis_var]]))*0.1, 
        height=ifelse(
          is.na(fact_var), 
          2.5,
          2.5*length(unique(eval(parse(text=obj))[[fact_var]]))),
        limitsize = F)
```

## intensity
```{r}
obj <- "cellRegion"

axis_var <- "Metadata_vector"
fill_var <- "Metadata_vector"
fact_var <- "Metadata_prefix"

show_legend <- F
  
channels <- eval(parse(text=obj)) %>% 
  colnames() %>% 
  str_subset(str_glue("^Intensity_MeanIntensity_.*")) %>% 
  str_replace_all("Intensity_MeanIntensity_", "")

intensity_data <- eval(parse(text=obj)) %>% 
  pivot_longer(
    any_of(as.character(str_glue(
      "Intensity_MeanIntensity_{channels}"))),
    names_to = "channel", 
    names_prefix = str_glue("Intensity_MeanIntensity_"),
    values_to = "Intensity")

# ridge plot
p <- intensity_data %>% 
  ggplot(aes(Intensity, !!as.name(axis_var),
             fill = !!as.name(fill_var))) +
  geom_density_ridges(color = "grey80", linewidth=0.1, alpha=0.8,
                      scale = 1.2, show.legend = show_legend) +
  scale_x_continuous(trans = scales::log2_trans()) +
  {if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = "free_x", 
      axes  = "all")
  } else {
    ggh4x::facet_grid2(
      # rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = "free_x", 
      axes  = "all")
  }} +
  labs(x="Intensity",y="") +
  # coord_cartesian(xlim = c(0, 1000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_intensity_ridge.pdf"),
        p,
        width=2.5*length(unique(intensity_data$channel)) , 
        height=ifelse(
          is.na(fact_var), 
          length(unique(eval(parse(text=obj))[[axis_var]]))*0.1,
          length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
            length(unique(eval(parse(text=obj))[[fact_var]]))),
        limitsize = F)

# boxplot
p <- intensity_data %>% 
  ggplot(aes(!!as.name(axis_var),
             Intensity,
             fill = !!as.name(fill_var))) +
  geom_boxplot(position = position_dodge(0.9, preserve = "single"),
               linewidth=0.25,
               outlier.color = "grey50",
               outlier.size = 0.2,
               show.legend = show_legend) +
  scale_y_continuous(trans = scales::log2_trans()) +
  {if(!is.na(fact_var)) {
    ggh4x::facet_grid2(
      rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = "free_y", 
      axes  = "all")
  } else {
    ggh4x::facet_grid2(
      # rows=vars(!!as.name(fact_var)),
      cols=vars(channel),
      scales = "free_y", 
      axes  = "all")
  }} +
  labs(y="Intensity", x="") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top",
        legend.title = element_blank(),
        legend.key.size = unit(1.5, "mm"))
ggsave2(str_glue("{Sys.Date()}_{obj}_intensity_box.pdf"),
        p,
        width=length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
          length(unique(intensity_data$channel)), 
        height=ifelse(
          is.na(fact_var), 
          2.5,
          2.5*length(unique(eval(parse(text=obj))[[fact_var]]))),
        limitsize = F)


# flexible here
if(F) {
  intensity_data %>% 
    ggplot(aes(!!as.name(axis_var),
               Intensity,
               fill = !!as.name(fill_var))) +
    geom_boxplot(position = position_dodge(0.9, preserve = "single"),
                 linewidth=0.25,
                 outlier.color = "grey50",
                 outlier.size = 0.2,
                 show.legend = show_legend) +
    scale_y_continuous(trans = scales::log2_trans()) +
    ggh4x::facet_grid2(
      # cols=vars(channel, Metadata_adaptor),
      rows=vars(!!as.name(fact_var)),
      scales = "free", space = "fixed",
      axes  = "all", independent = "y") +
    labs(x="", y="Intensity") +
    # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top",
          legend.title = element_blank(),
          legend.key.size = unit(1.5, "mm"))
  ggsave2(str_glue("{Sys.Date()}_{obj}_intensity_2.pdf"),
          width=8, 
          height=4)
}
```


## granularity
```{r}
obj <- "cellRegion"

axis_var <- "Metadata_well"
fill_var <- "Metadata_lib"
fact_var <- "Metadata_prefix"

if(any(str_detect("Granularity_", 
                  colnames(eval(parse(text=obj)))))) {
  
  # granularity per field
  granularity_data <- eval(parse(text=obj)) %>% 
    pivot_longer(
      matches("Granularity_.*"),
      names_to = c("granularity_order", "channel"), 
      names_pattern = "Granularity_(.+)_(.+)$",
      # names_prefix = "Intensity_MeanIntensity_",
      values_to = "granularity_value") %>% 
    filter(granularity_order %in% 2:5) %>% 
    mutate(granularity_order=str_c("Granularity_", granularity_order)) %>% 
    reframe(mean=mean(granularity_value, na.rm=T),
            sd=sd(granularity_value, na.rm=T),
            se=sd/sqrt(n()),
            .by=c(all_of(c(plate_var, axis_var, color_var,
                           "granularity_order", "channel"))))
  
  # point range plot
  granularity_data %>% 
    ggplot(aes(!!as.name(axis_var),
               mean, 
               color = !!as.name(color_var))) +
    geom_pointrange(aes(ymin=mean-se, ymax=mean+se), 
                    size=0.15, show.legend = F) +
    {if(!is.na(fact_var)) {
      ggh4x::facet_grid2(cols=vars(granularity_order), 
                         rows=vars(!!as.name(fact_var)),
                         scales="fixed",
                         # independent="y",
                         axes = "all") 
    } else {
      ggh4x::facet_grid2(cols=vars(granularity_order), 
                         # rows=vars(!!as.name(fact_var)),
                         scales="fixed",
                         # independent="y",
                         axes = "all")
    } }+
    labs(x="", y="Mean Granularity per Field") +
    theme_bw(8) +
    theme(strip.background = element_rect(fill=NA), 
          strip.text = element_text(size=6),
          axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
          panel.grid = element_blank(),
          legend.position = "top")
  ggsave2(str_glue("{Sys.Date()}_{obj}_granularity_mean_se.pdf"),
          # width=(colnames(granularity_data) %>% 
          #          str_subset("Granularity_") %>% 
          #          length())*3, 
          # height=length(unique(cellRegion[[fact_var]]))*1.5,
          width=length(unique(eval(parse(text=obj))[[axis_var]]))*0.1*
            length(unique(granularity_data[[granularity_order]])), 
          height=ifelse(
            is.na(fact_var), 
            2.5,
            2.5*length(unique(granularity_data[[fact_var]]))),
          limitsize = F) 
}

```


## ratio to DMSO
```{r}
grouping_var <- c("Metadata_prefix", "Metadata_well")

# subset control
cellRegion_dmso <- cellRegion %>% 
  filter(Metadata_lib == "DMSO") %>% 
  reframe(across(
    matches(".*(AreaShape_Area)|(Intensity_MeanIntensity_)|(Granularity_).*"),
    ~ mean(.x, na.rm=T, trim=0.25)),
    .by = all_of(grouping_var)) %>% 
  reframe(across(
    !starts_with("Metadata_"),
    ~ mean(.x, na.rm=T, trim=0.25))) %>% 
  rename_with(~ str_c(.x, "_DMSO"), everything())

# get ratio
cellRegion_ratio <- cellRegion %>% 
  cross_join(cellRegion_dmso) %>% 
  mutate(area_ratio = (cellRegion_AreaShape_Area / 
           cellRegion_AreaShape_Area_DMSO) %>% log2(),
         intensity_ch1_ratio = (cellRegion_Intensity_MeanIntensity_ch1 / 
           cellRegion_Intensity_MeanIntensity_ch1_DMSO) %>% log2(),
         granularity_1_ch1_ratio = (cellRegion_Granularity_1_ch1 / 
           cellRegion_Granularity_1_ch1_DMSO) %>% log2(),
         granularity_2_ch1_ratio = (cellRegion_Granularity_2_ch1 / 
           cellRegion_Granularity_2_ch1_DMSO) %>% log2(),
         granularity_3_ch1_ratio = (cellRegion_Granularity_3_ch1 / 
           cellRegion_Granularity_3_ch1_DMSO) %>% log2(),
         granularity_4_ch1_ratio = (cellRegion_Granularity_4_ch1 / 
           cellRegion_Granularity_4_ch1_DMSO) %>% log2(),
         granularity_5_ch1_ratio = (cellRegion_Granularity_5_ch1 / 
           cellRegion_Granularity_5_ch1_DMSO) %>% log2())
```


## ratio area & intensity
```{r}
plate_var <- "Metadata_prefix"
axis_var <- "Metadata_well"
color_var <- "Metadata_well"


# cell area per field
cellRegion_ratio %>% 
  reframe(mean=mean(area_ratio, na.rm=T),
          sd=sd(area_ratio, na.rm=T),
          se=sd/sqrt(n()),
          .by=c(all_of(c(plate_var, axis_var, color_var)))) %>% 
  ggplot(aes(!!as.name(axis_var),
             mean, 
             color = !!as.name(color_var))) +
  geom_pointrange(aes(ymin=mean-se, ymax=mean+se), 
                  size=0.15, show.legend = F) +
  lemon::facet_rep_grid(rows=vars(!!as.name(plate_var)),
                        repeat.tick.labels = T) +
  labs(x="", y="Ratio of Cell Covered Area to DMSO (log2)") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top")
ggsave2(str_glue("{Sys.Date()}_cellRegion_area_ratio_mean_se.pdf"),
        width=(colnames(cellRegion) %>% 
                 str_subset("Intensity_MeanIntensity_") %>% 
                 length())*5, 
        height=length(unique(cellRegion[[plate_var]]))*1.5)

# NxMAD
intensity_mad <- cellRegion_ratio %>% 
  filter(Metadata_lib == "DMSO") %>% 
  pull(intensity_ch1_ratio) %>% 
  mad() %>% 
  magrittr::multiply_by(3)

# intensity per field
cellRegion_ratio %>% 
  pivot_longer(
    matches("intensity_.*_ratio"),
    names_to = "channel", 
    names_pattern = "intensity_(.*)_ratio",
    values_to = "ratio") %>%
  reframe(mean=mean(ratio, na.rm=T),
          sd=sd(ratio, na.rm=T),
          se=sd/sqrt(n()),
          .by=c(all_of(c(plate_var, axis_var, color_var, "channel")))) %>% 
  ggplot(aes(!!as.name(axis_var),
             mean, 
             color = !!as.name(color_var))) +
  geom_pointrange(aes(ymin=mean-se, ymax=mean+se), 
                  size=0.15, show.legend = F) +
  geom_hline(yintercept = -intensity_mad, color="grey50", linetype=2) +
  geom_hline(yintercept = intensity_mad, color="grey50", linetype=2) +
  lemon::facet_rep_grid(cols=vars(channel), 
                        rows=vars(!!as.name(plate_var)),
                        scales="free_x",
                        repeat.tick.labels = T) +
  labs(x="", y="Ratio of Intensity to DMSO (log2)") +
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 2000)) +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top")
ggsave2(str_glue("{Sys.Date()}_cellRegion_intensity_ratio_mean_se.pdf"),
        width=(colnames(cellRegion) %>% 
                 str_subset("Intensity_MeanIntensity_") %>% 
                 length())*5, 
        height=length(unique(cellRegion[[plate_var]]))*1.5)
```


## ratio granularity
```{r}
plate_var <- "Metadata_prefix"
axis_var <- "Metadata_well"
color_var <- "Metadata_well"

# NxMAD
granularity_mad <- cellRegion_ratio %>% 
  filter(Metadata_lib == "DMSO") %>% 
  select(matches("granularity_[1-5]_ch1_ratio")) %>% 
  as.matrix() %>% 
  mad() %>% 
  magrittr::multiply_by(3)

# granularity per field
cellRegion_ratio %>% 
  pivot_longer(
    matches("granularity_.*_.*_ratio"),
    # any_of(as.character(str_glue("cellRegion_Intensity_MeanIntensity_{channels}"))),
    names_to = c("granularity_order", "channel"), 
    names_pattern = "granularity_(.*)_(.*)_ratio$",
    # names_prefix = "cellRegion_Intensity_MeanIntensity_",
    values_to = "ratio") %>% 
  filter(granularity_order %in% 2:5) %>% 
  mutate(granularity_order=str_c("Granularity_", granularity_order)) %>% 
  reframe(mean=mean(ratio, na.rm=T),
          sd=sd(ratio, na.rm=T),
          se=sd/sqrt(n()),
          .by=c(all_of(c(plate_var, axis_var, color_var,
                         "granularity_order", "channel")))) %>% 
  ggplot(aes(!!as.name(axis_var),
             mean, 
             color = !!as.name(color_var))) +
  geom_pointrange(aes(ymin=mean-se, ymax=mean+se), 
                  size=0.15, show.legend = F) +
  geom_hline(yintercept = -granularity_mad, color="grey50", linetype=2) +
  geom_hline(yintercept = granularity_mad, color="grey50", linetype=2) +
  ggh4x::facet_grid2(cols=vars(granularity_order), 
                     rows=vars(!!as.name(plate_var)),
                     scales="free_x",
                     # independent="y",
                     axes = "all") +
  labs(x="", y="Ratio of Granularity to DMSO (log2)") +
  theme_bw(8) +
  theme(strip.background = element_rect(fill=NA), 
        strip.text = element_text(size=6),
        axis.text.x = element_text(size=4, angle = 90, vjust=0.5, hjust=1),
        panel.grid = element_blank(),
        legend.position = "top")
ggsave2(str_glue("{Sys.Date()}_cellRegion_granularity_ratio_mean_se.pdf"),
        width=(colnames(cellRegion) %>% 
                 str_subset("Granularity_") %>% 
                 length())*3, 
        height=length(unique(cellRegion[[plate_var]]))*1.5)
```

## summarize to well
```{r}
# ratio summarized to well
cellRegion_ratio_well <- cellRegion_ratio %>% 
  reframe(across(ends_with("_ratio"), 
                 list(mean=mean, sd=sd)),
          .by = setdiff(starts_with("Metadata_"),
                        matches("(Metadata_field)|(Metadata_position_name)|(Metadata_position)|(Metadata_stack)|(Metadata_timepoint)"))) %>% 
  mutate(across(!starts_with("Metadata_"), ~ round(.x, 3)))

# plot 
cellRegion_ratio_well %>% 
  arrange(desc(granularity_2_ch1_ratio_mean)) %>% 
  mutate(uid=row_number()) %>% 
  mutate(area_ratio_mean=ifelse(area_ratio_mean > 2, 2, area_ratio_mean),
         area_ratio_mean=ifelse(area_ratio_mean < -2, -2, area_ratio_mean)) %>% 
  ggplot() +
  # geom_point(aes(uid, area_ratio_mean),
  #            size=1, color="steelblue", data=data_plot) +
  geom_hline(yintercept = 0, color="grey50", linetype="dashed", linewidth=1.5) +
  geom_point(aes(uid, intensity_ch1_ratio_mean),
             size=0.7, color="steelblue", alpha=0.75) +
  geom_pointpath(aes(uid, granularity_2_ch1_ratio_mean, 
                     size=area_ratio_mean), 
                 color="darkred",  alpha=0.75) +
  scale_size_continuous(range=c(0.2, 1.5)) +
  coord_cartesian(ylim = c(-2, 2)) +
  # guides(size="Area Ratio to DMSO (log2)") +
  labs(x="Compound Rank Based on Granularity", 
       y="Intensity Ratio to DMSO (log2)", 
       size="Cell Covered Area Ratio to DMSO (log2)") +
  theme_bw() +
  theme(legend.position = "top")
ggsave2(str_glue("{Sys.Date()}_ratio_rank_summary.pdf"),
        width=7, 
        height=5)
```


## SAVE DATA
```{r}
writexl::write_xlsx(
  list(cellRegion_ratio=cellRegion_ratio,
       cellRegion_ratio_well=cellRegion_ratio_well),
  str_glue("{Sys.Date()}_data.xlsx"))
```


